// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get bulk editable fields
    ///
    /// Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.
    ///
    /// **[Permissions](#permissions) required:**
    ///
    ///  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
    ///  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
    ///  *  Depending on the field, any field-specific permissions required to edit it.
    ///
    /// - Remark: HTTP `GET /rest/api/3/bulk/issues/fields`.
    /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)`.
    func getBulkEditableFields(_ input: Operations.getBulkEditableFields.Input) async throws -> Operations.getBulkEditableFields.Output
    /// Bulk edit issues
    ///
    /// Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.
    ///
    /// **[Permissions](#permissions) required:**
    ///
    ///  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
    ///  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  Edit [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
    ///
    /// - Remark: HTTP `POST /rest/api/3/bulk/issues/fields`.
    /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/post(submitBulkEdit)`.
    func submitBulkEdit(_ input: Operations.submitBulkEdit.Input) async throws -> Operations.submitBulkEdit.Output
    /// Create issue
    ///
    /// Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
    ///
    /// The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
    ///
    /// Creating a subtask differs from creating an issue as follows:
    ///
    ///  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
    ///  *  `parent` must contain the ID or key of the parent issue.
    ///
    /// In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
    ///
    /// **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
    ///
    /// - Remark: HTTP `POST /rest/api/3/issue`.
    /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)`.
    func createIssue(_ input: Operations.createIssue.Input) async throws -> Operations.createIssue.Output
    /// Get field reference data (GET)
    ///
    /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
    ///
    /// To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
    ///
    /// This operation can be accessed anonymously.
    ///
    /// **[Permissions](#permissions) required:** None.
    ///
    /// - Remark: HTTP `GET /rest/api/3/jql/autocompletedata`.
    /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/get(getAutoComplete)`.
    func getAutoComplete(_ input: Operations.getAutoComplete.Input) async throws -> Operations.getAutoComplete.Output
    /// Get field reference data (POST)
    ///
    /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
    ///
    /// This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
    ///
    /// It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
    ///
    /// **[Permissions](#permissions) required:** None.
    ///
    /// - Remark: HTTP `POST /rest/api/3/jql/autocompletedata`.
    /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/post(getAutoCompletePost)`.
    func getAutoCompletePost(_ input: Operations.getAutoCompletePost.Input) async throws -> Operations.getAutoCompletePost.Output
    /// Get preference
    ///
    /// Returns the value of a preference of the current user.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
    ///  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
    ///
    /// These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.
    ///
    ///  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
    ///  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
    ///  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
    ///  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `GET /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/get(getPreference)`.
    func getPreference(_ input: Operations.getPreference.Input) async throws -> Operations.getPreference.Output
    /// Set preference
    ///
    /// Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
    ///
    ///  *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
    ///  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
    ///  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
    ///  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
    ///  *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
    ///  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
    ///
    /// These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.
    ///
    ///  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
    ///  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
    ///  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
    ///  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `PUT /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/put(setPreference)`.
    func setPreference(_ input: Operations.setPreference.Input) async throws -> Operations.setPreference.Output
    /// Delete preference
    ///
    /// Deletes a preference of the user, which restores the default value of system defined settings.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
    ///  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `DELETE /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/delete(removePreference)`.
    func removePreference(_ input: Operations.removePreference.Input) async throws -> Operations.removePreference.Output
    /// Get priority schemes
    ///
    /// Returns a [paginated](#pagination) list of priority schemes.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `GET /rest/api/3/priorityscheme`.
    /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/get(getPrioritySchemes)`.
    func getPrioritySchemes(_ input: Operations.getPrioritySchemes.Input) async throws -> Operations.getPrioritySchemes.Output
    /// Create priority scheme
    ///
    /// Creates a new priority scheme.
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/priorityscheme`.
    /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)`.
    func createPriorityScheme(_ input: Operations.createPriorityScheme.Input) async throws -> Operations.createPriorityScheme.Output
    /// Get all projects
    ///
    /// Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
    ///
    /// This operation can be accessed anonymously.
    ///
    /// **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    ///
    /// - Remark: HTTP `GET /rest/api/3/project`.
    /// - Remark: Generated from `#/paths//rest/api/3/project/get(getAllProjects)`.
    @available(*, deprecated)
    func getAllProjects(_ input: Operations.getAllProjects.Input) async throws -> Operations.getAllProjects.Output
    /// Create project
    ///
    /// Creates a project based on a project type template, as shown in the following table:
    ///
    /// | Project Type Key | Project Template Key |  
    /// |--|--|  
    /// | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  
    /// | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  
    /// | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  
    /// The project types are available according to the installed Jira features as follows:
    ///
    ///  *  Jira Core, the default, enables `business` projects.
    ///  *  Jira Service Management enables `service_desk` projects.
    ///  *  Jira Software enables `software` projects.
    ///
    /// To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/project`.
    /// - Remark: Generated from `#/paths//rest/api/3/project/post(createProject)`.
    func createProject(_ input: Operations.createProject.Input) async throws -> Operations.createProject.Output
    /// Get user
    ///
    /// Returns a user.
    ///
    /// Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
    ///
    /// **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `GET /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/get(getUser)`.
    func getUser(_ input: Operations.getUser.Input) async throws -> Operations.getUser.Output
    /// Create user
    ///
    /// Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
    ///
    /// If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/post(createUser)`.
    func createUser(_ input: Operations.createUser.Input) async throws -> Operations.createUser.Output
    /// Delete user
    ///
    /// Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
    ///
    /// **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
    ///
    /// - Remark: HTTP `DELETE /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)`.
    func removeUser(_ input: Operations.removeUser.Input) async throws -> Operations.removeUser.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get bulk editable fields
    ///
    /// Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.
    ///
    /// **[Permissions](#permissions) required:**
    ///
    ///  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
    ///  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
    ///  *  Depending on the field, any field-specific permissions required to edit it.
    ///
    /// - Remark: HTTP `GET /rest/api/3/bulk/issues/fields`.
    /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)`.
    public func getBulkEditableFields(
        query: Operations.getBulkEditableFields.Input.Query,
        headers: Operations.getBulkEditableFields.Input.Headers = .init()
    ) async throws -> Operations.getBulkEditableFields.Output {
        try await getBulkEditableFields(Operations.getBulkEditableFields.Input(
            query: query,
            headers: headers
        ))
    }
    /// Bulk edit issues
    ///
    /// Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.
    ///
    /// **[Permissions](#permissions) required:**
    ///
    ///  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
    ///  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  Edit [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
    ///
    /// - Remark: HTTP `POST /rest/api/3/bulk/issues/fields`.
    /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/post(submitBulkEdit)`.
    public func submitBulkEdit(
        headers: Operations.submitBulkEdit.Input.Headers = .init(),
        body: Operations.submitBulkEdit.Input.Body
    ) async throws -> Operations.submitBulkEdit.Output {
        try await submitBulkEdit(Operations.submitBulkEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create issue
    ///
    /// Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
    ///
    /// The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
    ///
    /// Creating a subtask differs from creating an issue as follows:
    ///
    ///  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
    ///  *  `parent` must contain the ID or key of the parent issue.
    ///
    /// In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
    ///
    /// **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
    ///
    /// - Remark: HTTP `POST /rest/api/3/issue`.
    /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)`.
    public func createIssue(
        query: Operations.createIssue.Input.Query = .init(),
        headers: Operations.createIssue.Input.Headers = .init(),
        body: Operations.createIssue.Input.Body
    ) async throws -> Operations.createIssue.Output {
        try await createIssue(Operations.createIssue.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Get field reference data (GET)
    ///
    /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
    ///
    /// To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
    ///
    /// This operation can be accessed anonymously.
    ///
    /// **[Permissions](#permissions) required:** None.
    ///
    /// - Remark: HTTP `GET /rest/api/3/jql/autocompletedata`.
    /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/get(getAutoComplete)`.
    public func getAutoComplete(headers: Operations.getAutoComplete.Input.Headers = .init()) async throws -> Operations.getAutoComplete.Output {
        try await getAutoComplete(Operations.getAutoComplete.Input(headers: headers))
    }
    /// Get field reference data (POST)
    ///
    /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
    ///
    /// This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
    ///
    /// It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
    ///
    /// **[Permissions](#permissions) required:** None.
    ///
    /// - Remark: HTTP `POST /rest/api/3/jql/autocompletedata`.
    /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/post(getAutoCompletePost)`.
    public func getAutoCompletePost(
        headers: Operations.getAutoCompletePost.Input.Headers = .init(),
        body: Operations.getAutoCompletePost.Input.Body
    ) async throws -> Operations.getAutoCompletePost.Output {
        try await getAutoCompletePost(Operations.getAutoCompletePost.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get preference
    ///
    /// Returns the value of a preference of the current user.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
    ///  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
    ///
    /// These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.
    ///
    ///  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
    ///  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
    ///  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
    ///  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `GET /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/get(getPreference)`.
    public func getPreference(
        query: Operations.getPreference.Input.Query,
        headers: Operations.getPreference.Input.Headers = .init()
    ) async throws -> Operations.getPreference.Output {
        try await getPreference(Operations.getPreference.Input(
            query: query,
            headers: headers
        ))
    }
    /// Set preference
    ///
    /// Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
    ///
    ///  *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
    ///  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
    ///  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
    ///  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
    ///  *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
    ///  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
    ///
    /// These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.
    ///
    ///  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
    ///  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
    ///  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
    ///  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `PUT /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/put(setPreference)`.
    public func setPreference(
        query: Operations.setPreference.Input.Query,
        headers: Operations.setPreference.Input.Headers = .init(),
        body: Operations.setPreference.Input.Body
    ) async throws -> Operations.setPreference.Output {
        try await setPreference(Operations.setPreference.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Delete preference
    ///
    /// Deletes a preference of the user, which restores the default value of system defined settings.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
    ///  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `DELETE /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/delete(removePreference)`.
    public func removePreference(query: Operations.removePreference.Input.Query) async throws -> Operations.removePreference.Output {
        try await removePreference(Operations.removePreference.Input(query: query))
    }
    /// Get priority schemes
    ///
    /// Returns a [paginated](#pagination) list of priority schemes.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `GET /rest/api/3/priorityscheme`.
    /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/get(getPrioritySchemes)`.
    public func getPrioritySchemes(
        query: Operations.getPrioritySchemes.Input.Query = .init(),
        headers: Operations.getPrioritySchemes.Input.Headers = .init()
    ) async throws -> Operations.getPrioritySchemes.Output {
        try await getPrioritySchemes(Operations.getPrioritySchemes.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create priority scheme
    ///
    /// Creates a new priority scheme.
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/priorityscheme`.
    /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)`.
    public func createPriorityScheme(
        headers: Operations.createPriorityScheme.Input.Headers = .init(),
        body: Operations.createPriorityScheme.Input.Body
    ) async throws -> Operations.createPriorityScheme.Output {
        try await createPriorityScheme(Operations.createPriorityScheme.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get all projects
    ///
    /// Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
    ///
    /// This operation can be accessed anonymously.
    ///
    /// **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    ///
    /// - Remark: HTTP `GET /rest/api/3/project`.
    /// - Remark: Generated from `#/paths//rest/api/3/project/get(getAllProjects)`.
    @available(*, deprecated)
    public func getAllProjects(
        query: Operations.getAllProjects.Input.Query = .init(),
        headers: Operations.getAllProjects.Input.Headers = .init()
    ) async throws -> Operations.getAllProjects.Output {
        try await getAllProjects(Operations.getAllProjects.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create project
    ///
    /// Creates a project based on a project type template, as shown in the following table:
    ///
    /// | Project Type Key | Project Template Key |  
    /// |--|--|  
    /// | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  
    /// | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  
    /// | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  
    /// The project types are available according to the installed Jira features as follows:
    ///
    ///  *  Jira Core, the default, enables `business` projects.
    ///  *  Jira Service Management enables `service_desk` projects.
    ///  *  Jira Software enables `software` projects.
    ///
    /// To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/project`.
    /// - Remark: Generated from `#/paths//rest/api/3/project/post(createProject)`.
    public func createProject(
        headers: Operations.createProject.Input.Headers = .init(),
        body: Operations.createProject.Input.Body
    ) async throws -> Operations.createProject.Output {
        try await createProject(Operations.createProject.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get user
    ///
    /// Returns a user.
    ///
    /// Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
    ///
    /// **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `GET /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/get(getUser)`.
    public func getUser(
        query: Operations.getUser.Input.Query = .init(),
        headers: Operations.getUser.Input.Headers = .init()
    ) async throws -> Operations.getUser.Output {
        try await getUser(Operations.getUser.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create user
    ///
    /// Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
    ///
    /// If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/post(createUser)`.
    public func createUser(
        headers: Operations.createUser.Input.Headers = .init(),
        body: Operations.createUser.Input.Body
    ) async throws -> Operations.createUser.Output {
        try await createUser(Operations.createUser.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete user
    ///
    /// Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
    ///
    /// **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
    ///
    /// - Remark: HTTP `DELETE /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)`.
    public func removeUser(query: Operations.removeUser.Input.Query) async throws -> Operations.removeUser.Output {
        try await removeUser(Operations.removeUser.Input(query: query))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://your-domain.atlassian.net",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Details of an application role.
        ///
        /// - Remark: Generated from `#/components/schemas/ApplicationRole`.
        public struct ApplicationRole: Codable, Hashable, Sendable {
            /// The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/defaultGroups`.
            public var defaultGroups: [Swift.String]?
            /// The groups that are granted default access for this application role.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/defaultGroupsDetails`.
            public var defaultGroupsDetails: [Components.Schemas.GroupName]?
            /// Deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/defined`.
            public var defined: Swift.Bool?
            /// The groups associated with the application role.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/groupDetails`.
            public var groupDetails: [Components.Schemas.GroupName]?
            /// The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/groups`.
            public var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/hasUnlimitedSeats`.
            public var hasUnlimitedSeats: Swift.Bool?
            /// The key of the application role.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/key`.
            public var key: Swift.String?
            /// The display name of the application role.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/name`.
            public var name: Swift.String?
            /// The maximum count of users on your license.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/numberOfSeats`.
            public var numberOfSeats: Swift.Int32?
            /// Indicates if the application role belongs to Jira platform (`jira-core`).
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/platform`.
            public var platform: Swift.Bool?
            /// The count of users remaining on your license.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/remainingSeats`.
            public var remainingSeats: Swift.Int32?
            /// Determines whether this application role should be selected by default on user creation.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/selectedByDefault`.
            public var selectedByDefault: Swift.Bool?
            /// The number of users counting against your license.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/userCount`.
            public var userCount: Swift.Int32?
            /// The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
            ///
            /// - Remark: Generated from `#/components/schemas/ApplicationRole/userCountDescription`.
            public var userCountDescription: Swift.String?
            /// Creates a new `ApplicationRole`.
            ///
            /// - Parameters:
            ///   - defaultGroups: The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
            ///   - defaultGroupsDetails: The groups that are granted default access for this application role.
            ///   - defined: Deprecated.
            ///   - groupDetails: The groups associated with the application role.
            ///   - groups: The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
            ///   - hasUnlimitedSeats:
            ///   - key: The key of the application role.
            ///   - name: The display name of the application role.
            ///   - numberOfSeats: The maximum count of users on your license.
            ///   - platform: Indicates if the application role belongs to Jira platform (`jira-core`).
            ///   - remainingSeats: The count of users remaining on your license.
            ///   - selectedByDefault: Determines whether this application role should be selected by default on user creation.
            ///   - userCount: The number of users counting against your license.
            ///   - userCountDescription: The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
            public init(
                defaultGroups: [Swift.String]? = nil,
                defaultGroupsDetails: [Components.Schemas.GroupName]? = nil,
                defined: Swift.Bool? = nil,
                groupDetails: [Components.Schemas.GroupName]? = nil,
                groups: [Swift.String]? = nil,
                hasUnlimitedSeats: Swift.Bool? = nil,
                key: Swift.String? = nil,
                name: Swift.String? = nil,
                numberOfSeats: Swift.Int32? = nil,
                platform: Swift.Bool? = nil,
                remainingSeats: Swift.Int32? = nil,
                selectedByDefault: Swift.Bool? = nil,
                userCount: Swift.Int32? = nil,
                userCountDescription: Swift.String? = nil
            ) {
                self.defaultGroups = defaultGroups
                self.defaultGroupsDetails = defaultGroupsDetails
                self.defined = defined
                self.groupDetails = groupDetails
                self.groups = groups
                self.hasUnlimitedSeats = hasUnlimitedSeats
                self.key = key
                self.name = name
                self.numberOfSeats = numberOfSeats
                self.platform = platform
                self.remainingSeats = remainingSeats
                self.selectedByDefault = selectedByDefault
                self.userCount = userCount
                self.userCountDescription = userCountDescription
            }
            public enum CodingKeys: String, CodingKey {
                case defaultGroups
                case defaultGroupsDetails
                case defined
                case groupDetails
                case groups
                case hasUnlimitedSeats
                case key
                case name
                case numberOfSeats
                case platform
                case remainingSeats
                case selectedByDefault
                case userCount
                case userCountDescription
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                defaultGroups = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .defaultGroups
                )
                defaultGroupsDetails = try container.decodeIfPresent(
                    [Components.Schemas.GroupName].self,
                    forKey: .defaultGroupsDetails
                )
                defined = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .defined
                )
                groupDetails = try container.decodeIfPresent(
                    [Components.Schemas.GroupName].self,
                    forKey: .groupDetails
                )
                groups = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .groups
                )
                hasUnlimitedSeats = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .hasUnlimitedSeats
                )
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                numberOfSeats = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .numberOfSeats
                )
                platform = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .platform
                )
                remainingSeats = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .remainingSeats
                )
                selectedByDefault = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .selectedByDefault
                )
                userCount = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .userCount
                )
                userCountDescription = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .userCountDescription
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "defaultGroups",
                    "defaultGroupsDetails",
                    "defined",
                    "groupDetails",
                    "groups",
                    "hasUnlimitedSeats",
                    "key",
                    "name",
                    "numberOfSeats",
                    "platform",
                    "remainingSeats",
                    "selectedByDefault",
                    "userCount",
                    "userCountDescription"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/AvatarUrlsBean`.
        public struct AvatarUrlsBean: Codable, Hashable, Sendable {
            /// The URL of the item's 16x16 pixel avatar.
            ///
            /// - Remark: Generated from `#/components/schemas/AvatarUrlsBean/16x16`.
            public var _16x16: Swift.String?
            /// The URL of the item's 24x24 pixel avatar.
            ///
            /// - Remark: Generated from `#/components/schemas/AvatarUrlsBean/24x24`.
            public var _24x24: Swift.String?
            /// The URL of the item's 32x32 pixel avatar.
            ///
            /// - Remark: Generated from `#/components/schemas/AvatarUrlsBean/32x32`.
            public var _32x32: Swift.String?
            /// The URL of the item's 48x48 pixel avatar.
            ///
            /// - Remark: Generated from `#/components/schemas/AvatarUrlsBean/48x48`.
            public var _48x48: Swift.String?
            /// Creates a new `AvatarUrlsBean`.
            ///
            /// - Parameters:
            ///   - _16x16: The URL of the item's 16x16 pixel avatar.
            ///   - _24x24: The URL of the item's 24x24 pixel avatar.
            ///   - _32x32: The URL of the item's 32x32 pixel avatar.
            ///   - _48x48: The URL of the item's 48x48 pixel avatar.
            public init(
                _16x16: Swift.String? = nil,
                _24x24: Swift.String? = nil,
                _32x32: Swift.String? = nil,
                _48x48: Swift.String? = nil
            ) {
                self._16x16 = _16x16
                self._24x24 = _24x24
                self._32x32 = _32x32
                self._48x48 = _48x48
            }
            public enum CodingKeys: String, CodingKey {
                case _16x16 = "16x16"
                case _24x24 = "24x24"
                case _32x32 = "32x32"
                case _48x48 = "48x48"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                _16x16 = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._16x16
                )
                _24x24 = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._24x24
                )
                _32x32 = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._32x32
                )
                _48x48 = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._48x48
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "16x16",
                    "24x24",
                    "32x32",
                    "48x48"
                ])
            }
        }
        /// Bulk Edit Get Fields Response.
        ///
        /// - Remark: Generated from `#/components/schemas/BulkEditGetFields`.
        public struct BulkEditGetFields: Codable, Hashable, Sendable {
            /// The end cursor for use in pagination.
            ///
            /// - Remark: Generated from `#/components/schemas/BulkEditGetFields/endingBefore`.
            public var endingBefore: Swift.String?
            /// List of all the fields
            ///
            /// - Remark: Generated from `#/components/schemas/BulkEditGetFields/fields`.
            public var fields: [Components.Schemas.IssueBulkEditField]?
            /// The start cursor for use in pagination.
            ///
            /// - Remark: Generated from `#/components/schemas/BulkEditGetFields/startingAfter`.
            public var startingAfter: Swift.String?
            /// Creates a new `BulkEditGetFields`.
            ///
            /// - Parameters:
            ///   - endingBefore: The end cursor for use in pagination.
            ///   - fields: List of all the fields
            ///   - startingAfter: The start cursor for use in pagination.
            public init(
                endingBefore: Swift.String? = nil,
                fields: [Components.Schemas.IssueBulkEditField]? = nil,
                startingAfter: Swift.String? = nil
            ) {
                self.endingBefore = endingBefore
                self.fields = fields
                self.startingAfter = startingAfter
            }
            public enum CodingKeys: String, CodingKey {
                case endingBefore
                case fields
                case startingAfter
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                endingBefore = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .endingBefore
                )
                fields = try container.decodeIfPresent(
                    [Components.Schemas.IssueBulkEditField].self,
                    forKey: .fields
                )
                startingAfter = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .startingAfter
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "endingBefore",
                    "fields",
                    "startingAfter"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/BulkOperationErrorResponse`.
        public struct BulkOperationErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BulkOperationErrorResponse/errors`.
            public var errors: [Components.Schemas.ErrorMessage]?
            /// Creates a new `BulkOperationErrorResponse`.
            ///
            /// - Parameters:
            ///   - errors:
            public init(errors: [Components.Schemas.ErrorMessage]? = nil) {
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case errors
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                errors = try container.decodeIfPresent(
                    [Components.Schemas.ErrorMessage].self,
                    forKey: .errors
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "errors"
                ])
            }
        }
        /// Details of a new priority scheme
        ///
        /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails`.
        public struct CreatePrioritySchemeDetails: Codable, Hashable, Sendable {
            /// The ID of the default priority for the priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/defaultPriorityId`.
            public var defaultPriorityId: Swift.Int64
            /// The description of the priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/description`.
            public var description: Swift.String?
            /// Mappings of issue priorities for issues being migrated in and out of this priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/mappings`.
            public struct mappingsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/mappings/value1`.
                public var value1: Components.Schemas.PriorityMapping
                /// Creates a new `mappingsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PriorityMapping) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Mappings of issue priorities for issues being migrated in and out of this priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/mappings`.
            public var mappings: Components.Schemas.CreatePrioritySchemeDetails.mappingsPayload?
            /// The name of the priority scheme. Must be unique.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/name`.
            public var name: Swift.String
            /// The IDs of priorities in the scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/priorityIds`.
            public var priorityIds: [Swift.Int64]
            /// The IDs of projects that will use the priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePrioritySchemeDetails/projectIds`.
            public var projectIds: [Swift.Int64]?
            /// Creates a new `CreatePrioritySchemeDetails`.
            ///
            /// - Parameters:
            ///   - defaultPriorityId: The ID of the default priority for the priority scheme.
            ///   - description: The description of the priority scheme.
            ///   - mappings: Mappings of issue priorities for issues being migrated in and out of this priority scheme.
            ///   - name: The name of the priority scheme. Must be unique.
            ///   - priorityIds: The IDs of priorities in the scheme.
            ///   - projectIds: The IDs of projects that will use the priority scheme.
            public init(
                defaultPriorityId: Swift.Int64,
                description: Swift.String? = nil,
                mappings: Components.Schemas.CreatePrioritySchemeDetails.mappingsPayload? = nil,
                name: Swift.String,
                priorityIds: [Swift.Int64],
                projectIds: [Swift.Int64]? = nil
            ) {
                self.defaultPriorityId = defaultPriorityId
                self.description = description
                self.mappings = mappings
                self.name = name
                self.priorityIds = priorityIds
                self.projectIds = projectIds
            }
            public enum CodingKeys: String, CodingKey {
                case defaultPriorityId
                case description
                case mappings
                case name
                case priorityIds
                case projectIds
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                defaultPriorityId = try container.decode(
                    Swift.Int64.self,
                    forKey: .defaultPriorityId
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                mappings = try container.decodeIfPresent(
                    Components.Schemas.CreatePrioritySchemeDetails.mappingsPayload.self,
                    forKey: .mappings
                )
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                priorityIds = try container.decode(
                    [Swift.Int64].self,
                    forKey: .priorityIds
                )
                projectIds = try container.decodeIfPresent(
                    [Swift.Int64].self,
                    forKey: .projectIds
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "defaultPriorityId",
                    "description",
                    "mappings",
                    "name",
                    "priorityIds",
                    "projectIds"
                ])
            }
        }
        /// Details about the project.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateProjectDetails`.
        public struct CreateProjectDetails: Codable, Hashable, Sendable {
            /// The default assignee when creating issues for this project.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/assigneeType`.
            @frozen public enum assigneeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case PROJECT_LEAD = "PROJECT_LEAD"
                case UNASSIGNED = "UNASSIGNED"
            }
            /// The default assignee when creating issues for this project.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/assigneeType`.
            public var assigneeType: Components.Schemas.CreateProjectDetails.assigneeTypePayload?
            /// An integer value for the project's avatar.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/avatarId`.
            public var avatarId: Swift.Int64?
            /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/categoryId`.
            public var categoryId: Swift.Int64?
            /// A brief description of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/description`.
            public var description: Swift.String?
            /// The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/fieldConfigurationScheme`.
            public var fieldConfigurationScheme: Swift.Int64?
            /// The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/issueSecurityScheme`.
            public var issueSecurityScheme: Swift.Int64?
            /// The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/issueTypeScheme`.
            public var issueTypeScheme: Swift.Int64?
            /// The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/issueTypeScreenScheme`.
            public var issueTypeScreenScheme: Swift.Int64?
            /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/key`.
            public var key: Swift.String
            /// This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/lead`.
            public var lead: Swift.String?
            /// The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/leadAccountId`.
            public var leadAccountId: Swift.String?
            /// The name of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/name`.
            public var name: Swift.String
            /// The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/notificationScheme`.
            public var notificationScheme: Swift.Int64?
            /// The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/permissionScheme`.
            public var permissionScheme: Swift.Int64?
            /// A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/projectTemplateKey`.
            @frozen public enum projectTemplateKeyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case com_period_pyxis_period_greenhopper_period_jira_colon_gh_hyphen_simplified_hyphen_agility_hyphen_kanban = "com.pyxis.greenhopper.jira:gh-simplified-agility-kanban"
                case com_period_pyxis_period_greenhopper_period_jira_colon_gh_hyphen_simplified_hyphen_agility_hyphen_scrum = "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum"
                case com_period_pyxis_period_greenhopper_period_jira_colon_gh_hyphen_simplified_hyphen_basic = "com.pyxis.greenhopper.jira:gh-simplified-basic"
                case com_period_pyxis_period_greenhopper_period_jira_colon_gh_hyphen_simplified_hyphen_kanban_hyphen_classic = "com.pyxis.greenhopper.jira:gh-simplified-kanban-classic"
                case com_period_pyxis_period_greenhopper_period_jira_colon_gh_hyphen_simplified_hyphen_scrum_hyphen_classic = "com.pyxis.greenhopper.jira:gh-simplified-scrum-classic"
                case com_period_pyxis_period_greenhopper_period_jira_colon_gh_hyphen_cross_hyphen_team_hyphen_template = "com.pyxis.greenhopper.jira:gh-cross-team-template"
                case com_period_pyxis_period_greenhopper_period_jira_colon_gh_hyphen_cross_hyphen_team_hyphen_planning_hyphen_template = "com.pyxis.greenhopper.jira:gh-cross-team-planning-template"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_it_hyphen_service_hyphen_management = "com.atlassian.servicedesk:simplified-it-service-management"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_general_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-general-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_general_hyphen_service_hyphen_desk_hyphen_it = "com.atlassian.servicedesk:simplified-general-service-desk-it"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_general_hyphen_service_hyphen_desk_hyphen_business = "com.atlassian.servicedesk:simplified-general-service-desk-business"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_internal_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-internal-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_external_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-external-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_hr_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-hr-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_facilities_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-facilities-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_legal_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-legal-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_marketing_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-marketing-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_finance_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-finance-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_analytics_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-analytics-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_design_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-design-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_sales_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-sales-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_halp_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:simplified-halp-service-desk"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_blank_hyphen_project_hyphen_it = "com.atlassian.servicedesk:simplified-blank-project-it"
                case com_period_atlassian_period_servicedesk_colon_simplified_hyphen_blank_hyphen_project_hyphen_business = "com.atlassian.servicedesk:simplified-blank-project-business"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_it_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-it-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_hr_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-hr-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_legal_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-legal-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_marketing_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-marketing-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_facilities_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-facilities-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_general_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-general-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_general_hyphen_it_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-general-it-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_general_hyphen_business_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-general-business-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_analytics_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-analytics-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_finance_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-finance-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_design_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-design-service-desk"
                case com_period_atlassian_period_servicedesk_colon_next_hyphen_gen_hyphen_sales_hyphen_service_hyphen_desk = "com.atlassian.servicedesk:next-gen-sales-service-desk"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_content_hyphen_management = "com.atlassian.jira-core-project-templates:jira-core-simplified-content-management"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_document_hyphen_approval = "com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_lead_hyphen_tracking = "com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_process_hyphen_control = "com.atlassian.jira-core-project-templates:jira-core-simplified-process-control"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_procurement = "com.atlassian.jira-core-project-templates:jira-core-simplified-procurement"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_project_hyphen_management = "com.atlassian.jira-core-project-templates:jira-core-simplified-project-management"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_recruitment = "com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment"
                case com_period_atlassian_period_jira_hyphen_core_hyphen_project_hyphen_templates_colon_jira_hyphen_core_hyphen_simplified_hyphen_task_hyphen_ = "com.atlassian.jira-core-project-templates:jira-core-simplified-task-"
            }
            /// A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/projectTemplateKey`.
            public var projectTemplateKey: Components.Schemas.CreateProjectDetails.projectTemplateKeyPayload?
            /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/projectTypeKey`.
            @frozen public enum projectTypeKeyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case software = "software"
                case service_desk = "service_desk"
                case business = "business"
            }
            /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/projectTypeKey`.
            public var projectTypeKey: Components.Schemas.CreateProjectDetails.projectTypeKeyPayload?
            /// A link to information about this project, such as project documentation
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/url`.
            public var url: Swift.String?
            /// The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateProjectDetails/workflowScheme`.
            public var workflowScheme: Swift.Int64?
            /// Creates a new `CreateProjectDetails`.
            ///
            /// - Parameters:
            ///   - assigneeType: The default assignee when creating issues for this project.
            ///   - avatarId: An integer value for the project's avatar.
            ///   - categoryId: The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
            ///   - description: A brief description of the project.
            ///   - fieldConfigurationScheme: The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
            ///   - issueSecurityScheme: The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
            ///   - issueTypeScheme: The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
            ///   - issueTypeScreenScheme: The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
            ///   - key: Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
            ///   - lead: This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
            ///   - leadAccountId: The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
            ///   - name: The name of the project.
            ///   - notificationScheme: The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
            ///   - permissionScheme: The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
            ///   - projectTemplateKey: A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
            ///   - projectTypeKey: The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
            ///   - url: A link to information about this project, such as project documentation
            ///   - workflowScheme: The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
            public init(
                assigneeType: Components.Schemas.CreateProjectDetails.assigneeTypePayload? = nil,
                avatarId: Swift.Int64? = nil,
                categoryId: Swift.Int64? = nil,
                description: Swift.String? = nil,
                fieldConfigurationScheme: Swift.Int64? = nil,
                issueSecurityScheme: Swift.Int64? = nil,
                issueTypeScheme: Swift.Int64? = nil,
                issueTypeScreenScheme: Swift.Int64? = nil,
                key: Swift.String,
                lead: Swift.String? = nil,
                leadAccountId: Swift.String? = nil,
                name: Swift.String,
                notificationScheme: Swift.Int64? = nil,
                permissionScheme: Swift.Int64? = nil,
                projectTemplateKey: Components.Schemas.CreateProjectDetails.projectTemplateKeyPayload? = nil,
                projectTypeKey: Components.Schemas.CreateProjectDetails.projectTypeKeyPayload? = nil,
                url: Swift.String? = nil,
                workflowScheme: Swift.Int64? = nil
            ) {
                self.assigneeType = assigneeType
                self.avatarId = avatarId
                self.categoryId = categoryId
                self.description = description
                self.fieldConfigurationScheme = fieldConfigurationScheme
                self.issueSecurityScheme = issueSecurityScheme
                self.issueTypeScheme = issueTypeScheme
                self.issueTypeScreenScheme = issueTypeScreenScheme
                self.key = key
                self.lead = lead
                self.leadAccountId = leadAccountId
                self.name = name
                self.notificationScheme = notificationScheme
                self.permissionScheme = permissionScheme
                self.projectTemplateKey = projectTemplateKey
                self.projectTypeKey = projectTypeKey
                self.url = url
                self.workflowScheme = workflowScheme
            }
            public enum CodingKeys: String, CodingKey {
                case assigneeType
                case avatarId
                case categoryId
                case description
                case fieldConfigurationScheme
                case issueSecurityScheme
                case issueTypeScheme
                case issueTypeScreenScheme
                case key
                case lead
                case leadAccountId
                case name
                case notificationScheme
                case permissionScheme
                case projectTemplateKey
                case projectTypeKey
                case url
                case workflowScheme
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                assigneeType = try container.decodeIfPresent(
                    Components.Schemas.CreateProjectDetails.assigneeTypePayload.self,
                    forKey: .assigneeType
                )
                avatarId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .avatarId
                )
                categoryId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .categoryId
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                fieldConfigurationScheme = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .fieldConfigurationScheme
                )
                issueSecurityScheme = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .issueSecurityScheme
                )
                issueTypeScheme = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .issueTypeScheme
                )
                issueTypeScreenScheme = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .issueTypeScreenScheme
                )
                key = try container.decode(
                    Swift.String.self,
                    forKey: .key
                )
                lead = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .lead
                )
                leadAccountId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .leadAccountId
                )
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                notificationScheme = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .notificationScheme
                )
                permissionScheme = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .permissionScheme
                )
                projectTemplateKey = try container.decodeIfPresent(
                    Components.Schemas.CreateProjectDetails.projectTemplateKeyPayload.self,
                    forKey: .projectTemplateKey
                )
                projectTypeKey = try container.decodeIfPresent(
                    Components.Schemas.CreateProjectDetails.projectTypeKeyPayload.self,
                    forKey: .projectTypeKey
                )
                url = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .url
                )
                workflowScheme = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .workflowScheme
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "assigneeType",
                    "avatarId",
                    "categoryId",
                    "description",
                    "fieldConfigurationScheme",
                    "issueSecurityScheme",
                    "issueTypeScheme",
                    "issueTypeScreenScheme",
                    "key",
                    "lead",
                    "leadAccountId",
                    "name",
                    "notificationScheme",
                    "permissionScheme",
                    "projectTemplateKey",
                    "projectTypeKey",
                    "url",
                    "workflowScheme"
                ])
            }
        }
        /// Details about a created issue or subtask.
        ///
        /// - Remark: Generated from `#/components/schemas/CreatedIssue`.
        public struct CreatedIssue: Codable, Hashable, Sendable {
            /// The ID of the created issue or subtask.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatedIssue/id`.
            public var id: Swift.String?
            /// The key of the created issue or subtask.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatedIssue/key`.
            public var key: Swift.String?
            /// The URL of the created issue or subtask.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatedIssue/self`.
            public var _self: Swift.String?
            /// The response code and messages related to any requested transition.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatedIssue/transition`.
            public struct transitionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreatedIssue/transition/value1`.
                public var value1: Components.Schemas.NestedResponse
                /// Creates a new `transitionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NestedResponse) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The response code and messages related to any requested transition.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatedIssue/transition`.
            public var transition: Components.Schemas.CreatedIssue.transitionPayload?
            /// The response code and messages related to any requested watchers.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatedIssue/watchers`.
            public struct watchersPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreatedIssue/watchers/value1`.
                public var value1: Components.Schemas.NestedResponse
                /// Creates a new `watchersPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NestedResponse) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The response code and messages related to any requested watchers.
            ///
            /// - Remark: Generated from `#/components/schemas/CreatedIssue/watchers`.
            public var watchers: Components.Schemas.CreatedIssue.watchersPayload?
            /// Creates a new `CreatedIssue`.
            ///
            /// - Parameters:
            ///   - id: The ID of the created issue or subtask.
            ///   - key: The key of the created issue or subtask.
            ///   - _self: The URL of the created issue or subtask.
            ///   - transition: The response code and messages related to any requested transition.
            ///   - watchers: The response code and messages related to any requested watchers.
            public init(
                id: Swift.String? = nil,
                key: Swift.String? = nil,
                _self: Swift.String? = nil,
                transition: Components.Schemas.CreatedIssue.transitionPayload? = nil,
                watchers: Components.Schemas.CreatedIssue.watchersPayload? = nil
            ) {
                self.id = id
                self.key = key
                self._self = _self
                self.transition = transition
                self.watchers = watchers
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case key
                case _self = "self"
                case transition
                case watchers
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                transition = try container.decodeIfPresent(
                    Components.Schemas.CreatedIssue.transitionPayload.self,
                    forKey: .transition
                )
                watchers = try container.decodeIfPresent(
                    Components.Schemas.CreatedIssue.watchersPayload.self,
                    forKey: .watchers
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "id",
                    "key",
                    "self",
                    "transition",
                    "watchers"
                ])
            }
        }
        /// An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
        ///
        /// - Remark: Generated from `#/components/schemas/EntityProperty`.
        public struct EntityProperty: Codable, Hashable, Sendable {
            /// The key of the property. Required on create and update.
            ///
            /// - Remark: Generated from `#/components/schemas/EntityProperty/key`.
            public var key: Swift.String?
            /// The value of the property. Required on create and update.
            ///
            /// - Remark: Generated from `#/components/schemas/EntityProperty/value`.
            public var value: OpenAPIRuntime.OpenAPIValueContainer?
            /// Creates a new `EntityProperty`.
            ///
            /// - Parameters:
            ///   - key: The key of the property. Required on create and update.
            ///   - value: The value of the property. Required on create and update.
            public init(
                key: Swift.String? = nil,
                value: OpenAPIRuntime.OpenAPIValueContainer? = nil
            ) {
                self.key = key
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                value = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIValueContainer.self,
                    forKey: .value
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "key",
                    "value"
                ])
            }
        }
        /// Error messages from an operation.
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorCollection`.
        public struct ErrorCollection: Codable, Hashable, Sendable {
            /// The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorCollection/errorMessages`.
            public var errorMessages: [Swift.String]?
            /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorCollection/errors`.
            public struct errorsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `errorsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorCollection/errors`.
            public var errors: Components.Schemas.ErrorCollection.errorsPayload?
            /// - Remark: Generated from `#/components/schemas/ErrorCollection/status`.
            public var status: Swift.Int32?
            /// Creates a new `ErrorCollection`.
            ///
            /// - Parameters:
            ///   - errorMessages: The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
            ///   - errors: The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
            ///   - status:
            public init(
                errorMessages: [Swift.String]? = nil,
                errors: Components.Schemas.ErrorCollection.errorsPayload? = nil,
                status: Swift.Int32? = nil
            ) {
                self.errorMessages = errorMessages
                self.errors = errors
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case errorMessages
                case errors
                case status
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                errorMessages = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .errorMessages
                )
                errors = try container.decodeIfPresent(
                    Components.Schemas.ErrorCollection.errorsPayload.self,
                    forKey: .errors
                )
                status = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .status
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "errorMessages",
                    "errors",
                    "status"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorMessage`.
        public struct ErrorMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorMessage/message`.
            public var message: Swift.String?
            /// Creates a new `ErrorMessage`.
            ///
            /// - Parameters:
            ///   - message:
            public init(message: Swift.String? = nil) {
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case message
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                message = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .message
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "message"
                ])
            }
        }
        /// The metadata describing an issue field.
        ///
        /// - Remark: Generated from `#/components/schemas/FieldMetadata`.
        public struct FieldMetadata: Codable, Hashable, Sendable {
            /// The list of values allowed in the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/allowedValues`.
            public var allowedValues: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// The URL that can be used to automatically complete the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/autoCompleteUrl`.
            public var autoCompleteUrl: Swift.String?
            /// The configuration properties.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/configuration`.
            public struct configurationPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `configurationPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The configuration properties.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/configuration`.
            public var configuration: Components.Schemas.FieldMetadata.configurationPayload?
            /// The default value of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/defaultValue`.
            public var defaultValue: OpenAPIRuntime.OpenAPIValueContainer?
            /// Whether the field has a default value.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/hasDefaultValue`.
            public var hasDefaultValue: Swift.Bool?
            /// The key of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/key`.
            public var key: Swift.String
            /// The name of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/name`.
            public var name: Swift.String
            /// The list of operations that can be performed on the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/operations`.
            public var operations: [Swift.String]
            /// Whether the field is required.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/required`.
            public var required: Swift.Bool
            /// The data type of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/schema`.
            public struct schemaPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FieldMetadata/schema/value1`.
                public var value1: Components.Schemas.JsonTypeBean
                /// Creates a new `schemaPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JsonTypeBean) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The data type of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldMetadata/schema`.
            public var schema: Components.Schemas.FieldMetadata.schemaPayload
            /// Creates a new `FieldMetadata`.
            ///
            /// - Parameters:
            ///   - allowedValues: The list of values allowed in the field.
            ///   - autoCompleteUrl: The URL that can be used to automatically complete the field.
            ///   - configuration: The configuration properties.
            ///   - defaultValue: The default value of the field.
            ///   - hasDefaultValue: Whether the field has a default value.
            ///   - key: The key of the field.
            ///   - name: The name of the field.
            ///   - operations: The list of operations that can be performed on the field.
            ///   - required: Whether the field is required.
            ///   - schema: The data type of the field.
            public init(
                allowedValues: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                autoCompleteUrl: Swift.String? = nil,
                configuration: Components.Schemas.FieldMetadata.configurationPayload? = nil,
                defaultValue: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                hasDefaultValue: Swift.Bool? = nil,
                key: Swift.String,
                name: Swift.String,
                operations: [Swift.String],
                required: Swift.Bool,
                schema: Components.Schemas.FieldMetadata.schemaPayload
            ) {
                self.allowedValues = allowedValues
                self.autoCompleteUrl = autoCompleteUrl
                self.configuration = configuration
                self.defaultValue = defaultValue
                self.hasDefaultValue = hasDefaultValue
                self.key = key
                self.name = name
                self.operations = operations
                self.required = required
                self.schema = schema
            }
            public enum CodingKeys: String, CodingKey {
                case allowedValues
                case autoCompleteUrl
                case configuration
                case defaultValue
                case hasDefaultValue
                case key
                case name
                case operations
                case required
                case schema
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                allowedValues = try container.decodeIfPresent(
                    [OpenAPIRuntime.OpenAPIValueContainer].self,
                    forKey: .allowedValues
                )
                autoCompleteUrl = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .autoCompleteUrl
                )
                configuration = try container.decodeIfPresent(
                    Components.Schemas.FieldMetadata.configurationPayload.self,
                    forKey: .configuration
                )
                defaultValue = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIValueContainer.self,
                    forKey: .defaultValue
                )
                hasDefaultValue = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .hasDefaultValue
                )
                key = try container.decode(
                    Swift.String.self,
                    forKey: .key
                )
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                operations = try container.decode(
                    [Swift.String].self,
                    forKey: .operations
                )
                required = try container.decode(
                    Swift.Bool.self,
                    forKey: .required
                )
                schema = try container.decode(
                    Components.Schemas.FieldMetadata.schemaPayload.self,
                    forKey: .schema
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "allowedValues",
                    "autoCompleteUrl",
                    "configuration",
                    "defaultValue",
                    "hasDefaultValue",
                    "key",
                    "name",
                    "operations",
                    "required",
                    "schema"
                ])
            }
        }
        /// Details of a field that can be used in advanced searches.
        ///
        /// - Remark: Generated from `#/components/schemas/FieldReferenceData`.
        public struct FieldReferenceData: Codable, Hashable, Sendable {
            /// Whether the field provide auto-complete suggestions.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/auto`.
            @frozen public enum autoPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _true = "true"
                case _false = "false"
            }
            /// Whether the field provide auto-complete suggestions.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/auto`.
            public var auto: Components.Schemas.FieldReferenceData.autoPayload?
            /// If the item is a custom field, the ID of the custom field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/cfid`.
            public var cfid: Swift.String?
            /// Whether this field has been deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/deprecated`.
            @frozen public enum deprecatedPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _true = "true"
                case _false = "false"
            }
            /// Whether this field has been deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/deprecated`.
            public var deprecated: Components.Schemas.FieldReferenceData.deprecatedPayload?
            /// The searcher key of the field, only passed when the field is deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/deprecatedSearcherKey`.
            public var deprecatedSearcherKey: Swift.String?
            /// The display name contains the following:
            ///
            ///  *  for system fields, the field name. For example, `Summary`.
            ///  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
            ///  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/displayName`.
            public var displayName: Swift.String?
            /// The valid search operators for the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/operators`.
            public var operators: [Swift.String]?
            /// Whether the field can be used in a query's `ORDER BY` clause.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/orderable`.
            @frozen public enum orderablePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _true = "true"
                case _false = "false"
            }
            /// Whether the field can be used in a query's `ORDER BY` clause.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/orderable`.
            public var orderable: Components.Schemas.FieldReferenceData.orderablePayload?
            /// Whether the content of this field can be searched.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/searchable`.
            @frozen public enum searchablePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _true = "true"
                case _false = "false"
            }
            /// Whether the content of this field can be searched.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/searchable`.
            public var searchable: Components.Schemas.FieldReferenceData.searchablePayload?
            /// The data types of items in the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/types`.
            public var types: [Swift.String]?
            /// The field identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldReferenceData/value`.
            public var value: Swift.String?
            /// Creates a new `FieldReferenceData`.
            ///
            /// - Parameters:
            ///   - auto: Whether the field provide auto-complete suggestions.
            ///   - cfid: If the item is a custom field, the ID of the custom field.
            ///   - deprecated: Whether this field has been deprecated.
            ///   - deprecatedSearcherKey: The searcher key of the field, only passed when the field is deprecated.
            ///   - displayName: The display name contains the following:
            ///   - operators: The valid search operators for the field.
            ///   - orderable: Whether the field can be used in a query's `ORDER BY` clause.
            ///   - searchable: Whether the content of this field can be searched.
            ///   - types: The data types of items in the field.
            ///   - value: The field identifier.
            public init(
                auto: Components.Schemas.FieldReferenceData.autoPayload? = nil,
                cfid: Swift.String? = nil,
                deprecated: Components.Schemas.FieldReferenceData.deprecatedPayload? = nil,
                deprecatedSearcherKey: Swift.String? = nil,
                displayName: Swift.String? = nil,
                operators: [Swift.String]? = nil,
                orderable: Components.Schemas.FieldReferenceData.orderablePayload? = nil,
                searchable: Components.Schemas.FieldReferenceData.searchablePayload? = nil,
                types: [Swift.String]? = nil,
                value: Swift.String? = nil
            ) {
                self.auto = auto
                self.cfid = cfid
                self.deprecated = deprecated
                self.deprecatedSearcherKey = deprecatedSearcherKey
                self.displayName = displayName
                self.operators = operators
                self.orderable = orderable
                self.searchable = searchable
                self.types = types
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case auto
                case cfid
                case deprecated
                case deprecatedSearcherKey
                case displayName
                case operators
                case orderable
                case searchable
                case types
                case value
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                auto = try container.decodeIfPresent(
                    Components.Schemas.FieldReferenceData.autoPayload.self,
                    forKey: .auto
                )
                cfid = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cfid
                )
                deprecated = try container.decodeIfPresent(
                    Components.Schemas.FieldReferenceData.deprecatedPayload.self,
                    forKey: .deprecated
                )
                deprecatedSearcherKey = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .deprecatedSearcherKey
                )
                displayName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .displayName
                )
                operators = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .operators
                )
                orderable = try container.decodeIfPresent(
                    Components.Schemas.FieldReferenceData.orderablePayload.self,
                    forKey: .orderable
                )
                searchable = try container.decodeIfPresent(
                    Components.Schemas.FieldReferenceData.searchablePayload.self,
                    forKey: .searchable
                )
                types = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .types
                )
                value = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .value
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "auto",
                    "cfid",
                    "deprecated",
                    "deprecatedSearcherKey",
                    "displayName",
                    "operators",
                    "orderable",
                    "searchable",
                    "types",
                    "value"
                ])
            }
        }
        /// Details of an operation to perform on a field.
        ///
        /// - Remark: Generated from `#/components/schemas/FieldUpdateOperation`.
        public struct FieldUpdateOperation: Codable, Hashable, Sendable {
            /// The value to add to the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldUpdateOperation/add`.
            public var add: OpenAPIRuntime.OpenAPIValueContainer?
            /// The field value to copy from another issue.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldUpdateOperation/copy`.
            public var copy: OpenAPIRuntime.OpenAPIValueContainer?
            /// The value to edit in the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldUpdateOperation/edit`.
            public var edit: OpenAPIRuntime.OpenAPIValueContainer?
            /// The value to removed from the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldUpdateOperation/remove`.
            public var remove: OpenAPIRuntime.OpenAPIValueContainer?
            /// The value to set in the field.
            ///
            /// - Remark: Generated from `#/components/schemas/FieldUpdateOperation/set`.
            public var set: OpenAPIRuntime.OpenAPIValueContainer?
            /// Creates a new `FieldUpdateOperation`.
            ///
            /// - Parameters:
            ///   - add: The value to add to the field.
            ///   - copy: The field value to copy from another issue.
            ///   - edit: The value to edit in the field.
            ///   - remove: The value to removed from the field.
            ///   - set: The value to set in the field.
            public init(
                add: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                copy: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                edit: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                remove: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                set: OpenAPIRuntime.OpenAPIValueContainer? = nil
            ) {
                self.add = add
                self.copy = copy
                self.edit = edit
                self.remove = remove
                self.set = set
            }
            public enum CodingKeys: String, CodingKey {
                case add
                case copy
                case edit
                case remove
                case set
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                add = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIValueContainer.self,
                    forKey: .add
                )
                copy = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIValueContainer.self,
                    forKey: .copy
                )
                edit = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIValueContainer.self,
                    forKey: .edit
                )
                remove = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIValueContainer.self,
                    forKey: .remove
                )
                set = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIValueContainer.self,
                    forKey: .set
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "add",
                    "copy",
                    "edit",
                    "remove",
                    "set"
                ])
            }
        }
        /// Details of functions that can be used in advanced searches.
        ///
        /// - Remark: Generated from `#/components/schemas/FunctionReferenceData`.
        public struct FunctionReferenceData: Codable, Hashable, Sendable {
            /// The display name of the function.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionReferenceData/displayName`.
            public var displayName: Swift.String?
            /// Whether the function can take a list of arguments.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionReferenceData/isList`.
            @frozen public enum isListPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _true = "true"
                case _false = "false"
            }
            /// Whether the function can take a list of arguments.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionReferenceData/isList`.
            public var isList: Components.Schemas.FunctionReferenceData.isListPayload?
            /// Whether the function supports both single and list value operators.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionReferenceData/supportsListAndSingleValueOperators`.
            @frozen public enum supportsListAndSingleValueOperatorsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _true = "true"
                case _false = "false"
            }
            /// Whether the function supports both single and list value operators.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionReferenceData/supportsListAndSingleValueOperators`.
            public var supportsListAndSingleValueOperators: Components.Schemas.FunctionReferenceData.supportsListAndSingleValueOperatorsPayload?
            /// The data types returned by the function.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionReferenceData/types`.
            public var types: [Swift.String]?
            /// The function identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionReferenceData/value`.
            public var value: Swift.String?
            /// Creates a new `FunctionReferenceData`.
            ///
            /// - Parameters:
            ///   - displayName: The display name of the function.
            ///   - isList: Whether the function can take a list of arguments.
            ///   - supportsListAndSingleValueOperators: Whether the function supports both single and list value operators.
            ///   - types: The data types returned by the function.
            ///   - value: The function identifier.
            public init(
                displayName: Swift.String? = nil,
                isList: Components.Schemas.FunctionReferenceData.isListPayload? = nil,
                supportsListAndSingleValueOperators: Components.Schemas.FunctionReferenceData.supportsListAndSingleValueOperatorsPayload? = nil,
                types: [Swift.String]? = nil,
                value: Swift.String? = nil
            ) {
                self.displayName = displayName
                self.isList = isList
                self.supportsListAndSingleValueOperators = supportsListAndSingleValueOperators
                self.types = types
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case displayName
                case isList
                case supportsListAndSingleValueOperators
                case types
                case value
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                displayName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .displayName
                )
                isList = try container.decodeIfPresent(
                    Components.Schemas.FunctionReferenceData.isListPayload.self,
                    forKey: .isList
                )
                supportsListAndSingleValueOperators = try container.decodeIfPresent(
                    Components.Schemas.FunctionReferenceData.supportsListAndSingleValueOperatorsPayload.self,
                    forKey: .supportsListAndSingleValueOperators
                )
                types = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .types
                )
                value = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .value
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "displayName",
                    "isList",
                    "supportsListAndSingleValueOperators",
                    "types",
                    "value"
                ])
            }
        }
        /// Details about a group.
        ///
        /// - Remark: Generated from `#/components/schemas/GroupName`.
        public struct GroupName: Codable, Hashable, Sendable {
            /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
            ///
            /// - Remark: Generated from `#/components/schemas/GroupName/groupId`.
            public var groupId: Swift.String?
            /// The name of group.
            ///
            /// - Remark: Generated from `#/components/schemas/GroupName/name`.
            public var name: Swift.String?
            /// The URL for these group details.
            ///
            /// - Remark: Generated from `#/components/schemas/GroupName/self`.
            public var _self: Swift.String?
            /// Creates a new `GroupName`.
            ///
            /// - Parameters:
            ///   - groupId: The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
            ///   - name: The name of group.
            ///   - _self: The URL for these group details.
            public init(
                groupId: Swift.String? = nil,
                name: Swift.String? = nil,
                _self: Swift.String? = nil
            ) {
                self.groupId = groupId
                self.name = name
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case groupId
                case name
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                groupId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .groupId
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "groupId",
                    "name",
                    "self"
                ])
            }
        }
        /// The project issue type hierarchy.
        ///
        /// - Remark: Generated from `#/components/schemas/Hierarchy`.
        public struct Hierarchy: Codable, Hashable, Sendable {
            /// The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///
            /// - Remark: Generated from `#/components/schemas/Hierarchy/baseLevelId`.
            public var baseLevelId: Swift.Int64?
            /// Details about the hierarchy level.
            ///
            /// - Remark: Generated from `#/components/schemas/Hierarchy/levels`.
            public var levels: [Components.Schemas.SimplifiedHierarchyLevel]?
            /// Creates a new `Hierarchy`.
            ///
            /// - Parameters:
            ///   - baseLevelId: The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///   - levels: Details about the hierarchy level.
            public init(
                baseLevelId: Swift.Int64? = nil,
                levels: [Components.Schemas.SimplifiedHierarchyLevel]? = nil
            ) {
                self.baseLevelId = baseLevelId
                self.levels = levels
            }
            public enum CodingKeys: String, CodingKey {
                case baseLevelId
                case levels
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                baseLevelId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .baseLevelId
                )
                levels = try container.decodeIfPresent(
                    [Components.Schemas.SimplifiedHierarchyLevel].self,
                    forKey: .levels
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "baseLevelId",
                    "levels"
                ])
            }
        }
        /// Details of issue history metadata.
        ///
        /// - Remark: Generated from `#/components/schemas/HistoryMetadata`.
        public struct HistoryMetadata: Codable, Hashable, Sendable {
            /// The activity described in the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/activityDescription`.
            public var activityDescription: Swift.String?
            /// The key of the activity described in the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/activityDescriptionKey`.
            public var activityDescriptionKey: Swift.String?
            /// Details of the user whose action created the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/actor`.
            public struct actorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HistoryMetadata/actor/value1`.
                public var value1: Components.Schemas.HistoryMetadataParticipant
                /// Creates a new `actorPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.HistoryMetadataParticipant) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Details of the user whose action created the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/actor`.
            public var actor: Components.Schemas.HistoryMetadata.actorPayload?
            /// Details of the cause that triggered the creation the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/cause`.
            public struct causePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HistoryMetadata/cause/value1`.
                public var value1: Components.Schemas.HistoryMetadataParticipant
                /// Creates a new `causePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.HistoryMetadataParticipant) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Details of the cause that triggered the creation the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/cause`.
            public var cause: Components.Schemas.HistoryMetadata.causePayload?
            /// The description of the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/description`.
            public var description: Swift.String?
            /// The description key of the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/descriptionKey`.
            public var descriptionKey: Swift.String?
            /// The description of the email address associated the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/emailDescription`.
            public var emailDescription: Swift.String?
            /// The description key of the email address associated the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/emailDescriptionKey`.
            public var emailDescriptionKey: Swift.String?
            /// Additional arbitrary information about the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/extraData`.
            public struct extraDataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `extraDataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Additional arbitrary information about the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/extraData`.
            public var extraData: Components.Schemas.HistoryMetadata.extraDataPayload?
            /// Details of the system that generated the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/generator`.
            public struct generatorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HistoryMetadata/generator/value1`.
                public var value1: Components.Schemas.HistoryMetadataParticipant
                /// Creates a new `generatorPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.HistoryMetadataParticipant) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Details of the system that generated the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/generator`.
            public var generator: Components.Schemas.HistoryMetadata.generatorPayload?
            /// The type of the history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadata/type`.
            public var _type: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `HistoryMetadata`.
            ///
            /// - Parameters:
            ///   - activityDescription: The activity described in the history record.
            ///   - activityDescriptionKey: The key of the activity described in the history record.
            ///   - actor: Details of the user whose action created the history record.
            ///   - cause: Details of the cause that triggered the creation the history record.
            ///   - description: The description of the history record.
            ///   - descriptionKey: The description key of the history record.
            ///   - emailDescription: The description of the email address associated the history record.
            ///   - emailDescriptionKey: The description key of the email address associated the history record.
            ///   - extraData: Additional arbitrary information about the history record.
            ///   - generator: Details of the system that generated the history record.
            ///   - _type: The type of the history record.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                activityDescription: Swift.String? = nil,
                activityDescriptionKey: Swift.String? = nil,
                actor: Components.Schemas.HistoryMetadata.actorPayload? = nil,
                cause: Components.Schemas.HistoryMetadata.causePayload? = nil,
                description: Swift.String? = nil,
                descriptionKey: Swift.String? = nil,
                emailDescription: Swift.String? = nil,
                emailDescriptionKey: Swift.String? = nil,
                extraData: Components.Schemas.HistoryMetadata.extraDataPayload? = nil,
                generator: Components.Schemas.HistoryMetadata.generatorPayload? = nil,
                _type: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.activityDescription = activityDescription
                self.activityDescriptionKey = activityDescriptionKey
                self.actor = actor
                self.cause = cause
                self.description = description
                self.descriptionKey = descriptionKey
                self.emailDescription = emailDescription
                self.emailDescriptionKey = emailDescriptionKey
                self.extraData = extraData
                self.generator = generator
                self._type = _type
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case activityDescription
                case activityDescriptionKey
                case actor
                case cause
                case description
                case descriptionKey
                case emailDescription
                case emailDescriptionKey
                case extraData
                case generator
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                activityDescription = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .activityDescription
                )
                activityDescriptionKey = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .activityDescriptionKey
                )
                actor = try container.decodeIfPresent(
                    Components.Schemas.HistoryMetadata.actorPayload.self,
                    forKey: .actor
                )
                cause = try container.decodeIfPresent(
                    Components.Schemas.HistoryMetadata.causePayload.self,
                    forKey: .cause
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                descriptionKey = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .descriptionKey
                )
                emailDescription = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .emailDescription
                )
                emailDescriptionKey = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .emailDescriptionKey
                )
                extraData = try container.decodeIfPresent(
                    Components.Schemas.HistoryMetadata.extraDataPayload.self,
                    forKey: .extraData
                )
                generator = try container.decodeIfPresent(
                    Components.Schemas.HistoryMetadata.generatorPayload.self,
                    forKey: .generator
                )
                _type = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._type
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "activityDescription",
                    "activityDescriptionKey",
                    "actor",
                    "cause",
                    "description",
                    "descriptionKey",
                    "emailDescription",
                    "emailDescriptionKey",
                    "extraData",
                    "generator",
                    "type"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    activityDescription,
                    forKey: .activityDescription
                )
                try container.encodeIfPresent(
                    activityDescriptionKey,
                    forKey: .activityDescriptionKey
                )
                try container.encodeIfPresent(
                    actor,
                    forKey: .actor
                )
                try container.encodeIfPresent(
                    cause,
                    forKey: .cause
                )
                try container.encodeIfPresent(
                    description,
                    forKey: .description
                )
                try container.encodeIfPresent(
                    descriptionKey,
                    forKey: .descriptionKey
                )
                try container.encodeIfPresent(
                    emailDescription,
                    forKey: .emailDescription
                )
                try container.encodeIfPresent(
                    emailDescriptionKey,
                    forKey: .emailDescriptionKey
                )
                try container.encodeIfPresent(
                    extraData,
                    forKey: .extraData
                )
                try container.encodeIfPresent(
                    generator,
                    forKey: .generator
                )
                try container.encodeIfPresent(
                    _type,
                    forKey: ._type
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Details of user or system associated with a issue history metadata item.
        ///
        /// - Remark: Generated from `#/components/schemas/HistoryMetadataParticipant`.
        public struct HistoryMetadataParticipant: Codable, Hashable, Sendable {
            /// The URL to an avatar for the user or system associated with a history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadataParticipant/avatarUrl`.
            public var avatarUrl: Swift.String?
            /// The display name of the user or system associated with a history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadataParticipant/displayName`.
            public var displayName: Swift.String?
            /// The key of the display name of the user or system associated with a history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadataParticipant/displayNameKey`.
            public var displayNameKey: Swift.String?
            /// The ID of the user or system associated with a history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadataParticipant/id`.
            public var id: Swift.String?
            /// The type of the user or system associated with a history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadataParticipant/type`.
            public var _type: Swift.String?
            /// The URL of the user or system associated with a history record.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryMetadataParticipant/url`.
            public var url: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `HistoryMetadataParticipant`.
            ///
            /// - Parameters:
            ///   - avatarUrl: The URL to an avatar for the user or system associated with a history record.
            ///   - displayName: The display name of the user or system associated with a history record.
            ///   - displayNameKey: The key of the display name of the user or system associated with a history record.
            ///   - id: The ID of the user or system associated with a history record.
            ///   - _type: The type of the user or system associated with a history record.
            ///   - url: The URL of the user or system associated with a history record.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                avatarUrl: Swift.String? = nil,
                displayName: Swift.String? = nil,
                displayNameKey: Swift.String? = nil,
                id: Swift.String? = nil,
                _type: Swift.String? = nil,
                url: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.avatarUrl = avatarUrl
                self.displayName = displayName
                self.displayNameKey = displayNameKey
                self.id = id
                self._type = _type
                self.url = url
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case avatarUrl
                case displayName
                case displayNameKey
                case id
                case _type = "type"
                case url
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                avatarUrl = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .avatarUrl
                )
                displayName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .displayName
                )
                displayNameKey = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .displayNameKey
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                _type = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._type
                )
                url = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .url
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "avatarUrl",
                    "displayName",
                    "displayNameKey",
                    "id",
                    "type",
                    "url"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    avatarUrl,
                    forKey: .avatarUrl
                )
                try container.encodeIfPresent(
                    displayName,
                    forKey: .displayName
                )
                try container.encodeIfPresent(
                    displayNameKey,
                    forKey: .displayNameKey
                )
                try container.encodeIfPresent(
                    id,
                    forKey: .id
                )
                try container.encodeIfPresent(
                    _type,
                    forKey: ._type
                )
                try container.encodeIfPresent(
                    url,
                    forKey: .url
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/IssueBulkEditField`.
        public struct IssueBulkEditField: Codable, Hashable, Sendable {
            /// Description of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/description`.
            public var description: Swift.String?
            /// A list of options related to the field, applicable in contexts where multiple selections are allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/fieldOptions`.
            public var fieldOptions: [Components.Schemas.IssueBulkOperationsFieldOption]?
            /// The unique ID of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/id`.
            public var id: Swift.String?
            /// Indicates whether the field is mandatory for the operation.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/isRequired`.
            public var isRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/multiSelectFieldOptionsPayload`.
            @frozen public enum multiSelectFieldOptionsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ADD = "ADD"
                case REMOVE = "REMOVE"
                case REPLACE = "REPLACE"
                case REMOVE_ALL = "REMOVE_ALL"
            }
            /// Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/multiSelectFieldOptions`.
            public typealias multiSelectFieldOptionsPayload = [Components.Schemas.IssueBulkEditField.multiSelectFieldOptionsPayloadPayload]
            /// Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/multiSelectFieldOptions`.
            public var multiSelectFieldOptions: Components.Schemas.IssueBulkEditField.multiSelectFieldOptionsPayload?
            /// The display name of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/name`.
            public var name: Swift.String?
            /// A URL to fetch additional data for the field
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/searchUrl`.
            public var searchUrl: Swift.String?
            /// The type of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/type`.
            public var _type: Swift.String?
            /// A message indicating why the field is unavailable for editing.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditField/unavailableMessage`.
            public var unavailableMessage: Swift.String?
            /// Creates a new `IssueBulkEditField`.
            ///
            /// - Parameters:
            ///   - description: Description of the field.
            ///   - fieldOptions: A list of options related to the field, applicable in contexts where multiple selections are allowed.
            ///   - id: The unique ID of the field.
            ///   - isRequired: Indicates whether the field is mandatory for the operation.
            ///   - multiSelectFieldOptions: Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.
            ///   - name: The display name of the field.
            ///   - searchUrl: A URL to fetch additional data for the field
            ///   - _type: The type of the field.
            ///   - unavailableMessage: A message indicating why the field is unavailable for editing.
            public init(
                description: Swift.String? = nil,
                fieldOptions: [Components.Schemas.IssueBulkOperationsFieldOption]? = nil,
                id: Swift.String? = nil,
                isRequired: Swift.Bool? = nil,
                multiSelectFieldOptions: Components.Schemas.IssueBulkEditField.multiSelectFieldOptionsPayload? = nil,
                name: Swift.String? = nil,
                searchUrl: Swift.String? = nil,
                _type: Swift.String? = nil,
                unavailableMessage: Swift.String? = nil
            ) {
                self.description = description
                self.fieldOptions = fieldOptions
                self.id = id
                self.isRequired = isRequired
                self.multiSelectFieldOptions = multiSelectFieldOptions
                self.name = name
                self.searchUrl = searchUrl
                self._type = _type
                self.unavailableMessage = unavailableMessage
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case fieldOptions
                case id
                case isRequired
                case multiSelectFieldOptions
                case name
                case searchUrl
                case _type = "type"
                case unavailableMessage
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                fieldOptions = try container.decodeIfPresent(
                    [Components.Schemas.IssueBulkOperationsFieldOption].self,
                    forKey: .fieldOptions
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                isRequired = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isRequired
                )
                multiSelectFieldOptions = try container.decodeIfPresent(
                    Components.Schemas.IssueBulkEditField.multiSelectFieldOptionsPayload.self,
                    forKey: .multiSelectFieldOptions
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                searchUrl = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .searchUrl
                )
                _type = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._type
                )
                unavailableMessage = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .unavailableMessage
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "description",
                    "fieldOptions",
                    "id",
                    "isRequired",
                    "multiSelectFieldOptions",
                    "name",
                    "searchUrl",
                    "type",
                    "unavailableMessage"
                ])
            }
        }
        /// Issue Bulk Edit Payload
        ///
        /// - Remark: Generated from `#/components/schemas/IssueBulkEditPayload`.
        public struct IssueBulkEditPayload: Codable, Hashable, Sendable {
            /// An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditPayload/editedFieldsInput`.
            public struct editedFieldsInputPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/IssueBulkEditPayload/editedFieldsInput/value1`.
                public var value1: Components.Schemas.JiraIssueFields
                /// Creates a new `editedFieldsInputPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JiraIssueFields) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditPayload/editedFieldsInput`.
            public var editedFieldsInput: Components.Schemas.IssueBulkEditPayload.editedFieldsInputPayload
            /// List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself).
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditPayload/selectedActions`.
            public var selectedActions: [Swift.String]
            /// List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditPayload/selectedIssueIdsOrKeys`.
            public var selectedIssueIdsOrKeys: [Swift.String]
            /// A boolean value that indicates whether to send a bulk change notification when the issues are being edited.
            ///
            /// If `true`, dispatches a bulk notification email to users about the updates.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueBulkEditPayload/sendBulkNotification`.
            public var sendBulkNotification: Swift.Bool?
            /// Creates a new `IssueBulkEditPayload`.
            ///
            /// - Parameters:
            ///   - editedFieldsInput: An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions.
            ///   - selectedActions: List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself).
            ///   - selectedIssueIdsOrKeys: List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types.
            ///   - sendBulkNotification: A boolean value that indicates whether to send a bulk change notification when the issues are being edited.
            public init(
                editedFieldsInput: Components.Schemas.IssueBulkEditPayload.editedFieldsInputPayload,
                selectedActions: [Swift.String],
                selectedIssueIdsOrKeys: [Swift.String],
                sendBulkNotification: Swift.Bool? = nil
            ) {
                self.editedFieldsInput = editedFieldsInput
                self.selectedActions = selectedActions
                self.selectedIssueIdsOrKeys = selectedIssueIdsOrKeys
                self.sendBulkNotification = sendBulkNotification
            }
            public enum CodingKeys: String, CodingKey {
                case editedFieldsInput
                case selectedActions
                case selectedIssueIdsOrKeys
                case sendBulkNotification
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                editedFieldsInput = try container.decode(
                    Components.Schemas.IssueBulkEditPayload.editedFieldsInputPayload.self,
                    forKey: .editedFieldsInput
                )
                selectedActions = try container.decode(
                    [Swift.String].self,
                    forKey: .selectedActions
                )
                selectedIssueIdsOrKeys = try container.decode(
                    [Swift.String].self,
                    forKey: .selectedIssueIdsOrKeys
                )
                sendBulkNotification = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .sendBulkNotification
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "editedFieldsInput",
                    "selectedActions",
                    "selectedIssueIdsOrKeys",
                    "sendBulkNotification"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/IssueBulkOperationsFieldOption`.
        public struct IssueBulkOperationsFieldOption: Codable, Hashable, Sendable {
            /// Creates a new `IssueBulkOperationsFieldOption`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// Details of an issue transition.
        ///
        /// - Remark: Generated from `#/components/schemas/IssueTransition`.
        public struct IssueTransition: Codable, Hashable, Sendable {
            /// Expand options that include additional transition details in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/expand`.
            public var expand: Swift.String?
            /// Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/fields`.
            public struct fieldsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.FieldMetadata]
                /// Creates a new `fieldsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.FieldMetadata] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/fields`.
            public var fields: Components.Schemas.IssueTransition.fieldsPayload?
            /// Whether there is a screen associated with the issue transition.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/hasScreen`.
            public var hasScreen: Swift.Bool?
            /// The ID of the issue transition. Required when specifying a transition to undertake.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/id`.
            public var id: Swift.String?
            /// Whether the transition is available to be performed.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/isAvailable`.
            public var isAvailable: Swift.Bool?
            /// Whether the issue has to meet criteria before the issue transition is applied.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/isConditional`.
            public var isConditional: Swift.Bool?
            /// Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/isGlobal`.
            public var isGlobal: Swift.Bool?
            /// Whether this is the initial issue transition for the workflow.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/isInitial`.
            public var isInitial: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IssueTransition/looped`.
            public var looped: Swift.Bool?
            /// The name of the issue transition.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/name`.
            public var name: Swift.String?
            /// Details of the issue status after the transition.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/to`.
            public struct toPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/IssueTransition/to/value1`.
                public var value1: Components.Schemas.StatusDetails
                /// Creates a new `toPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.StatusDetails) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Details of the issue status after the transition.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTransition/to`.
            public var to: Components.Schemas.IssueTransition.toPayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `IssueTransition`.
            ///
            /// - Parameters:
            ///   - expand: Expand options that include additional transition details in the response.
            ///   - fields: Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
            ///   - hasScreen: Whether there is a screen associated with the issue transition.
            ///   - id: The ID of the issue transition. Required when specifying a transition to undertake.
            ///   - isAvailable: Whether the transition is available to be performed.
            ///   - isConditional: Whether the issue has to meet criteria before the issue transition is applied.
            ///   - isGlobal: Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
            ///   - isInitial: Whether this is the initial issue transition for the workflow.
            ///   - looped:
            ///   - name: The name of the issue transition.
            ///   - to: Details of the issue status after the transition.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                expand: Swift.String? = nil,
                fields: Components.Schemas.IssueTransition.fieldsPayload? = nil,
                hasScreen: Swift.Bool? = nil,
                id: Swift.String? = nil,
                isAvailable: Swift.Bool? = nil,
                isConditional: Swift.Bool? = nil,
                isGlobal: Swift.Bool? = nil,
                isInitial: Swift.Bool? = nil,
                looped: Swift.Bool? = nil,
                name: Swift.String? = nil,
                to: Components.Schemas.IssueTransition.toPayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.expand = expand
                self.fields = fields
                self.hasScreen = hasScreen
                self.id = id
                self.isAvailable = isAvailable
                self.isConditional = isConditional
                self.isGlobal = isGlobal
                self.isInitial = isInitial
                self.looped = looped
                self.name = name
                self.to = to
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case expand
                case fields
                case hasScreen
                case id
                case isAvailable
                case isConditional
                case isGlobal
                case isInitial
                case looped
                case name
                case to
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                expand = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .expand
                )
                fields = try container.decodeIfPresent(
                    Components.Schemas.IssueTransition.fieldsPayload.self,
                    forKey: .fields
                )
                hasScreen = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .hasScreen
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                isAvailable = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isAvailable
                )
                isConditional = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isConditional
                )
                isGlobal = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isGlobal
                )
                isInitial = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isInitial
                )
                looped = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .looped
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                to = try container.decodeIfPresent(
                    Components.Schemas.IssueTransition.toPayload.self,
                    forKey: .to
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "expand",
                    "fields",
                    "hasScreen",
                    "id",
                    "isAvailable",
                    "isConditional",
                    "isGlobal",
                    "isInitial",
                    "looped",
                    "name",
                    "to"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    expand,
                    forKey: .expand
                )
                try container.encodeIfPresent(
                    fields,
                    forKey: .fields
                )
                try container.encodeIfPresent(
                    hasScreen,
                    forKey: .hasScreen
                )
                try container.encodeIfPresent(
                    id,
                    forKey: .id
                )
                try container.encodeIfPresent(
                    isAvailable,
                    forKey: .isAvailable
                )
                try container.encodeIfPresent(
                    isConditional,
                    forKey: .isConditional
                )
                try container.encodeIfPresent(
                    isGlobal,
                    forKey: .isGlobal
                )
                try container.encodeIfPresent(
                    isInitial,
                    forKey: .isInitial
                )
                try container.encodeIfPresent(
                    looped,
                    forKey: .looped
                )
                try container.encodeIfPresent(
                    name,
                    forKey: .name
                )
                try container.encodeIfPresent(
                    to,
                    forKey: .to
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Details about an issue type.
        ///
        /// - Remark: Generated from `#/components/schemas/IssueTypeDetails`.
        public struct IssueTypeDetails: Codable, Hashable, Sendable {
            /// The ID of the issue type's avatar.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/avatarId`.
            public var avatarId: Swift.Int64?
            /// The description of the issue type.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/description`.
            public var description: Swift.String?
            /// Unique ID for next-gen projects.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/entityId`.
            public var entityId: Swift.String?
            /// Hierarchy level of the issue type.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/hierarchyLevel`.
            public var hierarchyLevel: Swift.Int32?
            /// The URL of the issue type's avatar.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/iconUrl`.
            public var iconUrl: Swift.String?
            /// The ID of the issue type.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/id`.
            public var id: Swift.String?
            /// The name of the issue type.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/name`.
            public var name: Swift.String?
            /// Details of the next-gen projects the issue type is available in.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/scope`.
            public struct scopePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/scope/value1`.
                public var value1: Components.Schemas.Scope
                /// Creates a new `scopePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Scope) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Details of the next-gen projects the issue type is available in.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/scope`.
            public var scope: Components.Schemas.IssueTypeDetails.scopePayload?
            /// The URL of these issue type details.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/self`.
            public var _self: Swift.String?
            /// Whether this issue type is used to create subtasks.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueTypeDetails/subtask`.
            public var subtask: Swift.Bool?
            /// Creates a new `IssueTypeDetails`.
            ///
            /// - Parameters:
            ///   - avatarId: The ID of the issue type's avatar.
            ///   - description: The description of the issue type.
            ///   - entityId: Unique ID for next-gen projects.
            ///   - hierarchyLevel: Hierarchy level of the issue type.
            ///   - iconUrl: The URL of the issue type's avatar.
            ///   - id: The ID of the issue type.
            ///   - name: The name of the issue type.
            ///   - scope: Details of the next-gen projects the issue type is available in.
            ///   - _self: The URL of these issue type details.
            ///   - subtask: Whether this issue type is used to create subtasks.
            public init(
                avatarId: Swift.Int64? = nil,
                description: Swift.String? = nil,
                entityId: Swift.String? = nil,
                hierarchyLevel: Swift.Int32? = nil,
                iconUrl: Swift.String? = nil,
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                scope: Components.Schemas.IssueTypeDetails.scopePayload? = nil,
                _self: Swift.String? = nil,
                subtask: Swift.Bool? = nil
            ) {
                self.avatarId = avatarId
                self.description = description
                self.entityId = entityId
                self.hierarchyLevel = hierarchyLevel
                self.iconUrl = iconUrl
                self.id = id
                self.name = name
                self.scope = scope
                self._self = _self
                self.subtask = subtask
            }
            public enum CodingKeys: String, CodingKey {
                case avatarId
                case description
                case entityId
                case hierarchyLevel
                case iconUrl
                case id
                case name
                case scope
                case _self = "self"
                case subtask
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                avatarId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .avatarId
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                entityId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .entityId
                )
                hierarchyLevel = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .hierarchyLevel
                )
                iconUrl = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .iconUrl
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                scope = try container.decodeIfPresent(
                    Components.Schemas.IssueTypeDetails.scopePayload.self,
                    forKey: .scope
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                subtask = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .subtask
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "avatarId",
                    "description",
                    "entityId",
                    "hierarchyLevel",
                    "iconUrl",
                    "id",
                    "name",
                    "scope",
                    "self",
                    "subtask"
                ])
            }
        }
        /// Details of an issue update request.
        ///
        /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails`.
        public struct IssueUpdateDetails: Codable, Hashable, Sendable {
            /// List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/fields`.
            public struct fieldsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `fieldsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/fields`.
            public var fields: Components.Schemas.IssueUpdateDetails.fieldsPayload?
            /// Additional issue history details.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/historyMetadata`.
            public struct historyMetadataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/historyMetadata/value1`.
                public var value1: Components.Schemas.HistoryMetadata
                /// Creates a new `historyMetadataPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.HistoryMetadata) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Additional issue history details.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/historyMetadata`.
            public var historyMetadata: Components.Schemas.IssueUpdateDetails.historyMetadataPayload?
            /// Details of issue properties to be add or update.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/properties`.
            public var properties: [Components.Schemas.EntityProperty]?
            /// Details of a transition. Required when performing a transition, optional when creating or editing an issue.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/transition`.
            public struct transitionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/transition/value1`.
                public var value1: Components.Schemas.IssueTransition
                /// Creates a new `transitionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.IssueTransition) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Details of a transition. Required when performing a transition, optional when creating or editing an issue.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/transition`.
            public var transition: Components.Schemas.IssueUpdateDetails.transitionPayload?
            /// A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/update`.
            public struct updatePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: [Components.Schemas.FieldUpdateOperation]]
                /// Creates a new `updatePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: [Components.Schemas.FieldUpdateOperation]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
            ///
            /// - Remark: Generated from `#/components/schemas/IssueUpdateDetails/update`.
            public var update: Components.Schemas.IssueUpdateDetails.updatePayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `IssueUpdateDetails`.
            ///
            /// - Parameters:
            ///   - fields: List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
            ///   - historyMetadata: Additional issue history details.
            ///   - properties: Details of issue properties to be add or update.
            ///   - transition: Details of a transition. Required when performing a transition, optional when creating or editing an issue.
            ///   - update: A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                fields: Components.Schemas.IssueUpdateDetails.fieldsPayload? = nil,
                historyMetadata: Components.Schemas.IssueUpdateDetails.historyMetadataPayload? = nil,
                properties: [Components.Schemas.EntityProperty]? = nil,
                transition: Components.Schemas.IssueUpdateDetails.transitionPayload? = nil,
                update: Components.Schemas.IssueUpdateDetails.updatePayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.fields = fields
                self.historyMetadata = historyMetadata
                self.properties = properties
                self.transition = transition
                self.update = update
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case historyMetadata
                case properties
                case transition
                case update
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fields = try container.decodeIfPresent(
                    Components.Schemas.IssueUpdateDetails.fieldsPayload.self,
                    forKey: .fields
                )
                historyMetadata = try container.decodeIfPresent(
                    Components.Schemas.IssueUpdateDetails.historyMetadataPayload.self,
                    forKey: .historyMetadata
                )
                properties = try container.decodeIfPresent(
                    [Components.Schemas.EntityProperty].self,
                    forKey: .properties
                )
                transition = try container.decodeIfPresent(
                    Components.Schemas.IssueUpdateDetails.transitionPayload.self,
                    forKey: .transition
                )
                update = try container.decodeIfPresent(
                    Components.Schemas.IssueUpdateDetails.updatePayload.self,
                    forKey: .update
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "fields",
                    "historyMetadata",
                    "properties",
                    "transition",
                    "update"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    fields,
                    forKey: .fields
                )
                try container.encodeIfPresent(
                    historyMetadata,
                    forKey: .historyMetadata
                )
                try container.encodeIfPresent(
                    properties,
                    forKey: .properties
                )
                try container.encodeIfPresent(
                    transition,
                    forKey: .transition
                )
                try container.encodeIfPresent(
                    update,
                    forKey: .update
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Lists of JQL reference data.
        ///
        /// - Remark: Generated from `#/components/schemas/JQLReferenceData`.
        public struct JQLReferenceData: Codable, Hashable, Sendable {
            /// List of JQL query reserved words.
            ///
            /// - Remark: Generated from `#/components/schemas/JQLReferenceData/jqlReservedWords`.
            public var jqlReservedWords: [Swift.String]?
            /// List of fields usable in JQL queries.
            ///
            /// - Remark: Generated from `#/components/schemas/JQLReferenceData/visibleFieldNames`.
            public var visibleFieldNames: [Components.Schemas.FieldReferenceData]?
            /// List of functions usable in JQL queries.
            ///
            /// - Remark: Generated from `#/components/schemas/JQLReferenceData/visibleFunctionNames`.
            public var visibleFunctionNames: [Components.Schemas.FunctionReferenceData]?
            /// Creates a new `JQLReferenceData`.
            ///
            /// - Parameters:
            ///   - jqlReservedWords: List of JQL query reserved words.
            ///   - visibleFieldNames: List of fields usable in JQL queries.
            ///   - visibleFunctionNames: List of functions usable in JQL queries.
            public init(
                jqlReservedWords: [Swift.String]? = nil,
                visibleFieldNames: [Components.Schemas.FieldReferenceData]? = nil,
                visibleFunctionNames: [Components.Schemas.FunctionReferenceData]? = nil
            ) {
                self.jqlReservedWords = jqlReservedWords
                self.visibleFieldNames = visibleFieldNames
                self.visibleFunctionNames = visibleFunctionNames
            }
            public enum CodingKeys: String, CodingKey {
                case jqlReservedWords
                case visibleFieldNames
                case visibleFunctionNames
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                jqlReservedWords = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .jqlReservedWords
                )
                visibleFieldNames = try container.decodeIfPresent(
                    [Components.Schemas.FieldReferenceData].self,
                    forKey: .visibleFieldNames
                )
                visibleFunctionNames = try container.decodeIfPresent(
                    [Components.Schemas.FunctionReferenceData].self,
                    forKey: .visibleFunctionNames
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "jqlReservedWords",
                    "visibleFieldNames",
                    "visibleFunctionNames"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraCascadingSelectField`.
        public struct JiraCascadingSelectField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraCascadingSelectField/childOptionValue`.
            public var childOptionValue: Components.Schemas.JiraSelectedOptionField?
            /// - Remark: Generated from `#/components/schemas/JiraCascadingSelectField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraCascadingSelectField/parentOptionValue`.
            public var parentOptionValue: Components.Schemas.JiraSelectedOptionField
            /// Creates a new `JiraCascadingSelectField`.
            ///
            /// - Parameters:
            ///   - childOptionValue:
            ///   - fieldId:
            ///   - parentOptionValue:
            public init(
                childOptionValue: Components.Schemas.JiraSelectedOptionField? = nil,
                fieldId: Swift.String,
                parentOptionValue: Components.Schemas.JiraSelectedOptionField
            ) {
                self.childOptionValue = childOptionValue
                self.fieldId = fieldId
                self.parentOptionValue = parentOptionValue
            }
            public enum CodingKeys: String, CodingKey {
                case childOptionValue
                case fieldId
                case parentOptionValue
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                childOptionValue = try container.decodeIfPresent(
                    Components.Schemas.JiraSelectedOptionField.self,
                    forKey: .childOptionValue
                )
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                parentOptionValue = try container.decode(
                    Components.Schemas.JiraSelectedOptionField.self,
                    forKey: .parentOptionValue
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "childOptionValue",
                    "fieldId",
                    "parentOptionValue"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraColorField`.
        public struct JiraColorField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraColorField/color`.
            public var color: Components.Schemas.JiraColorInput
            /// - Remark: Generated from `#/components/schemas/JiraColorField/fieldId`.
            public var fieldId: Swift.String
            /// Creates a new `JiraColorField`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - fieldId:
            public init(
                color: Components.Schemas.JiraColorInput,
                fieldId: Swift.String
            ) {
                self.color = color
                self.fieldId = fieldId
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case fieldId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                color = try container.decode(
                    Components.Schemas.JiraColorInput.self,
                    forKey: .color
                )
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "color",
                    "fieldId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraColorInput`.
        public struct JiraColorInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraColorInput/name`.
            public var name: Swift.String
            /// Creates a new `JiraColorInput`.
            ///
            /// - Parameters:
            ///   - name:
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "name"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraComponentField`.
        public struct JiraComponentField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraComponentField/componentId`.
            public var componentId: Swift.Int64
            /// Creates a new `JiraComponentField`.
            ///
            /// - Parameters:
            ///   - componentId:
            public init(componentId: Swift.Int64) {
                self.componentId = componentId
            }
            public enum CodingKeys: String, CodingKey {
                case componentId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                componentId = try container.decode(
                    Swift.Int64.self,
                    forKey: .componentId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "componentId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraDateField`.
        public struct JiraDateField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraDateField/date`.
            public var date: Components.Schemas.JiraDateInput?
            /// - Remark: Generated from `#/components/schemas/JiraDateField/fieldId`.
            public var fieldId: Swift.String
            /// Creates a new `JiraDateField`.
            ///
            /// - Parameters:
            ///   - date:
            ///   - fieldId:
            public init(
                date: Components.Schemas.JiraDateInput? = nil,
                fieldId: Swift.String
            ) {
                self.date = date
                self.fieldId = fieldId
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case fieldId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                date = try container.decodeIfPresent(
                    Components.Schemas.JiraDateInput.self,
                    forKey: .date
                )
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "date",
                    "fieldId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraDateInput`.
        public struct JiraDateInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraDateInput/formattedDate`.
            public var formattedDate: Swift.String
            /// Creates a new `JiraDateInput`.
            ///
            /// - Parameters:
            ///   - formattedDate:
            public init(formattedDate: Swift.String) {
                self.formattedDate = formattedDate
            }
            public enum CodingKeys: String, CodingKey {
                case formattedDate
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                formattedDate = try container.decode(
                    Swift.String.self,
                    forKey: .formattedDate
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "formattedDate"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraDateTimeField`.
        public struct JiraDateTimeField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraDateTimeField/dateTime`.
            public var dateTime: Components.Schemas.JiraDateTimeInput
            /// - Remark: Generated from `#/components/schemas/JiraDateTimeField/fieldId`.
            public var fieldId: Swift.String
            /// Creates a new `JiraDateTimeField`.
            ///
            /// - Parameters:
            ///   - dateTime:
            ///   - fieldId:
            public init(
                dateTime: Components.Schemas.JiraDateTimeInput,
                fieldId: Swift.String
            ) {
                self.dateTime = dateTime
                self.fieldId = fieldId
            }
            public enum CodingKeys: String, CodingKey {
                case dateTime
                case fieldId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                dateTime = try container.decode(
                    Components.Schemas.JiraDateTimeInput.self,
                    forKey: .dateTime
                )
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "dateTime",
                    "fieldId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraDateTimeInput`.
        public struct JiraDateTimeInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraDateTimeInput/formattedDateTime`.
            public var formattedDateTime: Swift.String
            /// Creates a new `JiraDateTimeInput`.
            ///
            /// - Parameters:
            ///   - formattedDateTime:
            public init(formattedDateTime: Swift.String) {
                self.formattedDateTime = formattedDateTime
            }
            public enum CodingKeys: String, CodingKey {
                case formattedDateTime
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                formattedDateTime = try container.decode(
                    Swift.String.self,
                    forKey: .formattedDateTime
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "formattedDateTime"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraDurationField`.
        public struct JiraDurationField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraDurationField/originalEstimateField`.
            public var originalEstimateField: Swift.String
            /// Creates a new `JiraDurationField`.
            ///
            /// - Parameters:
            ///   - originalEstimateField:
            public init(originalEstimateField: Swift.String) {
                self.originalEstimateField = originalEstimateField
            }
            public enum CodingKeys: String, CodingKey {
                case originalEstimateField
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                originalEstimateField = try container.decode(
                    Swift.String.self,
                    forKey: .originalEstimateField
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "originalEstimateField"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraGroupInput`.
        public struct JiraGroupInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraGroupInput/groupName`.
            public var groupName: Swift.String
            /// Creates a new `JiraGroupInput`.
            ///
            /// - Parameters:
            ///   - groupName:
            public init(groupName: Swift.String) {
                self.groupName = groupName
            }
            public enum CodingKeys: String, CodingKey {
                case groupName
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                groupName = try container.decode(
                    Swift.String.self,
                    forKey: .groupName
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "groupName"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraIssueFields`.
        public struct JiraIssueFields: Codable, Hashable, Sendable {
            /// Add or clear a cascading select field:
            ///
            ///  *  To add, specify `optionId` for both parent and child.
            ///  *  To clear the child, set its `optionId` to null.
            ///  *  To clear both, set the parent's `optionId` to null.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/cascadingSelectFields`.
            public var cascadingSelectFields: [Components.Schemas.JiraCascadingSelectField]?
            /// Add or clear a number field:
            ///
            ///  *  To add, specify a numeric `value`.
            ///  *  To clear, set `value` to `null`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/clearableNumberFields`.
            public var clearableNumberFields: [Components.Schemas.JiraNumberField]?
            /// Add or clear a color field:
            ///
            ///  *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.
            ///  *  To clear, set the color `name` to an empty string.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/colorFields`.
            public var colorFields: [Components.Schemas.JiraColorField]?
            /// Add or clear a date picker field:
            ///
            ///  *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.
            ///  *  To clear, set `formattedDate` to an empty string.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/datePickerFields`.
            public var datePickerFields: [Components.Schemas.JiraDateField]?
            /// Add or clear the planned start date and time:
            ///
            ///  *  To add, specify the date and time in ISO format for `formattedDateTime`.
            ///  *  To clear, provide an empty string for `formattedDateTime`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/dateTimePickerFields`.
            public var dateTimePickerFields: [Components.Schemas.JiraDateTimeField]?
            /// Set the issue type field by providing an `issueTypeId`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/issueType`.
            public struct issueTypePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JiraIssueFields/issueType/value1`.
                public var value1: Components.Schemas.JiraIssueTypeField
                /// Creates a new `issueTypePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JiraIssueTypeField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Set the issue type field by providing an `issueTypeId`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/issueType`.
            public var issueType: Components.Schemas.JiraIssueFields.issueTypePayload?
            /// Edit a labels field:
            ///
            ///  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
            ///  *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/labelsFields`.
            public var labelsFields: [Components.Schemas.JiraLabelsField]?
            /// Add or clear a multi-group picker field:
            ///
            ///  *  To add groups, provide an array of groups with `groupName`s.
            ///  *  To clear all groups, use an empty `groups` array.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/multipleGroupPickerFields`.
            public var multipleGroupPickerFields: [Components.Schemas.JiraMultipleGroupPickerField]?
            /// Assign or unassign multiple users to/from a field:
            ///
            ///  *  To assign, provide an array of user `accountId`s.
            ///  *  To clear, set `users` to `null`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/multipleSelectClearableUserPickerFields`.
            public var multipleSelectClearableUserPickerFields: [Components.Schemas.JiraMultipleSelectUserPickerField]?
            /// Add or clear a multi-select field:
            ///
            ///  *  To add, provide an array of options with `optionId`s.
            ///  *  To clear, use an empty `options` array.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/multipleSelectFields`.
            public var multipleSelectFields: [Components.Schemas.JiraMultipleSelectField]?
            /// Edit a multi-version picker field like Fix Versions/Affects Versions:
            ///
            ///  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
            ///  *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/multipleVersionPickerFields`.
            public var multipleVersionPickerFields: [Components.Schemas.JiraMultipleVersionPickerField]?
            /// Edit a multi select components field:
            ///
            ///  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
            ///  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/multiselectComponents`.
            public struct multiselectComponentsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JiraIssueFields/multiselectComponents/value1`.
                public var value1: Components.Schemas.JiraMultiSelectComponentField
                /// Creates a new `multiselectComponentsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JiraMultiSelectComponentField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Edit a multi select components field:
            ///
            ///  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
            ///  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/multiselectComponents`.
            public var multiselectComponents: Components.Schemas.JiraIssueFields.multiselectComponentsPayload?
            /// Edit the original estimate field.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/originalEstimateField`.
            public struct originalEstimateFieldPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JiraIssueFields/originalEstimateField/value1`.
                public var value1: Components.Schemas.JiraDurationField
                /// Creates a new `originalEstimateFieldPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JiraDurationField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Edit the original estimate field.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/originalEstimateField`.
            public var originalEstimateField: Components.Schemas.JiraIssueFields.originalEstimateFieldPayload?
            /// Set the priority of an issue by specifying a `priorityId`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/priority`.
            public struct priorityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JiraIssueFields/priority/value1`.
                public var value1: Components.Schemas.JiraPriorityField
                /// Creates a new `priorityPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JiraPriorityField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Set the priority of an issue by specifying a `priorityId`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/priority`.
            public var priority: Components.Schemas.JiraIssueFields.priorityPayload?
            /// Add or clear a rich text field:
            ///
            ///  *  To add, provide `adfValue`. Note that rich text fields only support ADF values.
            ///  *  To clear, use an empty `richText` object.
            ///
            /// For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/richTextFields`.
            public var richTextFields: [Components.Schemas.JiraRichTextField]?
            /// Add or clear a single group picker field:
            ///
            ///  *  To add, specify the group with `groupName`.
            ///  *  To clear, set `groupName` to an empty string.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/singleGroupPickerFields`.
            public var singleGroupPickerFields: [Components.Schemas.JiraSingleGroupPickerField]?
            /// Add or clear a single line text field:
            ///
            ///  *  To add, provide the `text` value.
            ///  *  To clear, set `text` to an empty string.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/singleLineTextFields`.
            public var singleLineTextFields: [Components.Schemas.JiraSingleLineTextField]?
            /// Edit assignment for single select user picker fields like Assignee/Reporter:
            ///
            ///  *  To assign an issue, specify the user's `accountId`.
            ///  *  To unassign an issue, set `user` to `null`.
            ///  *  For automatic assignment, set `accountId` to `-1`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/singleSelectClearableUserPickerFields`.
            public var singleSelectClearableUserPickerFields: [Components.Schemas.JiraSingleSelectUserPickerField]?
            /// Add or clear a single select field:
            ///
            ///  *  To add, specify the option with an `optionId`.
            ///  *  To clear, pass an option with `optionId` as `-1`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/singleSelectFields`.
            public var singleSelectFields: [Components.Schemas.JiraSingleSelectField]?
            /// Add or clear a single version picker field:
            ///
            ///  *  To add, specify the version with a `versionId`.
            ///  *  To clear, set `versionId` to `-1`.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/singleVersionPickerFields`.
            public var singleVersionPickerFields: [Components.Schemas.JiraSingleVersionPickerField]?
            /// Edit the time tracking field.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/timeTrackingField`.
            public struct timeTrackingFieldPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JiraIssueFields/timeTrackingField/value1`.
                public var value1: Components.Schemas.JiraTimeTrackingField
                /// Creates a new `timeTrackingFieldPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JiraTimeTrackingField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Edit the time tracking field.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/timeTrackingField`.
            public var timeTrackingField: Components.Schemas.JiraIssueFields.timeTrackingFieldPayload?
            /// Add or clear a URL field:
            ///
            ///  *  To add, provide the `url` with the desired URL value.
            ///  *  To clear, set `url` to an empty string.
            ///
            /// - Remark: Generated from `#/components/schemas/JiraIssueFields/urlFields`.
            public var urlFields: [Components.Schemas.JiraUrlField]?
            /// Creates a new `JiraIssueFields`.
            ///
            /// - Parameters:
            ///   - cascadingSelectFields: Add or clear a cascading select field:
            ///   - clearableNumberFields: Add or clear a number field:
            ///   - colorFields: Add or clear a color field:
            ///   - datePickerFields: Add or clear a date picker field:
            ///   - dateTimePickerFields: Add or clear the planned start date and time:
            ///   - issueType: Set the issue type field by providing an `issueTypeId`.
            ///   - labelsFields: Edit a labels field:
            ///   - multipleGroupPickerFields: Add or clear a multi-group picker field:
            ///   - multipleSelectClearableUserPickerFields: Assign or unassign multiple users to/from a field:
            ///   - multipleSelectFields: Add or clear a multi-select field:
            ///   - multipleVersionPickerFields: Edit a multi-version picker field like Fix Versions/Affects Versions:
            ///   - multiselectComponents: Edit a multi select components field:
            ///   - originalEstimateField: Edit the original estimate field.
            ///   - priority: Set the priority of an issue by specifying a `priorityId`.
            ///   - richTextFields: Add or clear a rich text field:
            ///   - singleGroupPickerFields: Add or clear a single group picker field:
            ///   - singleLineTextFields: Add or clear a single line text field:
            ///   - singleSelectClearableUserPickerFields: Edit assignment for single select user picker fields like Assignee/Reporter:
            ///   - singleSelectFields: Add or clear a single select field:
            ///   - singleVersionPickerFields: Add or clear a single version picker field:
            ///   - timeTrackingField: Edit the time tracking field.
            ///   - urlFields: Add or clear a URL field:
            public init(
                cascadingSelectFields: [Components.Schemas.JiraCascadingSelectField]? = nil,
                clearableNumberFields: [Components.Schemas.JiraNumberField]? = nil,
                colorFields: [Components.Schemas.JiraColorField]? = nil,
                datePickerFields: [Components.Schemas.JiraDateField]? = nil,
                dateTimePickerFields: [Components.Schemas.JiraDateTimeField]? = nil,
                issueType: Components.Schemas.JiraIssueFields.issueTypePayload? = nil,
                labelsFields: [Components.Schemas.JiraLabelsField]? = nil,
                multipleGroupPickerFields: [Components.Schemas.JiraMultipleGroupPickerField]? = nil,
                multipleSelectClearableUserPickerFields: [Components.Schemas.JiraMultipleSelectUserPickerField]? = nil,
                multipleSelectFields: [Components.Schemas.JiraMultipleSelectField]? = nil,
                multipleVersionPickerFields: [Components.Schemas.JiraMultipleVersionPickerField]? = nil,
                multiselectComponents: Components.Schemas.JiraIssueFields.multiselectComponentsPayload? = nil,
                originalEstimateField: Components.Schemas.JiraIssueFields.originalEstimateFieldPayload? = nil,
                priority: Components.Schemas.JiraIssueFields.priorityPayload? = nil,
                richTextFields: [Components.Schemas.JiraRichTextField]? = nil,
                singleGroupPickerFields: [Components.Schemas.JiraSingleGroupPickerField]? = nil,
                singleLineTextFields: [Components.Schemas.JiraSingleLineTextField]? = nil,
                singleSelectClearableUserPickerFields: [Components.Schemas.JiraSingleSelectUserPickerField]? = nil,
                singleSelectFields: [Components.Schemas.JiraSingleSelectField]? = nil,
                singleVersionPickerFields: [Components.Schemas.JiraSingleVersionPickerField]? = nil,
                timeTrackingField: Components.Schemas.JiraIssueFields.timeTrackingFieldPayload? = nil,
                urlFields: [Components.Schemas.JiraUrlField]? = nil
            ) {
                self.cascadingSelectFields = cascadingSelectFields
                self.clearableNumberFields = clearableNumberFields
                self.colorFields = colorFields
                self.datePickerFields = datePickerFields
                self.dateTimePickerFields = dateTimePickerFields
                self.issueType = issueType
                self.labelsFields = labelsFields
                self.multipleGroupPickerFields = multipleGroupPickerFields
                self.multipleSelectClearableUserPickerFields = multipleSelectClearableUserPickerFields
                self.multipleSelectFields = multipleSelectFields
                self.multipleVersionPickerFields = multipleVersionPickerFields
                self.multiselectComponents = multiselectComponents
                self.originalEstimateField = originalEstimateField
                self.priority = priority
                self.richTextFields = richTextFields
                self.singleGroupPickerFields = singleGroupPickerFields
                self.singleLineTextFields = singleLineTextFields
                self.singleSelectClearableUserPickerFields = singleSelectClearableUserPickerFields
                self.singleSelectFields = singleSelectFields
                self.singleVersionPickerFields = singleVersionPickerFields
                self.timeTrackingField = timeTrackingField
                self.urlFields = urlFields
            }
            public enum CodingKeys: String, CodingKey {
                case cascadingSelectFields
                case clearableNumberFields
                case colorFields
                case datePickerFields
                case dateTimePickerFields
                case issueType
                case labelsFields
                case multipleGroupPickerFields
                case multipleSelectClearableUserPickerFields
                case multipleSelectFields
                case multipleVersionPickerFields
                case multiselectComponents
                case originalEstimateField
                case priority
                case richTextFields
                case singleGroupPickerFields
                case singleLineTextFields
                case singleSelectClearableUserPickerFields
                case singleSelectFields
                case singleVersionPickerFields
                case timeTrackingField
                case urlFields
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                cascadingSelectFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraCascadingSelectField].self,
                    forKey: .cascadingSelectFields
                )
                clearableNumberFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraNumberField].self,
                    forKey: .clearableNumberFields
                )
                colorFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraColorField].self,
                    forKey: .colorFields
                )
                datePickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraDateField].self,
                    forKey: .datePickerFields
                )
                dateTimePickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraDateTimeField].self,
                    forKey: .dateTimePickerFields
                )
                issueType = try container.decodeIfPresent(
                    Components.Schemas.JiraIssueFields.issueTypePayload.self,
                    forKey: .issueType
                )
                labelsFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraLabelsField].self,
                    forKey: .labelsFields
                )
                multipleGroupPickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraMultipleGroupPickerField].self,
                    forKey: .multipleGroupPickerFields
                )
                multipleSelectClearableUserPickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraMultipleSelectUserPickerField].self,
                    forKey: .multipleSelectClearableUserPickerFields
                )
                multipleSelectFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraMultipleSelectField].self,
                    forKey: .multipleSelectFields
                )
                multipleVersionPickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraMultipleVersionPickerField].self,
                    forKey: .multipleVersionPickerFields
                )
                multiselectComponents = try container.decodeIfPresent(
                    Components.Schemas.JiraIssueFields.multiselectComponentsPayload.self,
                    forKey: .multiselectComponents
                )
                originalEstimateField = try container.decodeIfPresent(
                    Components.Schemas.JiraIssueFields.originalEstimateFieldPayload.self,
                    forKey: .originalEstimateField
                )
                priority = try container.decodeIfPresent(
                    Components.Schemas.JiraIssueFields.priorityPayload.self,
                    forKey: .priority
                )
                richTextFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraRichTextField].self,
                    forKey: .richTextFields
                )
                singleGroupPickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraSingleGroupPickerField].self,
                    forKey: .singleGroupPickerFields
                )
                singleLineTextFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraSingleLineTextField].self,
                    forKey: .singleLineTextFields
                )
                singleSelectClearableUserPickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraSingleSelectUserPickerField].self,
                    forKey: .singleSelectClearableUserPickerFields
                )
                singleSelectFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraSingleSelectField].self,
                    forKey: .singleSelectFields
                )
                singleVersionPickerFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraSingleVersionPickerField].self,
                    forKey: .singleVersionPickerFields
                )
                timeTrackingField = try container.decodeIfPresent(
                    Components.Schemas.JiraIssueFields.timeTrackingFieldPayload.self,
                    forKey: .timeTrackingField
                )
                urlFields = try container.decodeIfPresent(
                    [Components.Schemas.JiraUrlField].self,
                    forKey: .urlFields
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "cascadingSelectFields",
                    "clearableNumberFields",
                    "colorFields",
                    "datePickerFields",
                    "dateTimePickerFields",
                    "issueType",
                    "labelsFields",
                    "multipleGroupPickerFields",
                    "multipleSelectClearableUserPickerFields",
                    "multipleSelectFields",
                    "multipleVersionPickerFields",
                    "multiselectComponents",
                    "originalEstimateField",
                    "priority",
                    "richTextFields",
                    "singleGroupPickerFields",
                    "singleLineTextFields",
                    "singleSelectClearableUserPickerFields",
                    "singleSelectFields",
                    "singleVersionPickerFields",
                    "timeTrackingField",
                    "urlFields"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraIssueTypeField`.
        public struct JiraIssueTypeField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraIssueTypeField/issueTypeId`.
            public var issueTypeId: Swift.String
            /// Creates a new `JiraIssueTypeField`.
            ///
            /// - Parameters:
            ///   - issueTypeId:
            public init(issueTypeId: Swift.String) {
                self.issueTypeId = issueTypeId
            }
            public enum CodingKeys: String, CodingKey {
                case issueTypeId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                issueTypeId = try container.decode(
                    Swift.String.self,
                    forKey: .issueTypeId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "issueTypeId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraLabelsField`.
        public struct JiraLabelsField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraLabelsField/bulkEditMultiSelectFieldOption`.
            @frozen public enum bulkEditMultiSelectFieldOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ADD = "ADD"
                case REMOVE = "REMOVE"
                case REPLACE = "REPLACE"
                case REMOVE_ALL = "REMOVE_ALL"
            }
            /// - Remark: Generated from `#/components/schemas/JiraLabelsField/bulkEditMultiSelectFieldOption`.
            public var bulkEditMultiSelectFieldOption: Components.Schemas.JiraLabelsField.bulkEditMultiSelectFieldOptionPayload
            /// - Remark: Generated from `#/components/schemas/JiraLabelsField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraLabelsField/labels`.
            public var labels: [Components.Schemas.JiraLabelsInput]
            /// Creates a new `JiraLabelsField`.
            ///
            /// - Parameters:
            ///   - bulkEditMultiSelectFieldOption:
            ///   - fieldId:
            ///   - labels:
            public init(
                bulkEditMultiSelectFieldOption: Components.Schemas.JiraLabelsField.bulkEditMultiSelectFieldOptionPayload,
                fieldId: Swift.String,
                labels: [Components.Schemas.JiraLabelsInput]
            ) {
                self.bulkEditMultiSelectFieldOption = bulkEditMultiSelectFieldOption
                self.fieldId = fieldId
                self.labels = labels
            }
            public enum CodingKeys: String, CodingKey {
                case bulkEditMultiSelectFieldOption
                case fieldId
                case labels
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                bulkEditMultiSelectFieldOption = try container.decode(
                    Components.Schemas.JiraLabelsField.bulkEditMultiSelectFieldOptionPayload.self,
                    forKey: .bulkEditMultiSelectFieldOption
                )
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                labels = try container.decode(
                    [Components.Schemas.JiraLabelsInput].self,
                    forKey: .labels
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "bulkEditMultiSelectFieldOption",
                    "fieldId",
                    "labels"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraLabelsInput`.
        public struct JiraLabelsInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraLabelsInput/name`.
            public var name: Swift.String
            /// Creates a new `JiraLabelsInput`.
            ///
            /// - Parameters:
            ///   - name:
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "name"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraMultiSelectComponentField`.
        public struct JiraMultiSelectComponentField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraMultiSelectComponentField/bulkEditMultiSelectFieldOption`.
            @frozen public enum bulkEditMultiSelectFieldOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ADD = "ADD"
                case REMOVE = "REMOVE"
                case REPLACE = "REPLACE"
                case REMOVE_ALL = "REMOVE_ALL"
            }
            /// - Remark: Generated from `#/components/schemas/JiraMultiSelectComponentField/bulkEditMultiSelectFieldOption`.
            public var bulkEditMultiSelectFieldOption: Components.Schemas.JiraMultiSelectComponentField.bulkEditMultiSelectFieldOptionPayload
            /// - Remark: Generated from `#/components/schemas/JiraMultiSelectComponentField/components`.
            public var components: [Components.Schemas.JiraComponentField]
            /// - Remark: Generated from `#/components/schemas/JiraMultiSelectComponentField/fieldId`.
            public var fieldId: Swift.String
            /// Creates a new `JiraMultiSelectComponentField`.
            ///
            /// - Parameters:
            ///   - bulkEditMultiSelectFieldOption:
            ///   - components:
            ///   - fieldId:
            public init(
                bulkEditMultiSelectFieldOption: Components.Schemas.JiraMultiSelectComponentField.bulkEditMultiSelectFieldOptionPayload,
                components: [Components.Schemas.JiraComponentField],
                fieldId: Swift.String
            ) {
                self.bulkEditMultiSelectFieldOption = bulkEditMultiSelectFieldOption
                self.components = components
                self.fieldId = fieldId
            }
            public enum CodingKeys: String, CodingKey {
                case bulkEditMultiSelectFieldOption
                case components
                case fieldId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                bulkEditMultiSelectFieldOption = try container.decode(
                    Components.Schemas.JiraMultiSelectComponentField.bulkEditMultiSelectFieldOptionPayload.self,
                    forKey: .bulkEditMultiSelectFieldOption
                )
                components = try container.decode(
                    [Components.Schemas.JiraComponentField].self,
                    forKey: .components
                )
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "bulkEditMultiSelectFieldOption",
                    "components",
                    "fieldId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraMultipleGroupPickerField`.
        public struct JiraMultipleGroupPickerField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraMultipleGroupPickerField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraMultipleGroupPickerField/groups`.
            public var groups: [Components.Schemas.JiraGroupInput]
            /// Creates a new `JiraMultipleGroupPickerField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - groups:
            public init(
                fieldId: Swift.String,
                groups: [Components.Schemas.JiraGroupInput]
            ) {
                self.fieldId = fieldId
                self.groups = groups
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case groups
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                groups = try container.decode(
                    [Components.Schemas.JiraGroupInput].self,
                    forKey: .groups
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "groups"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraMultipleSelectField`.
        public struct JiraMultipleSelectField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraMultipleSelectField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraMultipleSelectField/options`.
            public var options: [Components.Schemas.JiraSelectedOptionField]
            /// Creates a new `JiraMultipleSelectField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - options:
            public init(
                fieldId: Swift.String,
                options: [Components.Schemas.JiraSelectedOptionField]
            ) {
                self.fieldId = fieldId
                self.options = options
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case options
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                options = try container.decode(
                    [Components.Schemas.JiraSelectedOptionField].self,
                    forKey: .options
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "options"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraMultipleSelectUserPickerField`.
        public struct JiraMultipleSelectUserPickerField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraMultipleSelectUserPickerField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraMultipleSelectUserPickerField/users`.
            public var users: [Components.Schemas.JiraUserField]?
            /// Creates a new `JiraMultipleSelectUserPickerField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - users:
            public init(
                fieldId: Swift.String,
                users: [Components.Schemas.JiraUserField]? = nil
            ) {
                self.fieldId = fieldId
                self.users = users
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case users
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                users = try container.decodeIfPresent(
                    [Components.Schemas.JiraUserField].self,
                    forKey: .users
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "users"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraMultipleVersionPickerField`.
        public struct JiraMultipleVersionPickerField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraMultipleVersionPickerField/bulkEditMultiSelectFieldOption`.
            @frozen public enum bulkEditMultiSelectFieldOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ADD = "ADD"
                case REMOVE = "REMOVE"
                case REPLACE = "REPLACE"
                case REMOVE_ALL = "REMOVE_ALL"
            }
            /// - Remark: Generated from `#/components/schemas/JiraMultipleVersionPickerField/bulkEditMultiSelectFieldOption`.
            public var bulkEditMultiSelectFieldOption: Components.Schemas.JiraMultipleVersionPickerField.bulkEditMultiSelectFieldOptionPayload
            /// - Remark: Generated from `#/components/schemas/JiraMultipleVersionPickerField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraMultipleVersionPickerField/versions`.
            public var versions: [Components.Schemas.JiraVersionField]
            /// Creates a new `JiraMultipleVersionPickerField`.
            ///
            /// - Parameters:
            ///   - bulkEditMultiSelectFieldOption:
            ///   - fieldId:
            ///   - versions:
            public init(
                bulkEditMultiSelectFieldOption: Components.Schemas.JiraMultipleVersionPickerField.bulkEditMultiSelectFieldOptionPayload,
                fieldId: Swift.String,
                versions: [Components.Schemas.JiraVersionField]
            ) {
                self.bulkEditMultiSelectFieldOption = bulkEditMultiSelectFieldOption
                self.fieldId = fieldId
                self.versions = versions
            }
            public enum CodingKeys: String, CodingKey {
                case bulkEditMultiSelectFieldOption
                case fieldId
                case versions
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                bulkEditMultiSelectFieldOption = try container.decode(
                    Components.Schemas.JiraMultipleVersionPickerField.bulkEditMultiSelectFieldOptionPayload.self,
                    forKey: .bulkEditMultiSelectFieldOption
                )
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                versions = try container.decode(
                    [Components.Schemas.JiraVersionField].self,
                    forKey: .versions
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "bulkEditMultiSelectFieldOption",
                    "fieldId",
                    "versions"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraNumberField`.
        public struct JiraNumberField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraNumberField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraNumberField/value`.
            public var value: Swift.Double?
            /// Creates a new `JiraNumberField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - value:
            public init(
                fieldId: Swift.String,
                value: Swift.Double? = nil
            ) {
                self.fieldId = fieldId
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case value
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                value = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .value
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "value"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraPriorityField`.
        public struct JiraPriorityField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraPriorityField/priorityId`.
            public var priorityId: Swift.String
            /// Creates a new `JiraPriorityField`.
            ///
            /// - Parameters:
            ///   - priorityId:
            public init(priorityId: Swift.String) {
                self.priorityId = priorityId
            }
            public enum CodingKeys: String, CodingKey {
                case priorityId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                priorityId = try container.decode(
                    Swift.String.self,
                    forKey: .priorityId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "priorityId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraRichTextField`.
        public struct JiraRichTextField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraRichTextField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraRichTextField/richText`.
            public var richText: Components.Schemas.JiraRichTextInput
            /// Creates a new `JiraRichTextField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - richText:
            public init(
                fieldId: Swift.String,
                richText: Components.Schemas.JiraRichTextInput
            ) {
                self.fieldId = fieldId
                self.richText = richText
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case richText
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                richText = try container.decode(
                    Components.Schemas.JiraRichTextInput.self,
                    forKey: .richText
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "richText"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraRichTextInput`.
        public struct JiraRichTextInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraRichTextInput/adfValue`.
            public struct adfValuePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `adfValuePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/JiraRichTextInput/adfValue`.
            public var adfValue: Components.Schemas.JiraRichTextInput.adfValuePayload?
            /// Creates a new `JiraRichTextInput`.
            ///
            /// - Parameters:
            ///   - adfValue:
            public init(adfValue: Components.Schemas.JiraRichTextInput.adfValuePayload? = nil) {
                self.adfValue = adfValue
            }
            public enum CodingKeys: String, CodingKey {
                case adfValue
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                adfValue = try container.decodeIfPresent(
                    Components.Schemas.JiraRichTextInput.adfValuePayload.self,
                    forKey: .adfValue
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "adfValue"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraSelectedOptionField`.
        public struct JiraSelectedOptionField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraSelectedOptionField/optionId`.
            public var optionId: Swift.Int64?
            /// Creates a new `JiraSelectedOptionField`.
            ///
            /// - Parameters:
            ///   - optionId:
            public init(optionId: Swift.Int64? = nil) {
                self.optionId = optionId
            }
            public enum CodingKeys: String, CodingKey {
                case optionId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                optionId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .optionId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "optionId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraSingleGroupPickerField`.
        public struct JiraSingleGroupPickerField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraSingleGroupPickerField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraSingleGroupPickerField/group`.
            public var group: Components.Schemas.JiraGroupInput
            /// Creates a new `JiraSingleGroupPickerField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - group:
            public init(
                fieldId: Swift.String,
                group: Components.Schemas.JiraGroupInput
            ) {
                self.fieldId = fieldId
                self.group = group
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case group
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                group = try container.decode(
                    Components.Schemas.JiraGroupInput.self,
                    forKey: .group
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "group"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraSingleLineTextField`.
        public struct JiraSingleLineTextField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraSingleLineTextField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraSingleLineTextField/text`.
            public var text: Swift.String
            /// Creates a new `JiraSingleLineTextField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - text:
            public init(
                fieldId: Swift.String,
                text: Swift.String
            ) {
                self.fieldId = fieldId
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case text
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                text = try container.decode(
                    Swift.String.self,
                    forKey: .text
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "text"
                ])
            }
        }
        /// Add or clear a single select field:
        ///
        ///  *  To add, specify the option with an `optionId`.
        ///  *  To clear, pass an option with `optionId` as `-1`.
        ///
        /// - Remark: Generated from `#/components/schemas/JiraSingleSelectField`.
        public struct JiraSingleSelectField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraSingleSelectField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraSingleSelectField/option`.
            public var option: Components.Schemas.JiraSelectedOptionField
            /// Creates a new `JiraSingleSelectField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - option:
            public init(
                fieldId: Swift.String,
                option: Components.Schemas.JiraSelectedOptionField
            ) {
                self.fieldId = fieldId
                self.option = option
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case option
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                option = try container.decode(
                    Components.Schemas.JiraSelectedOptionField.self,
                    forKey: .option
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "option"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraSingleSelectUserPickerField`.
        public struct JiraSingleSelectUserPickerField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraSingleSelectUserPickerField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraSingleSelectUserPickerField/user`.
            public var user: Components.Schemas.JiraUserField?
            /// Creates a new `JiraSingleSelectUserPickerField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - user:
            public init(
                fieldId: Swift.String,
                user: Components.Schemas.JiraUserField? = nil
            ) {
                self.fieldId = fieldId
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case user
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                user = try container.decodeIfPresent(
                    Components.Schemas.JiraUserField.self,
                    forKey: .user
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "user"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraSingleVersionPickerField`.
        public struct JiraSingleVersionPickerField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraSingleVersionPickerField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraSingleVersionPickerField/version`.
            public var version: Components.Schemas.JiraVersionField
            /// Creates a new `JiraSingleVersionPickerField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - version:
            public init(
                fieldId: Swift.String,
                version: Components.Schemas.JiraVersionField
            ) {
                self.fieldId = fieldId
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case version
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                version = try container.decode(
                    Components.Schemas.JiraVersionField.self,
                    forKey: .version
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "version"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraTimeTrackingField`.
        public struct JiraTimeTrackingField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraTimeTrackingField/timeRemaining`.
            public var timeRemaining: Swift.String
            /// Creates a new `JiraTimeTrackingField`.
            ///
            /// - Parameters:
            ///   - timeRemaining:
            public init(timeRemaining: Swift.String) {
                self.timeRemaining = timeRemaining
            }
            public enum CodingKeys: String, CodingKey {
                case timeRemaining
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                timeRemaining = try container.decode(
                    Swift.String.self,
                    forKey: .timeRemaining
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "timeRemaining"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraUrlField`.
        public struct JiraUrlField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraUrlField/fieldId`.
            public var fieldId: Swift.String
            /// - Remark: Generated from `#/components/schemas/JiraUrlField/url`.
            public var url: Swift.String
            /// Creates a new `JiraUrlField`.
            ///
            /// - Parameters:
            ///   - fieldId:
            ///   - url:
            public init(
                fieldId: Swift.String,
                url: Swift.String
            ) {
                self.fieldId = fieldId
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case fieldId
                case url
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                fieldId = try container.decode(
                    Swift.String.self,
                    forKey: .fieldId
                )
                url = try container.decode(
                    Swift.String.self,
                    forKey: .url
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "fieldId",
                    "url"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraUserField`.
        public struct JiraUserField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraUserField/accountId`.
            public var accountId: Swift.String
            /// Creates a new `JiraUserField`.
            ///
            /// - Parameters:
            ///   - accountId:
            public init(accountId: Swift.String) {
                self.accountId = accountId
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                accountId = try container.decode(
                    Swift.String.self,
                    forKey: .accountId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "accountId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JiraVersionField`.
        public struct JiraVersionField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JiraVersionField/versionId`.
            public var versionId: Swift.String?
            /// Creates a new `JiraVersionField`.
            ///
            /// - Parameters:
            ///   - versionId:
            public init(versionId: Swift.String? = nil) {
                self.versionId = versionId
            }
            public enum CodingKeys: String, CodingKey {
                case versionId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                versionId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .versionId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "versionId"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonNode`.
        public struct JsonNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonNode/array`.
            public var array: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/bigDecimal`.
            public var bigDecimal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/bigInteger`.
            public var bigInteger: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/bigIntegerValue`.
            public var bigIntegerValue: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/JsonNode/binary`.
            public var binary: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/binaryValue`.
            public var binaryValue: [OpenAPIRuntime.Base64EncodedData]?
            /// - Remark: Generated from `#/components/schemas/JsonNode/boolean`.
            public var boolean: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/booleanValue`.
            public var booleanValue: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/containerNode`.
            public var containerNode: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/decimalValue`.
            public var decimalValue: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/JsonNode/double`.
            public var double: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/doubleValue`.
            public var doubleValue: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/JsonNode/elements`.
            public var elements: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/JsonNode/fieldNames`.
            public var fieldNames: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/JsonNode/fields`.
            public var fields: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/JsonNode/floatingPointNumber`.
            public var floatingPointNumber: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/int`.
            public var int: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/intValue`.
            public var intValue: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/JsonNode/integralNumber`.
            public var integralNumber: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/long`.
            public var long: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/longValue`.
            public var longValue: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/JsonNode/missingNode`.
            public var missingNode: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/null`.
            public var null: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/number`.
            public var number: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/numberType`.
            @frozen public enum numberTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case INT = "INT"
                case LONG = "LONG"
                case BIG_INTEGER = "BIG_INTEGER"
                case FLOAT = "FLOAT"
                case DOUBLE = "DOUBLE"
                case BIG_DECIMAL = "BIG_DECIMAL"
            }
            /// - Remark: Generated from `#/components/schemas/JsonNode/numberType`.
            public var numberType: Components.Schemas.JsonNode.numberTypePayload?
            /// - Remark: Generated from `#/components/schemas/JsonNode/numberValue`.
            public var numberValue: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/JsonNode/object`.
            public var object: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/pojo`.
            public var pojo: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/textValue`.
            public var textValue: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JsonNode/textual`.
            public var textual: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/valueAsBoolean`.
            public var valueAsBoolean: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/JsonNode/valueAsDouble`.
            public var valueAsDouble: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/JsonNode/valueAsInt`.
            public var valueAsInt: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/JsonNode/valueAsLong`.
            public var valueAsLong: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/JsonNode/valueAsText`.
            public var valueAsText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JsonNode/valueNode`.
            public var valueNode: Swift.Bool?
            /// Creates a new `JsonNode`.
            ///
            /// - Parameters:
            ///   - array:
            ///   - bigDecimal:
            ///   - bigInteger:
            ///   - bigIntegerValue:
            ///   - binary:
            ///   - binaryValue:
            ///   - boolean:
            ///   - booleanValue:
            ///   - containerNode:
            ///   - decimalValue:
            ///   - double:
            ///   - doubleValue:
            ///   - elements:
            ///   - fieldNames:
            ///   - fields:
            ///   - floatingPointNumber:
            ///   - int:
            ///   - intValue:
            ///   - integralNumber:
            ///   - long:
            ///   - longValue:
            ///   - missingNode:
            ///   - null:
            ///   - number:
            ///   - numberType:
            ///   - numberValue:
            ///   - object:
            ///   - pojo:
            ///   - textValue:
            ///   - textual:
            ///   - valueAsBoolean:
            ///   - valueAsDouble:
            ///   - valueAsInt:
            ///   - valueAsLong:
            ///   - valueAsText:
            ///   - valueNode:
            public init(
                array: Swift.Bool? = nil,
                bigDecimal: Swift.Bool? = nil,
                bigInteger: Swift.Bool? = nil,
                bigIntegerValue: Swift.Int? = nil,
                binary: Swift.Bool? = nil,
                binaryValue: [OpenAPIRuntime.Base64EncodedData]? = nil,
                boolean: Swift.Bool? = nil,
                booleanValue: Swift.Bool? = nil,
                containerNode: Swift.Bool? = nil,
                decimalValue: Swift.Double? = nil,
                double: Swift.Bool? = nil,
                doubleValue: Swift.Double? = nil,
                elements: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                fieldNames: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                fields: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                floatingPointNumber: Swift.Bool? = nil,
                int: Swift.Bool? = nil,
                intValue: Swift.Int32? = nil,
                integralNumber: Swift.Bool? = nil,
                long: Swift.Bool? = nil,
                longValue: Swift.Int64? = nil,
                missingNode: Swift.Bool? = nil,
                null: Swift.Bool? = nil,
                number: Swift.Bool? = nil,
                numberType: Components.Schemas.JsonNode.numberTypePayload? = nil,
                numberValue: Swift.Double? = nil,
                object: Swift.Bool? = nil,
                pojo: Swift.Bool? = nil,
                textValue: Swift.String? = nil,
                textual: Swift.Bool? = nil,
                valueAsBoolean: Swift.Bool? = nil,
                valueAsDouble: Swift.Double? = nil,
                valueAsInt: Swift.Int32? = nil,
                valueAsLong: Swift.Int64? = nil,
                valueAsText: Swift.String? = nil,
                valueNode: Swift.Bool? = nil
            ) {
                self.array = array
                self.bigDecimal = bigDecimal
                self.bigInteger = bigInteger
                self.bigIntegerValue = bigIntegerValue
                self.binary = binary
                self.binaryValue = binaryValue
                self.boolean = boolean
                self.booleanValue = booleanValue
                self.containerNode = containerNode
                self.decimalValue = decimalValue
                self.double = double
                self.doubleValue = doubleValue
                self.elements = elements
                self.fieldNames = fieldNames
                self.fields = fields
                self.floatingPointNumber = floatingPointNumber
                self.int = int
                self.intValue = intValue
                self.integralNumber = integralNumber
                self.long = long
                self.longValue = longValue
                self.missingNode = missingNode
                self.null = null
                self.number = number
                self.numberType = numberType
                self.numberValue = numberValue
                self.object = object
                self.pojo = pojo
                self.textValue = textValue
                self.textual = textual
                self.valueAsBoolean = valueAsBoolean
                self.valueAsDouble = valueAsDouble
                self.valueAsInt = valueAsInt
                self.valueAsLong = valueAsLong
                self.valueAsText = valueAsText
                self.valueNode = valueNode
            }
            public enum CodingKeys: String, CodingKey {
                case array
                case bigDecimal
                case bigInteger
                case bigIntegerValue
                case binary
                case binaryValue
                case boolean
                case booleanValue
                case containerNode
                case decimalValue
                case double
                case doubleValue
                case elements
                case fieldNames
                case fields
                case floatingPointNumber
                case int
                case intValue
                case integralNumber
                case long
                case longValue
                case missingNode
                case null
                case number
                case numberType
                case numberValue
                case object
                case pojo
                case textValue
                case textual
                case valueAsBoolean
                case valueAsDouble
                case valueAsInt
                case valueAsLong
                case valueAsText
                case valueNode
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                array = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .array
                )
                bigDecimal = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .bigDecimal
                )
                bigInteger = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .bigInteger
                )
                bigIntegerValue = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .bigIntegerValue
                )
                binary = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .binary
                )
                binaryValue = try container.decodeIfPresent(
                    [OpenAPIRuntime.Base64EncodedData].self,
                    forKey: .binaryValue
                )
                boolean = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .boolean
                )
                booleanValue = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .booleanValue
                )
                containerNode = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .containerNode
                )
                decimalValue = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .decimalValue
                )
                double = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .double
                )
                doubleValue = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .doubleValue
                )
                elements = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIObjectContainer.self,
                    forKey: .elements
                )
                fieldNames = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIObjectContainer.self,
                    forKey: .fieldNames
                )
                fields = try container.decodeIfPresent(
                    OpenAPIRuntime.OpenAPIObjectContainer.self,
                    forKey: .fields
                )
                floatingPointNumber = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .floatingPointNumber
                )
                int = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .int
                )
                intValue = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .intValue
                )
                integralNumber = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .integralNumber
                )
                long = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .long
                )
                longValue = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .longValue
                )
                missingNode = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .missingNode
                )
                null = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .null
                )
                number = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .number
                )
                numberType = try container.decodeIfPresent(
                    Components.Schemas.JsonNode.numberTypePayload.self,
                    forKey: .numberType
                )
                numberValue = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .numberValue
                )
                object = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .object
                )
                pojo = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .pojo
                )
                textValue = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .textValue
                )
                textual = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .textual
                )
                valueAsBoolean = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .valueAsBoolean
                )
                valueAsDouble = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .valueAsDouble
                )
                valueAsInt = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .valueAsInt
                )
                valueAsLong = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .valueAsLong
                )
                valueAsText = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .valueAsText
                )
                valueNode = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .valueNode
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "array",
                    "bigDecimal",
                    "bigInteger",
                    "bigIntegerValue",
                    "binary",
                    "binaryValue",
                    "boolean",
                    "booleanValue",
                    "containerNode",
                    "decimalValue",
                    "double",
                    "doubleValue",
                    "elements",
                    "fieldNames",
                    "fields",
                    "floatingPointNumber",
                    "int",
                    "intValue",
                    "integralNumber",
                    "long",
                    "longValue",
                    "missingNode",
                    "null",
                    "number",
                    "numberType",
                    "numberValue",
                    "object",
                    "pojo",
                    "textValue",
                    "textual",
                    "valueAsBoolean",
                    "valueAsDouble",
                    "valueAsInt",
                    "valueAsLong",
                    "valueAsText",
                    "valueNode"
                ])
            }
        }
        /// The schema of a field.
        ///
        /// - Remark: Generated from `#/components/schemas/JsonTypeBean`.
        public struct JsonTypeBean: Codable, Hashable, Sendable {
            /// If the field is a custom field, the configuration of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/JsonTypeBean/configuration`.
            public struct configurationPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `configurationPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// If the field is a custom field, the configuration of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/JsonTypeBean/configuration`.
            public var configuration: Components.Schemas.JsonTypeBean.configurationPayload?
            /// If the field is a custom field, the URI of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/JsonTypeBean/custom`.
            public var custom: Swift.String?
            /// If the field is a custom field, the custom ID of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/JsonTypeBean/customId`.
            public var customId: Swift.Int64?
            /// When the data type is an array, the name of the field items within the array.
            ///
            /// - Remark: Generated from `#/components/schemas/JsonTypeBean/items`.
            public var items: Swift.String?
            /// If the field is a system field, the name of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/JsonTypeBean/system`.
            public var system: Swift.String?
            /// The data type of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/JsonTypeBean/type`.
            public var _type: Swift.String
            /// Creates a new `JsonTypeBean`.
            ///
            /// - Parameters:
            ///   - configuration: If the field is a custom field, the configuration of the field.
            ///   - custom: If the field is a custom field, the URI of the field.
            ///   - customId: If the field is a custom field, the custom ID of the field.
            ///   - items: When the data type is an array, the name of the field items within the array.
            ///   - system: If the field is a system field, the name of the field.
            ///   - _type: The data type of the field.
            public init(
                configuration: Components.Schemas.JsonTypeBean.configurationPayload? = nil,
                custom: Swift.String? = nil,
                customId: Swift.Int64? = nil,
                items: Swift.String? = nil,
                system: Swift.String? = nil,
                _type: Swift.String
            ) {
                self.configuration = configuration
                self.custom = custom
                self.customId = customId
                self.items = items
                self.system = system
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case configuration
                case custom
                case customId
                case items
                case system
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                configuration = try container.decodeIfPresent(
                    Components.Schemas.JsonTypeBean.configurationPayload.self,
                    forKey: .configuration
                )
                custom = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .custom
                )
                customId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .customId
                )
                items = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .items
                )
                system = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .system
                )
                _type = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "configuration",
                    "custom",
                    "customId",
                    "items",
                    "system",
                    "type"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListWrapperCallbackApplicationRole`.
        public struct ListWrapperCallbackApplicationRole: Codable, Hashable, Sendable {
            /// Creates a new `ListWrapperCallbackApplicationRole`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListWrapperCallbackGroupName`.
        public struct ListWrapperCallbackGroupName: Codable, Hashable, Sendable {
            /// Creates a new `ListWrapperCallbackGroupName`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// - Remark: Generated from `#/components/schemas/NestedResponse`.
        public struct NestedResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NestedResponse/errorCollection`.
            public var errorCollection: Components.Schemas.ErrorCollection?
            /// - Remark: Generated from `#/components/schemas/NestedResponse/status`.
            public var status: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NestedResponse/warningCollection`.
            public var warningCollection: Components.Schemas.WarningCollection?
            /// Creates a new `NestedResponse`.
            ///
            /// - Parameters:
            ///   - errorCollection:
            ///   - status:
            ///   - warningCollection:
            public init(
                errorCollection: Components.Schemas.ErrorCollection? = nil,
                status: Swift.Int32? = nil,
                warningCollection: Components.Schemas.WarningCollection? = nil
            ) {
                self.errorCollection = errorCollection
                self.status = status
                self.warningCollection = warningCollection
            }
            public enum CodingKeys: String, CodingKey {
                case errorCollection
                case status
                case warningCollection
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                errorCollection = try container.decodeIfPresent(
                    Components.Schemas.ErrorCollection.self,
                    forKey: .errorCollection
                )
                status = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .status
                )
                warningCollection = try container.decodeIfPresent(
                    Components.Schemas.WarningCollection.self,
                    forKey: .warningCollection
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "errorCollection",
                    "status",
                    "warningCollection"
                ])
            }
        }
        /// The user details.
        ///
        /// - Remark: Generated from `#/components/schemas/NewUserDetails`.
        public struct NewUserDetails: Codable, Hashable, Sendable {
            /// Deprecated, do not use.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/applicationKeys`.
            public var applicationKeys: [Swift.String]?
            /// This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/displayName`.
            public var displayName: Swift.String?
            /// The email address for the user.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/emailAddress`.
            public var emailAddress: Swift.String
            /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/key`.
            public var key: Swift.String?
            /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/name`.
            public var name: Swift.String?
            /// This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/password`.
            public var password: Swift.String?
            /// Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. To create a user without product access, set this field to be an empty array.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/products`.
            public var products: [Swift.String]
            /// The URL of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserDetails/self`.
            public var _self: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `NewUserDetails`.
            ///
            /// - Parameters:
            ///   - applicationKeys: Deprecated, do not use.
            ///   - displayName: This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
            ///   - emailAddress: The email address for the user.
            ///   - key: This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///   - name: This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///   - password: This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
            ///   - products: Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. To create a user without product access, set this field to be an empty array.
            ///   - _self: The URL of the user.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                applicationKeys: [Swift.String]? = nil,
                displayName: Swift.String? = nil,
                emailAddress: Swift.String,
                key: Swift.String? = nil,
                name: Swift.String? = nil,
                password: Swift.String? = nil,
                products: [Swift.String],
                _self: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.applicationKeys = applicationKeys
                self.displayName = displayName
                self.emailAddress = emailAddress
                self.key = key
                self.name = name
                self.password = password
                self.products = products
                self._self = _self
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case applicationKeys
                case displayName
                case emailAddress
                case key
                case name
                case password
                case products
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                applicationKeys = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .applicationKeys
                )
                displayName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .displayName
                )
                emailAddress = try container.decode(
                    Swift.String.self,
                    forKey: .emailAddress
                )
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                password = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .password
                )
                products = try container.decode(
                    [Swift.String].self,
                    forKey: .products
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "applicationKeys",
                    "displayName",
                    "emailAddress",
                    "key",
                    "name",
                    "password",
                    "products",
                    "self"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    applicationKeys,
                    forKey: .applicationKeys
                )
                try container.encodeIfPresent(
                    displayName,
                    forKey: .displayName
                )
                try container.encode(
                    emailAddress,
                    forKey: .emailAddress
                )
                try container.encodeIfPresent(
                    key,
                    forKey: .key
                )
                try container.encodeIfPresent(
                    name,
                    forKey: .name
                )
                try container.encodeIfPresent(
                    password,
                    forKey: .password
                )
                try container.encode(
                    products,
                    forKey: .products
                )
                try container.encodeIfPresent(
                    _self,
                    forKey: ._self
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// A page of items.
        ///
        /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects`.
        public struct PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects: Codable, Hashable, Sendable {
            /// Whether this is the last page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects/isLast`.
            public var isLast: Swift.Bool?
            /// The maximum number of items that could be returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects/maxResults`.
            public var maxResults: Swift.Int32?
            /// If there is another page of results, the URL of the next page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects/nextPage`.
            public var nextPage: Swift.String?
            /// The URL of the page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects/self`.
            public var _self: Swift.String?
            /// The index of the first item returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects/startAt`.
            public var startAt: Swift.Int64?
            /// The number of items returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects/total`.
            public var total: Swift.Int64?
            /// The list of items.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects/values`.
            public var values: [Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects]?
            /// Creates a new `PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects`.
            ///
            /// - Parameters:
            ///   - isLast: Whether this is the last page.
            ///   - maxResults: The maximum number of items that could be returned.
            ///   - nextPage: If there is another page of results, the URL of the next page.
            ///   - _self: The URL of the page.
            ///   - startAt: The index of the first item returned.
            ///   - total: The number of items returned.
            ///   - values: The list of items.
            public init(
                isLast: Swift.Bool? = nil,
                maxResults: Swift.Int32? = nil,
                nextPage: Swift.String? = nil,
                _self: Swift.String? = nil,
                startAt: Swift.Int64? = nil,
                total: Swift.Int64? = nil,
                values: [Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects]? = nil
            ) {
                self.isLast = isLast
                self.maxResults = maxResults
                self.nextPage = nextPage
                self._self = _self
                self.startAt = startAt
                self.total = total
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case isLast
                case maxResults
                case nextPage
                case _self = "self"
                case startAt
                case total
                case values
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                isLast = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isLast
                )
                maxResults = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .maxResults
                )
                nextPage = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .nextPage
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                startAt = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .startAt
                )
                total = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .total
                )
                values = try container.decodeIfPresent(
                    [Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects].self,
                    forKey: .values
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "isLast",
                    "maxResults",
                    "nextPage",
                    "self",
                    "startAt",
                    "total",
                    "values"
                ])
            }
        }
        /// A page of items.
        ///
        /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence`.
        public struct PageBeanPriorityWithSequence: Codable, Hashable, Sendable {
            /// Whether this is the last page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence/isLast`.
            public var isLast: Swift.Bool?
            /// The maximum number of items that could be returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence/maxResults`.
            public var maxResults: Swift.Int32?
            /// If there is another page of results, the URL of the next page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence/nextPage`.
            public var nextPage: Swift.String?
            /// The URL of the page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence/self`.
            public var _self: Swift.String?
            /// The index of the first item returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence/startAt`.
            public var startAt: Swift.Int64?
            /// The number of items returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence/total`.
            public var total: Swift.Int64?
            /// The list of items.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanPriorityWithSequence/values`.
            public var values: [Components.Schemas.PriorityWithSequence]?
            /// Creates a new `PageBeanPriorityWithSequence`.
            ///
            /// - Parameters:
            ///   - isLast: Whether this is the last page.
            ///   - maxResults: The maximum number of items that could be returned.
            ///   - nextPage: If there is another page of results, the URL of the next page.
            ///   - _self: The URL of the page.
            ///   - startAt: The index of the first item returned.
            ///   - total: The number of items returned.
            ///   - values: The list of items.
            public init(
                isLast: Swift.Bool? = nil,
                maxResults: Swift.Int32? = nil,
                nextPage: Swift.String? = nil,
                _self: Swift.String? = nil,
                startAt: Swift.Int64? = nil,
                total: Swift.Int64? = nil,
                values: [Components.Schemas.PriorityWithSequence]? = nil
            ) {
                self.isLast = isLast
                self.maxResults = maxResults
                self.nextPage = nextPage
                self._self = _self
                self.startAt = startAt
                self.total = total
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case isLast
                case maxResults
                case nextPage
                case _self = "self"
                case startAt
                case total
                case values
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                isLast = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isLast
                )
                maxResults = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .maxResults
                )
                nextPage = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .nextPage
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                startAt = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .startAt
                )
                total = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .total
                )
                values = try container.decodeIfPresent(
                    [Components.Schemas.PriorityWithSequence].self,
                    forKey: .values
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "isLast",
                    "maxResults",
                    "nextPage",
                    "self",
                    "startAt",
                    "total",
                    "values"
                ])
            }
        }
        /// A page of items.
        ///
        /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails`.
        public struct PageBeanProjectDetails: Codable, Hashable, Sendable {
            /// Whether this is the last page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails/isLast`.
            public var isLast: Swift.Bool?
            /// The maximum number of items that could be returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails/maxResults`.
            public var maxResults: Swift.Int32?
            /// If there is another page of results, the URL of the next page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails/nextPage`.
            public var nextPage: Swift.String?
            /// The URL of the page.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails/self`.
            public var _self: Swift.String?
            /// The index of the first item returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails/startAt`.
            public var startAt: Swift.Int64?
            /// The number of items returned.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails/total`.
            public var total: Swift.Int64?
            /// The list of items.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBeanProjectDetails/values`.
            public var values: [Components.Schemas.ProjectDetails]?
            /// Creates a new `PageBeanProjectDetails`.
            ///
            /// - Parameters:
            ///   - isLast: Whether this is the last page.
            ///   - maxResults: The maximum number of items that could be returned.
            ///   - nextPage: If there is another page of results, the URL of the next page.
            ///   - _self: The URL of the page.
            ///   - startAt: The index of the first item returned.
            ///   - total: The number of items returned.
            ///   - values: The list of items.
            public init(
                isLast: Swift.Bool? = nil,
                maxResults: Swift.Int32? = nil,
                nextPage: Swift.String? = nil,
                _self: Swift.String? = nil,
                startAt: Swift.Int64? = nil,
                total: Swift.Int64? = nil,
                values: [Components.Schemas.ProjectDetails]? = nil
            ) {
                self.isLast = isLast
                self.maxResults = maxResults
                self.nextPage = nextPage
                self._self = _self
                self.startAt = startAt
                self.total = total
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case isLast
                case maxResults
                case nextPage
                case _self = "self"
                case startAt
                case total
                case values
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                isLast = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isLast
                )
                maxResults = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .maxResults
                )
                nextPage = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .nextPage
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                startAt = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .startAt
                )
                total = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .total
                )
                values = try container.decodeIfPresent(
                    [Components.Schemas.ProjectDetails].self,
                    forKey: .values
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "isLast",
                    "maxResults",
                    "nextPage",
                    "self",
                    "startAt",
                    "total",
                    "values"
                ])
            }
        }
        /// Mapping of issue priorities for changes in priority schemes.
        ///
        /// - Remark: Generated from `#/components/schemas/PriorityMapping`.
        public struct PriorityMapping: Codable, Hashable, Sendable {
            /// The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme).
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityMapping/in`.
            public struct _inPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Int64]
                /// Creates a new `_inPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Int64] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme).
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityMapping/in`.
            public var _in: Components.Schemas.PriorityMapping._inPayload?
            /// The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityMapping/out`.
            public struct outPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Int64]
                /// Creates a new `outPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Int64] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityMapping/out`.
            public var out: Components.Schemas.PriorityMapping.outPayload?
            /// Creates a new `PriorityMapping`.
            ///
            /// - Parameters:
            ///   - _in: The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme).
            ///   - out: The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme.
            public init(
                _in: Components.Schemas.PriorityMapping._inPayload? = nil,
                out: Components.Schemas.PriorityMapping.outPayload? = nil
            ) {
                self._in = _in
                self.out = out
            }
            public enum CodingKeys: String, CodingKey {
                case _in = "in"
                case out
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                _in = try container.decodeIfPresent(
                    Components.Schemas.PriorityMapping._inPayload.self,
                    forKey: ._in
                )
                out = try container.decodeIfPresent(
                    Components.Schemas.PriorityMapping.outPayload.self,
                    forKey: .out
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "in",
                    "out"
                ])
            }
        }
        /// The ID of a priority scheme.
        ///
        /// - Remark: Generated from `#/components/schemas/PrioritySchemeId`.
        public struct PrioritySchemeId: Codable, Hashable, Sendable {
            /// The ID of the priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeId/id`.
            public var id: Swift.String?
            /// The in-progress issue migration task.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeId/task`.
            public struct taskPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PrioritySchemeId/task/value1`.
                public var value1: Components.Schemas.TaskProgressBeanJsonNode
                /// Creates a new `taskPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.TaskProgressBeanJsonNode) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The in-progress issue migration task.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeId/task`.
            public var task: Components.Schemas.PrioritySchemeId.taskPayload?
            /// Creates a new `PrioritySchemeId`.
            ///
            /// - Parameters:
            ///   - id: The ID of the priority scheme.
            ///   - task: The in-progress issue migration task.
            public init(
                id: Swift.String? = nil,
                task: Components.Schemas.PrioritySchemeId.taskPayload? = nil
            ) {
                self.id = id
                self.task = task
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case task
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                task = try container.decodeIfPresent(
                    Components.Schemas.PrioritySchemeId.taskPayload.self,
                    forKey: .task
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "id",
                    "task"
                ])
            }
        }
        /// A priority scheme with paginated priorities and projects.
        ///
        /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects`.
        public struct PrioritySchemeWithPaginatedPrioritiesAndProjects: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/default`.
            public var _default: Swift.Bool?
            /// The ID of the default issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/defaultPriorityId`.
            public var defaultPriorityId: Swift.String?
            /// The description of the priority scheme
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/description`.
            public var description: Swift.String?
            /// The ID of the priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/isDefault`.
            public var isDefault: Swift.Bool?
            /// The name of the priority scheme
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/name`.
            public var name: Swift.String
            /// The paginated list of priorities.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/priorities`.
            public struct prioritiesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/priorities/value1`.
                public var value1: Components.Schemas.PageBeanPriorityWithSequence
                /// Creates a new `prioritiesPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PageBeanPriorityWithSequence) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The paginated list of priorities.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/priorities`.
            public var priorities: Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects.prioritiesPayload?
            /// The paginated list of projects.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/projects`.
            public struct projectsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/projects/value1`.
                public var value1: Components.Schemas.PageBeanProjectDetails
                /// Creates a new `projectsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PageBeanProjectDetails) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The paginated list of projects.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/projects`.
            public var projects: Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects.projectsPayload?
            /// The URL of the priority scheme.
            ///
            /// - Remark: Generated from `#/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects/self`.
            public var _self: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `PrioritySchemeWithPaginatedPrioritiesAndProjects`.
            ///
            /// - Parameters:
            ///   - _default:
            ///   - defaultPriorityId: The ID of the default issue priority.
            ///   - description: The description of the priority scheme
            ///   - id: The ID of the priority scheme.
            ///   - isDefault:
            ///   - name: The name of the priority scheme
            ///   - priorities: The paginated list of priorities.
            ///   - projects: The paginated list of projects.
            ///   - _self: The URL of the priority scheme.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                _default: Swift.Bool? = nil,
                defaultPriorityId: Swift.String? = nil,
                description: Swift.String? = nil,
                id: Swift.String,
                isDefault: Swift.Bool? = nil,
                name: Swift.String,
                priorities: Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects.prioritiesPayload? = nil,
                projects: Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects.projectsPayload? = nil,
                _self: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self._default = _default
                self.defaultPriorityId = defaultPriorityId
                self.description = description
                self.id = id
                self.isDefault = isDefault
                self.name = name
                self.priorities = priorities
                self.projects = projects
                self._self = _self
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case _default = "default"
                case defaultPriorityId
                case description
                case id
                case isDefault
                case name
                case priorities
                case projects
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                _default = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: ._default
                )
                defaultPriorityId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .defaultPriorityId
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                id = try container.decode(
                    Swift.String.self,
                    forKey: .id
                )
                isDefault = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isDefault
                )
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                priorities = try container.decodeIfPresent(
                    Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects.prioritiesPayload.self,
                    forKey: .priorities
                )
                projects = try container.decodeIfPresent(
                    Components.Schemas.PrioritySchemeWithPaginatedPrioritiesAndProjects.projectsPayload.self,
                    forKey: .projects
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "default",
                    "defaultPriorityId",
                    "description",
                    "id",
                    "isDefault",
                    "name",
                    "priorities",
                    "projects",
                    "self"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    _default,
                    forKey: ._default
                )
                try container.encodeIfPresent(
                    defaultPriorityId,
                    forKey: .defaultPriorityId
                )
                try container.encodeIfPresent(
                    description,
                    forKey: .description
                )
                try container.encode(
                    id,
                    forKey: .id
                )
                try container.encodeIfPresent(
                    isDefault,
                    forKey: .isDefault
                )
                try container.encode(
                    name,
                    forKey: .name
                )
                try container.encodeIfPresent(
                    priorities,
                    forKey: .priorities
                )
                try container.encodeIfPresent(
                    projects,
                    forKey: .projects
                )
                try container.encodeIfPresent(
                    _self,
                    forKey: ._self
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// An issue priority with sequence information.
        ///
        /// - Remark: Generated from `#/components/schemas/PriorityWithSequence`.
        public struct PriorityWithSequence: Codable, Hashable, Sendable {
            /// The description of the issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/description`.
            public var description: Swift.String?
            /// The URL of the icon for the issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/iconUrl`.
            public var iconUrl: Swift.String?
            /// The ID of the issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/id`.
            public var id: Swift.String?
            /// Whether this priority is the default.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/isDefault`.
            public var isDefault: Swift.Bool?
            /// The name of the issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/name`.
            public var name: Swift.String?
            /// The URL of the issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/self`.
            public var _self: Swift.String?
            /// The sequence of the issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/sequence`.
            public var sequence: Swift.String?
            /// The color used to indicate the issue priority.
            ///
            /// - Remark: Generated from `#/components/schemas/PriorityWithSequence/statusColor`.
            public var statusColor: Swift.String?
            /// Creates a new `PriorityWithSequence`.
            ///
            /// - Parameters:
            ///   - description: The description of the issue priority.
            ///   - iconUrl: The URL of the icon for the issue priority.
            ///   - id: The ID of the issue priority.
            ///   - isDefault: Whether this priority is the default.
            ///   - name: The name of the issue priority.
            ///   - _self: The URL of the issue priority.
            ///   - sequence: The sequence of the issue priority.
            ///   - statusColor: The color used to indicate the issue priority.
            public init(
                description: Swift.String? = nil,
                iconUrl: Swift.String? = nil,
                id: Swift.String? = nil,
                isDefault: Swift.Bool? = nil,
                name: Swift.String? = nil,
                _self: Swift.String? = nil,
                sequence: Swift.String? = nil,
                statusColor: Swift.String? = nil
            ) {
                self.description = description
                self.iconUrl = iconUrl
                self.id = id
                self.isDefault = isDefault
                self.name = name
                self._self = _self
                self.sequence = sequence
                self.statusColor = statusColor
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case iconUrl
                case id
                case isDefault
                case name
                case _self = "self"
                case sequence
                case statusColor
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                iconUrl = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .iconUrl
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                isDefault = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isDefault
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                sequence = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .sequence
                )
                statusColor = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .statusColor
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "description",
                    "iconUrl",
                    "id",
                    "isDefault",
                    "name",
                    "self",
                    "sequence",
                    "statusColor"
                ])
            }
        }
        /// Details about a project.
        ///
        /// - Remark: Generated from `#/components/schemas/Project`.
        public struct Project: Codable, Hashable, Sendable {
            /// Whether the project is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/archived`.
            public var archived: Swift.Bool?
            /// The user who archived the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/archivedBy`.
            public struct archivedByPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/archivedBy/value1`.
                public var value1: Components.Schemas.User
                /// Creates a new `archivedByPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.User) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The user who archived the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/archivedBy`.
            public var archivedBy: Components.Schemas.Project.archivedByPayload?
            /// The date when the project was archived.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/archivedDate`.
            public var archivedDate: Foundation.Date?
            /// The default assignee when creating issues for this project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/assigneeType`.
            @frozen public enum assigneeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case PROJECT_LEAD = "PROJECT_LEAD"
                case UNASSIGNED = "UNASSIGNED"
            }
            /// The default assignee when creating issues for this project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/assigneeType`.
            public var assigneeType: Components.Schemas.Project.assigneeTypePayload?
            /// The URLs of the project's avatars.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/avatarUrls`.
            public struct avatarUrlsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/avatarUrls/value1`.
                public var value1: Components.Schemas.AvatarUrlsBean
                /// Creates a new `avatarUrlsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AvatarUrlsBean) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The URLs of the project's avatars.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/avatarUrls`.
            public var avatarUrls: Components.Schemas.Project.avatarUrlsPayload?
            /// List of the components contained in the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/components`.
            public var components: [Components.Schemas.ProjectComponent]?
            /// Whether the project is marked as deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/deleted`.
            public var deleted: Swift.Bool?
            /// The user who marked the project as deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/deletedBy`.
            public struct deletedByPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/deletedBy/value1`.
                public var value1: Components.Schemas.User
                /// Creates a new `deletedByPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.User) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The user who marked the project as deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/deletedBy`.
            public var deletedBy: Components.Schemas.Project.deletedByPayload?
            /// The date when the project was marked as deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/deletedDate`.
            public var deletedDate: Foundation.Date?
            /// A brief description of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/description`.
            public var description: Swift.String?
            /// An email address associated with the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/email`.
            public var email: Swift.String?
            /// Expand options that include additional project details in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/expand`.
            public var expand: Swift.String?
            /// Whether the project is selected as a favorite.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/favourite`.
            public var favourite: Swift.Bool?
            /// The ID of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/id`.
            public var id: Swift.String?
            /// Insights about the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/insight`.
            public struct insightPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/insight/value1`.
                public var value1: Components.Schemas.ProjectInsight
                /// Creates a new `insightPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ProjectInsight) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Insights about the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/insight`.
            public var insight: Components.Schemas.Project.insightPayload?
            /// Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/isPrivate`.
            public var isPrivate: Swift.Bool?
            /// The issue type hierarchy for the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/issueTypeHierarchy`.
            public struct issueTypeHierarchyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/issueTypeHierarchy/value1`.
                public var value1: Components.Schemas.Hierarchy
                /// Creates a new `issueTypeHierarchyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Hierarchy) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The issue type hierarchy for the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/issueTypeHierarchy`.
            public var issueTypeHierarchy: Components.Schemas.Project.issueTypeHierarchyPayload?
            /// List of the issue types available in the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/issueTypes`.
            public var issueTypes: [Components.Schemas.IssueTypeDetails]?
            /// The key of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/key`.
            public var key: Swift.String?
            /// The project landing page info.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/landingPageInfo`.
            public struct landingPageInfoPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/landingPageInfo/value1`.
                public var value1: Components.Schemas.ProjectLandingPageInfo
                /// Creates a new `landingPageInfoPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ProjectLandingPageInfo) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The project landing page info.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/landingPageInfo`.
            public var landingPageInfo: Components.Schemas.Project.landingPageInfoPayload?
            /// The username of the project lead.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/lead`.
            public struct leadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/lead/value1`.
                public var value1: Components.Schemas.User
                /// Creates a new `leadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.User) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The username of the project lead.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/lead`.
            public var lead: Components.Schemas.Project.leadPayload?
            /// The name of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/name`.
            public var name: Swift.String?
            /// User permissions on the project
            ///
            /// - Remark: Generated from `#/components/schemas/Project/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/permissions/value1`.
                public var value1: Components.Schemas.ProjectPermissions
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ProjectPermissions) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// User permissions on the project
            ///
            /// - Remark: Generated from `#/components/schemas/Project/permissions`.
            public var permissions: Components.Schemas.Project.permissionsPayload?
            /// The category the project belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/projectCategory`.
            public struct projectCategoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Project/projectCategory/value1`.
                public var value1: Components.Schemas.ProjectCategory
                /// Creates a new `projectCategoryPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ProjectCategory) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The category the project belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/projectCategory`.
            public var projectCategory: Components.Schemas.Project.projectCategoryPayload?
            /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/projectTypeKey`.
            @frozen public enum projectTypeKeyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case software = "software"
                case service_desk = "service_desk"
                case business = "business"
            }
            /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/projectTypeKey`.
            public var projectTypeKey: Components.Schemas.Project.projectTypeKeyPayload?
            /// Map of project properties
            ///
            /// - Remark: Generated from `#/components/schemas/Project/properties`.
            public struct propertiesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `propertiesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Map of project properties
            ///
            /// - Remark: Generated from `#/components/schemas/Project/properties`.
            public var properties: Components.Schemas.Project.propertiesPayload?
            /// The date when the project is deleted permanently.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/retentionTillDate`.
            public var retentionTillDate: Foundation.Date?
            /// The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
            ///
            /// - Remark: Generated from `#/components/schemas/Project/roles`.
            public struct rolesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `rolesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
            ///
            /// - Remark: Generated from `#/components/schemas/Project/roles`.
            public var roles: Components.Schemas.Project.rolesPayload?
            /// The URL of the project details.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/self`.
            public var _self: Swift.String?
            /// Whether the project is simplified.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/simplified`.
            public var simplified: Swift.Bool?
            /// The type of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/style`.
            @frozen public enum stylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case classic = "classic"
                case next_hyphen_gen = "next-gen"
            }
            /// The type of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/style`.
            public var style: Components.Schemas.Project.stylePayload?
            /// A link to information about this project, such as project documentation.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/url`.
            public var url: Swift.String?
            /// Unique ID for next-gen projects.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/uuid`.
            public var uuid: Swift.String?
            /// The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
            ///
            /// - Remark: Generated from `#/components/schemas/Project/versions`.
            public var versions: [Components.Schemas.Version]?
            /// Creates a new `Project`.
            ///
            /// - Parameters:
            ///   - archived: Whether the project is archived.
            ///   - archivedBy: The user who archived the project.
            ///   - archivedDate: The date when the project was archived.
            ///   - assigneeType: The default assignee when creating issues for this project.
            ///   - avatarUrls: The URLs of the project's avatars.
            ///   - components: List of the components contained in the project.
            ///   - deleted: Whether the project is marked as deleted.
            ///   - deletedBy: The user who marked the project as deleted.
            ///   - deletedDate: The date when the project was marked as deleted.
            ///   - description: A brief description of the project.
            ///   - email: An email address associated with the project.
            ///   - expand: Expand options that include additional project details in the response.
            ///   - favourite: Whether the project is selected as a favorite.
            ///   - id: The ID of the project.
            ///   - insight: Insights about the project.
            ///   - isPrivate: Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.
            ///   - issueTypeHierarchy: The issue type hierarchy for the project.
            ///   - issueTypes: List of the issue types available in the project.
            ///   - key: The key of the project.
            ///   - landingPageInfo: The project landing page info.
            ///   - lead: The username of the project lead.
            ///   - name: The name of the project.
            ///   - permissions: User permissions on the project
            ///   - projectCategory: The category the project belongs to.
            ///   - projectTypeKey: The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
            ///   - properties: Map of project properties
            ///   - retentionTillDate: The date when the project is deleted permanently.
            ///   - roles: The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
            ///   - _self: The URL of the project details.
            ///   - simplified: Whether the project is simplified.
            ///   - style: The type of the project.
            ///   - url: A link to information about this project, such as project documentation.
            ///   - uuid: Unique ID for next-gen projects.
            ///   - versions: The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
            public init(
                archived: Swift.Bool? = nil,
                archivedBy: Components.Schemas.Project.archivedByPayload? = nil,
                archivedDate: Foundation.Date? = nil,
                assigneeType: Components.Schemas.Project.assigneeTypePayload? = nil,
                avatarUrls: Components.Schemas.Project.avatarUrlsPayload? = nil,
                components: [Components.Schemas.ProjectComponent]? = nil,
                deleted: Swift.Bool? = nil,
                deletedBy: Components.Schemas.Project.deletedByPayload? = nil,
                deletedDate: Foundation.Date? = nil,
                description: Swift.String? = nil,
                email: Swift.String? = nil,
                expand: Swift.String? = nil,
                favourite: Swift.Bool? = nil,
                id: Swift.String? = nil,
                insight: Components.Schemas.Project.insightPayload? = nil,
                isPrivate: Swift.Bool? = nil,
                issueTypeHierarchy: Components.Schemas.Project.issueTypeHierarchyPayload? = nil,
                issueTypes: [Components.Schemas.IssueTypeDetails]? = nil,
                key: Swift.String? = nil,
                landingPageInfo: Components.Schemas.Project.landingPageInfoPayload? = nil,
                lead: Components.Schemas.Project.leadPayload? = nil,
                name: Swift.String? = nil,
                permissions: Components.Schemas.Project.permissionsPayload? = nil,
                projectCategory: Components.Schemas.Project.projectCategoryPayload? = nil,
                projectTypeKey: Components.Schemas.Project.projectTypeKeyPayload? = nil,
                properties: Components.Schemas.Project.propertiesPayload? = nil,
                retentionTillDate: Foundation.Date? = nil,
                roles: Components.Schemas.Project.rolesPayload? = nil,
                _self: Swift.String? = nil,
                simplified: Swift.Bool? = nil,
                style: Components.Schemas.Project.stylePayload? = nil,
                url: Swift.String? = nil,
                uuid: Swift.String? = nil,
                versions: [Components.Schemas.Version]? = nil
            ) {
                self.archived = archived
                self.archivedBy = archivedBy
                self.archivedDate = archivedDate
                self.assigneeType = assigneeType
                self.avatarUrls = avatarUrls
                self.components = components
                self.deleted = deleted
                self.deletedBy = deletedBy
                self.deletedDate = deletedDate
                self.description = description
                self.email = email
                self.expand = expand
                self.favourite = favourite
                self.id = id
                self.insight = insight
                self.isPrivate = isPrivate
                self.issueTypeHierarchy = issueTypeHierarchy
                self.issueTypes = issueTypes
                self.key = key
                self.landingPageInfo = landingPageInfo
                self.lead = lead
                self.name = name
                self.permissions = permissions
                self.projectCategory = projectCategory
                self.projectTypeKey = projectTypeKey
                self.properties = properties
                self.retentionTillDate = retentionTillDate
                self.roles = roles
                self._self = _self
                self.simplified = simplified
                self.style = style
                self.url = url
                self.uuid = uuid
                self.versions = versions
            }
            public enum CodingKeys: String, CodingKey {
                case archived
                case archivedBy
                case archivedDate
                case assigneeType
                case avatarUrls
                case components
                case deleted
                case deletedBy
                case deletedDate
                case description
                case email
                case expand
                case favourite
                case id
                case insight
                case isPrivate
                case issueTypeHierarchy
                case issueTypes
                case key
                case landingPageInfo
                case lead
                case name
                case permissions
                case projectCategory
                case projectTypeKey
                case properties
                case retentionTillDate
                case roles
                case _self = "self"
                case simplified
                case style
                case url
                case uuid
                case versions
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                archived = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .archived
                )
                archivedBy = try container.decodeIfPresent(
                    Components.Schemas.Project.archivedByPayload.self,
                    forKey: .archivedBy
                )
                archivedDate = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .archivedDate
                )
                assigneeType = try container.decodeIfPresent(
                    Components.Schemas.Project.assigneeTypePayload.self,
                    forKey: .assigneeType
                )
                avatarUrls = try container.decodeIfPresent(
                    Components.Schemas.Project.avatarUrlsPayload.self,
                    forKey: .avatarUrls
                )
                components = try container.decodeIfPresent(
                    [Components.Schemas.ProjectComponent].self,
                    forKey: .components
                )
                deleted = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .deleted
                )
                deletedBy = try container.decodeIfPresent(
                    Components.Schemas.Project.deletedByPayload.self,
                    forKey: .deletedBy
                )
                deletedDate = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .deletedDate
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                email = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .email
                )
                expand = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .expand
                )
                favourite = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .favourite
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                insight = try container.decodeIfPresent(
                    Components.Schemas.Project.insightPayload.self,
                    forKey: .insight
                )
                isPrivate = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isPrivate
                )
                issueTypeHierarchy = try container.decodeIfPresent(
                    Components.Schemas.Project.issueTypeHierarchyPayload.self,
                    forKey: .issueTypeHierarchy
                )
                issueTypes = try container.decodeIfPresent(
                    [Components.Schemas.IssueTypeDetails].self,
                    forKey: .issueTypes
                )
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                landingPageInfo = try container.decodeIfPresent(
                    Components.Schemas.Project.landingPageInfoPayload.self,
                    forKey: .landingPageInfo
                )
                lead = try container.decodeIfPresent(
                    Components.Schemas.Project.leadPayload.self,
                    forKey: .lead
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                permissions = try container.decodeIfPresent(
                    Components.Schemas.Project.permissionsPayload.self,
                    forKey: .permissions
                )
                projectCategory = try container.decodeIfPresent(
                    Components.Schemas.Project.projectCategoryPayload.self,
                    forKey: .projectCategory
                )
                projectTypeKey = try container.decodeIfPresent(
                    Components.Schemas.Project.projectTypeKeyPayload.self,
                    forKey: .projectTypeKey
                )
                properties = try container.decodeIfPresent(
                    Components.Schemas.Project.propertiesPayload.self,
                    forKey: .properties
                )
                retentionTillDate = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .retentionTillDate
                )
                roles = try container.decodeIfPresent(
                    Components.Schemas.Project.rolesPayload.self,
                    forKey: .roles
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                simplified = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .simplified
                )
                style = try container.decodeIfPresent(
                    Components.Schemas.Project.stylePayload.self,
                    forKey: .style
                )
                url = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .url
                )
                uuid = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .uuid
                )
                versions = try container.decodeIfPresent(
                    [Components.Schemas.Version].self,
                    forKey: .versions
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "archived",
                    "archivedBy",
                    "archivedDate",
                    "assigneeType",
                    "avatarUrls",
                    "components",
                    "deleted",
                    "deletedBy",
                    "deletedDate",
                    "description",
                    "email",
                    "expand",
                    "favourite",
                    "id",
                    "insight",
                    "isPrivate",
                    "issueTypeHierarchy",
                    "issueTypes",
                    "key",
                    "landingPageInfo",
                    "lead",
                    "name",
                    "permissions",
                    "projectCategory",
                    "projectTypeKey",
                    "properties",
                    "retentionTillDate",
                    "roles",
                    "self",
                    "simplified",
                    "style",
                    "url",
                    "uuid",
                    "versions"
                ])
            }
        }
        /// A project category.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectCategory`.
        public struct ProjectCategory: Codable, Hashable, Sendable {
            /// The description of the project category.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectCategory/description`.
            public var description: Swift.String?
            /// The ID of the project category.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectCategory/id`.
            public var id: Swift.String?
            /// The name of the project category. Required on create, optional on update.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectCategory/name`.
            public var name: Swift.String?
            /// The URL of the project category.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectCategory/self`.
            public var _self: Swift.String?
            /// Creates a new `ProjectCategory`.
            ///
            /// - Parameters:
            ///   - description: The description of the project category.
            ///   - id: The ID of the project category.
            ///   - name: The name of the project category. Required on create, optional on update.
            ///   - _self: The URL of the project category.
            public init(
                description: Swift.String? = nil,
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                _self: Swift.String? = nil
            ) {
                self.description = description
                self.id = id
                self.name = name
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case id
                case name
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "description",
                    "id",
                    "name",
                    "self"
                ])
            }
        }
        /// Details about a project component.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectComponent`.
        public struct ProjectComponent: Codable, Hashable, Sendable {
            /// Compass component's ID. Can't be updated. Not required for creating a Project Component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/ari`.
            public var ari: Swift.String?
            /// The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/assignee`.
            public struct assigneePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProjectComponent/assignee/value1`.
                public var value1: Components.Schemas.User
                /// Creates a new `assigneePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.User) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/assignee`.
            public var assignee: Components.Schemas.ProjectComponent.assigneePayload?
            /// The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
            ///
            ///  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
            ///  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
            ///  *  `UNASSIGNED` an assignee is not set for issues created with this component.
            ///  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
            ///
            /// Default value: `PROJECT_DEFAULT`.  
            /// Optional when creating or updating a component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/assigneeType`.
            @frozen public enum assigneeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case PROJECT_DEFAULT = "PROJECT_DEFAULT"
                case COMPONENT_LEAD = "COMPONENT_LEAD"
                case PROJECT_LEAD = "PROJECT_LEAD"
                case UNASSIGNED = "UNASSIGNED"
            }
            /// The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
            ///
            ///  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
            ///  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
            ///  *  `UNASSIGNED` an assignee is not set for issues created with this component.
            ///  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
            ///
            /// Default value: `PROJECT_DEFAULT`.  
            /// Optional when creating or updating a component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/assigneeType`.
            public var assigneeType: Components.Schemas.ProjectComponent.assigneeTypePayload?
            /// The description for the component. Optional when creating or updating a component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/description`.
            public var description: Swift.String?
            /// The unique identifier for the component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/id`.
            public var id: Swift.String?
            /// Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/isAssigneeTypeValid`.
            public var isAssigneeTypeValid: Swift.Bool?
            /// The user details for the component's lead user.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/lead`.
            public struct leadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProjectComponent/lead/value1`.
                public var value1: Components.Schemas.User
                /// Creates a new `leadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.User) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The user details for the component's lead user.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/lead`.
            public var lead: Components.Schemas.ProjectComponent.leadPayload?
            /// The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/leadAccountId`.
            public var leadAccountId: Swift.String?
            /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/leadUserName`.
            public var leadUserName: Swift.String?
            /// Compass component's metadata. Can't be updated. Not required for creating a Project Component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Compass component's metadata. Can't be updated. Not required for creating a Project Component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/metadata`.
            public var metadata: Components.Schemas.ProjectComponent.metadataPayload?
            /// The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/name`.
            public var name: Swift.String?
            /// The key of the project the component is assigned to. Required when creating a component. Can't be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/project`.
            public var project: Swift.String?
            /// The ID of the project the component is assigned to.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/projectId`.
            public var projectId: Swift.Int64?
            /// The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/realAssignee`.
            public struct realAssigneePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProjectComponent/realAssignee/value1`.
                public var value1: Components.Schemas.User
                /// Creates a new `realAssigneePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.User) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/realAssignee`.
            public var realAssignee: Components.Schemas.ProjectComponent.realAssigneePayload?
            /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
            ///
            ///  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
            ///  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
            ///  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
            ///  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/realAssigneeType`.
            @frozen public enum realAssigneeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case PROJECT_DEFAULT = "PROJECT_DEFAULT"
                case COMPONENT_LEAD = "COMPONENT_LEAD"
                case PROJECT_LEAD = "PROJECT_LEAD"
                case UNASSIGNED = "UNASSIGNED"
            }
            /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
            ///
            ///  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
            ///  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
            ///  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
            ///  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/realAssigneeType`.
            public var realAssigneeType: Components.Schemas.ProjectComponent.realAssigneeTypePayload?
            /// The URL of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectComponent/self`.
            public var _self: Swift.String?
            /// Creates a new `ProjectComponent`.
            ///
            /// - Parameters:
            ///   - ari: Compass component's ID. Can't be updated. Not required for creating a Project Component.
            ///   - assignee: The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
            ///   - assigneeType: The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
            ///   - description: The description for the component. Optional when creating or updating a component.
            ///   - id: The unique identifier for the component.
            ///   - isAssigneeTypeValid: Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
            ///   - lead: The user details for the component's lead user.
            ///   - leadAccountId: The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            ///   - leadUserName: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///   - metadata: Compass component's metadata. Can't be updated. Not required for creating a Project Component.
            ///   - name: The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
            ///   - project: The key of the project the component is assigned to. Required when creating a component. Can't be updated.
            ///   - projectId: The ID of the project the component is assigned to.
            ///   - realAssignee: The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
            ///   - realAssigneeType: The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
            ///   - _self: The URL of the component.
            public init(
                ari: Swift.String? = nil,
                assignee: Components.Schemas.ProjectComponent.assigneePayload? = nil,
                assigneeType: Components.Schemas.ProjectComponent.assigneeTypePayload? = nil,
                description: Swift.String? = nil,
                id: Swift.String? = nil,
                isAssigneeTypeValid: Swift.Bool? = nil,
                lead: Components.Schemas.ProjectComponent.leadPayload? = nil,
                leadAccountId: Swift.String? = nil,
                leadUserName: Swift.String? = nil,
                metadata: Components.Schemas.ProjectComponent.metadataPayload? = nil,
                name: Swift.String? = nil,
                project: Swift.String? = nil,
                projectId: Swift.Int64? = nil,
                realAssignee: Components.Schemas.ProjectComponent.realAssigneePayload? = nil,
                realAssigneeType: Components.Schemas.ProjectComponent.realAssigneeTypePayload? = nil,
                _self: Swift.String? = nil
            ) {
                self.ari = ari
                self.assignee = assignee
                self.assigneeType = assigneeType
                self.description = description
                self.id = id
                self.isAssigneeTypeValid = isAssigneeTypeValid
                self.lead = lead
                self.leadAccountId = leadAccountId
                self.leadUserName = leadUserName
                self.metadata = metadata
                self.name = name
                self.project = project
                self.projectId = projectId
                self.realAssignee = realAssignee
                self.realAssigneeType = realAssigneeType
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case ari
                case assignee
                case assigneeType
                case description
                case id
                case isAssigneeTypeValid
                case lead
                case leadAccountId
                case leadUserName
                case metadata
                case name
                case project
                case projectId
                case realAssignee
                case realAssigneeType
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ari = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .ari
                )
                assignee = try container.decodeIfPresent(
                    Components.Schemas.ProjectComponent.assigneePayload.self,
                    forKey: .assignee
                )
                assigneeType = try container.decodeIfPresent(
                    Components.Schemas.ProjectComponent.assigneeTypePayload.self,
                    forKey: .assigneeType
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                isAssigneeTypeValid = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .isAssigneeTypeValid
                )
                lead = try container.decodeIfPresent(
                    Components.Schemas.ProjectComponent.leadPayload.self,
                    forKey: .lead
                )
                leadAccountId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .leadAccountId
                )
                leadUserName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .leadUserName
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.ProjectComponent.metadataPayload.self,
                    forKey: .metadata
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                project = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .project
                )
                projectId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .projectId
                )
                realAssignee = try container.decodeIfPresent(
                    Components.Schemas.ProjectComponent.realAssigneePayload.self,
                    forKey: .realAssignee
                )
                realAssigneeType = try container.decodeIfPresent(
                    Components.Schemas.ProjectComponent.realAssigneeTypePayload.self,
                    forKey: .realAssigneeType
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ari",
                    "assignee",
                    "assigneeType",
                    "description",
                    "id",
                    "isAssigneeTypeValid",
                    "lead",
                    "leadAccountId",
                    "leadUserName",
                    "metadata",
                    "name",
                    "project",
                    "projectId",
                    "realAssignee",
                    "realAssigneeType",
                    "self"
                ])
            }
        }
        /// Details about a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectDetails`.
        public struct ProjectDetails: Codable, Hashable, Sendable {
            /// The URLs of the project's avatars.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/avatarUrls`.
            public struct avatarUrlsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProjectDetails/avatarUrls/value1`.
                public var value1: Components.Schemas.AvatarUrlsBean
                /// Creates a new `avatarUrlsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AvatarUrlsBean) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The URLs of the project's avatars.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/avatarUrls`.
            public var avatarUrls: Components.Schemas.ProjectDetails.avatarUrlsPayload?
            /// The ID of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/id`.
            public var id: Swift.String?
            /// The key of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/key`.
            public var key: Swift.String?
            /// The name of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/name`.
            public var name: Swift.String?
            /// The category the project belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/projectCategory`.
            public struct projectCategoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ProjectDetails/projectCategory/value1`.
                public var value1: Components.Schemas.UpdatedProjectCategory
                /// Creates a new `projectCategoryPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.UpdatedProjectCategory) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The category the project belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/projectCategory`.
            public var projectCategory: Components.Schemas.ProjectDetails.projectCategoryPayload?
            /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/projectTypeKey`.
            @frozen public enum projectTypeKeyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case software = "software"
                case service_desk = "service_desk"
                case business = "business"
            }
            /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/projectTypeKey`.
            public var projectTypeKey: Components.Schemas.ProjectDetails.projectTypeKeyPayload?
            /// The URL of the project details.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/self`.
            public var _self: Swift.String?
            /// Whether or not the project is simplified.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectDetails/simplified`.
            public var simplified: Swift.Bool?
            /// Creates a new `ProjectDetails`.
            ///
            /// - Parameters:
            ///   - avatarUrls: The URLs of the project's avatars.
            ///   - id: The ID of the project.
            ///   - key: The key of the project.
            ///   - name: The name of the project.
            ///   - projectCategory: The category the project belongs to.
            ///   - projectTypeKey: The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
            ///   - _self: The URL of the project details.
            ///   - simplified: Whether or not the project is simplified.
            public init(
                avatarUrls: Components.Schemas.ProjectDetails.avatarUrlsPayload? = nil,
                id: Swift.String? = nil,
                key: Swift.String? = nil,
                name: Swift.String? = nil,
                projectCategory: Components.Schemas.ProjectDetails.projectCategoryPayload? = nil,
                projectTypeKey: Components.Schemas.ProjectDetails.projectTypeKeyPayload? = nil,
                _self: Swift.String? = nil,
                simplified: Swift.Bool? = nil
            ) {
                self.avatarUrls = avatarUrls
                self.id = id
                self.key = key
                self.name = name
                self.projectCategory = projectCategory
                self.projectTypeKey = projectTypeKey
                self._self = _self
                self.simplified = simplified
            }
            public enum CodingKeys: String, CodingKey {
                case avatarUrls
                case id
                case key
                case name
                case projectCategory
                case projectTypeKey
                case _self = "self"
                case simplified
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                avatarUrls = try container.decodeIfPresent(
                    Components.Schemas.ProjectDetails.avatarUrlsPayload.self,
                    forKey: .avatarUrls
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                projectCategory = try container.decodeIfPresent(
                    Components.Schemas.ProjectDetails.projectCategoryPayload.self,
                    forKey: .projectCategory
                )
                projectTypeKey = try container.decodeIfPresent(
                    Components.Schemas.ProjectDetails.projectTypeKeyPayload.self,
                    forKey: .projectTypeKey
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                simplified = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .simplified
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "avatarUrls",
                    "id",
                    "key",
                    "name",
                    "projectCategory",
                    "projectTypeKey",
                    "self",
                    "simplified"
                ])
            }
        }
        /// Identifiers for a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectIdentifiers`.
        public struct ProjectIdentifiers: Codable, Hashable, Sendable {
            /// The ID of the created project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectIdentifiers/id`.
            public var id: Swift.Int64
            /// The key of the created project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectIdentifiers/key`.
            public var key: Swift.String
            /// The URL of the created project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectIdentifiers/self`.
            public var _self: Swift.String
            /// Creates a new `ProjectIdentifiers`.
            ///
            /// - Parameters:
            ///   - id: The ID of the created project.
            ///   - key: The key of the created project.
            ///   - _self: The URL of the created project.
            public init(
                id: Swift.Int64,
                key: Swift.String,
                _self: Swift.String
            ) {
                self.id = id
                self.key = key
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case key
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                id = try container.decode(
                    Swift.Int64.self,
                    forKey: .id
                )
                key = try container.decode(
                    Swift.String.self,
                    forKey: .key
                )
                _self = try container.decode(
                    Swift.String.self,
                    forKey: ._self
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "id",
                    "key",
                    "self"
                ])
            }
        }
        /// Additional details about a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectInsight`.
        public struct ProjectInsight: Codable, Hashable, Sendable {
            /// The last issue update time.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectInsight/lastIssueUpdateTime`.
            public var lastIssueUpdateTime: Foundation.Date?
            /// Total issue count.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectInsight/totalIssueCount`.
            public var totalIssueCount: Swift.Int64?
            /// Creates a new `ProjectInsight`.
            ///
            /// - Parameters:
            ///   - lastIssueUpdateTime: The last issue update time.
            ///   - totalIssueCount: Total issue count.
            public init(
                lastIssueUpdateTime: Foundation.Date? = nil,
                totalIssueCount: Swift.Int64? = nil
            ) {
                self.lastIssueUpdateTime = lastIssueUpdateTime
                self.totalIssueCount = totalIssueCount
            }
            public enum CodingKeys: String, CodingKey {
                case lastIssueUpdateTime
                case totalIssueCount
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                lastIssueUpdateTime = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .lastIssueUpdateTime
                )
                totalIssueCount = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .totalIssueCount
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "lastIssueUpdateTime",
                    "totalIssueCount"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo`.
        public struct ProjectLandingPageInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/attributes`.
            public struct attributesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `attributesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/attributes`.
            public var attributes: Components.Schemas.ProjectLandingPageInfo.attributesPayload?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/boardId`.
            public var boardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/boardName`.
            public var boardName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/projectKey`.
            public var projectKey: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/projectType`.
            public var projectType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/queueCategory`.
            public var queueCategory: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/queueId`.
            public var queueId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/queueName`.
            public var queueName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/simpleBoard`.
            public var simpleBoard: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/simplified`.
            public var simplified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ProjectLandingPageInfo/url`.
            public var url: Swift.String?
            /// Creates a new `ProjectLandingPageInfo`.
            ///
            /// - Parameters:
            ///   - attributes:
            ///   - boardId:
            ///   - boardName:
            ///   - projectKey:
            ///   - projectType:
            ///   - queueCategory:
            ///   - queueId:
            ///   - queueName:
            ///   - simpleBoard:
            ///   - simplified:
            ///   - url:
            public init(
                attributes: Components.Schemas.ProjectLandingPageInfo.attributesPayload? = nil,
                boardId: Swift.Int64? = nil,
                boardName: Swift.String? = nil,
                projectKey: Swift.String? = nil,
                projectType: Swift.String? = nil,
                queueCategory: Swift.String? = nil,
                queueId: Swift.Int64? = nil,
                queueName: Swift.String? = nil,
                simpleBoard: Swift.Bool? = nil,
                simplified: Swift.Bool? = nil,
                url: Swift.String? = nil
            ) {
                self.attributes = attributes
                self.boardId = boardId
                self.boardName = boardName
                self.projectKey = projectKey
                self.projectType = projectType
                self.queueCategory = queueCategory
                self.queueId = queueId
                self.queueName = queueName
                self.simpleBoard = simpleBoard
                self.simplified = simplified
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case attributes
                case boardId
                case boardName
                case projectKey
                case projectType
                case queueCategory
                case queueId
                case queueName
                case simpleBoard
                case simplified
                case url
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                attributes = try container.decodeIfPresent(
                    Components.Schemas.ProjectLandingPageInfo.attributesPayload.self,
                    forKey: .attributes
                )
                boardId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .boardId
                )
                boardName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .boardName
                )
                projectKey = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .projectKey
                )
                projectType = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .projectType
                )
                queueCategory = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .queueCategory
                )
                queueId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .queueId
                )
                queueName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .queueName
                )
                simpleBoard = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .simpleBoard
                )
                simplified = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .simplified
                )
                url = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .url
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "attributes",
                    "boardId",
                    "boardName",
                    "projectKey",
                    "projectType",
                    "queueCategory",
                    "queueId",
                    "queueName",
                    "simpleBoard",
                    "simplified",
                    "url"
                ])
            }
        }
        /// Permissions which a user has on a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectPermissions`.
        public struct ProjectPermissions: Codable, Hashable, Sendable {
            /// Whether the logged user can edit the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectPermissions/canEdit`.
            public var canEdit: Swift.Bool?
            /// Creates a new `ProjectPermissions`.
            ///
            /// - Parameters:
            ///   - canEdit: Whether the logged user can edit the project.
            public init(canEdit: Swift.Bool? = nil) {
                self.canEdit = canEdit
            }
            public enum CodingKeys: String, CodingKey {
                case canEdit
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                canEdit = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .canEdit
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "canEdit"
                ])
            }
        }
        /// The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
        ///
        /// - Remark: Generated from `#/components/schemas/Scope`.
        public struct Scope: Codable, Hashable, Sendable {
            /// The project the item has scope in.
            ///
            /// - Remark: Generated from `#/components/schemas/Scope/project`.
            public struct projectPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Scope/project/value1`.
                public var value1: Components.Schemas.ProjectDetails
                /// Creates a new `projectPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ProjectDetails) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The project the item has scope in.
            ///
            /// - Remark: Generated from `#/components/schemas/Scope/project`.
            public var project: Components.Schemas.Scope.projectPayload?
            /// The type of scope.
            ///
            /// - Remark: Generated from `#/components/schemas/Scope/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case PROJECT = "PROJECT"
                case TEMPLATE = "TEMPLATE"
            }
            /// The type of scope.
            ///
            /// - Remark: Generated from `#/components/schemas/Scope/type`.
            public var _type: Components.Schemas.Scope._typePayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `Scope`.
            ///
            /// - Parameters:
            ///   - project: The project the item has scope in.
            ///   - _type: The type of scope.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                project: Components.Schemas.Scope.projectPayload? = nil,
                _type: Components.Schemas.Scope._typePayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.project = project
                self._type = _type
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case project
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                project = try container.decodeIfPresent(
                    Components.Schemas.Scope.projectPayload.self,
                    forKey: .project
                )
                _type = try container.decodeIfPresent(
                    Components.Schemas.Scope._typePayload.self,
                    forKey: ._type
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "project",
                    "type"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    project,
                    forKey: .project
                )
                try container.encodeIfPresent(
                    _type,
                    forKey: ._type
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Details of how to filter and list search auto complete information.
        ///
        /// - Remark: Generated from `#/components/schemas/SearchAutoCompleteFilter`.
        public struct SearchAutoCompleteFilter: Codable, Hashable, Sendable {
            /// Include collapsed fields for fields that have non-unique names.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchAutoCompleteFilter/includeCollapsedFields`.
            public var includeCollapsedFields: Swift.Bool?
            /// List of project IDs used to filter the visible field details returned.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchAutoCompleteFilter/projectIds`.
            public var projectIds: [Swift.Int64]?
            /// Creates a new `SearchAutoCompleteFilter`.
            ///
            /// - Parameters:
            ///   - includeCollapsedFields: Include collapsed fields for fields that have non-unique names.
            ///   - projectIds: List of project IDs used to filter the visible field details returned.
            public init(
                includeCollapsedFields: Swift.Bool? = nil,
                projectIds: [Swift.Int64]? = nil
            ) {
                self.includeCollapsedFields = includeCollapsedFields
                self.projectIds = projectIds
            }
            public enum CodingKeys: String, CodingKey {
                case includeCollapsedFields
                case projectIds
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                includeCollapsedFields = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .includeCollapsedFields
                )
                projectIds = try container.decodeIfPresent(
                    [Swift.Int64].self,
                    forKey: .projectIds
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "includeCollapsedFields",
                    "projectIds"
                ])
            }
        }
        /// Details about the operations available in this version.
        ///
        /// - Remark: Generated from `#/components/schemas/SimpleLink`.
        public struct SimpleLink: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SimpleLink/href`.
            public var href: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimpleLink/iconClass`.
            public var iconClass: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimpleLink/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimpleLink/label`.
            public var label: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimpleLink/styleClass`.
            public var styleClass: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimpleLink/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimpleLink/weight`.
            public var weight: Swift.Int32?
            /// Creates a new `SimpleLink`.
            ///
            /// - Parameters:
            ///   - href:
            ///   - iconClass:
            ///   - id:
            ///   - label:
            ///   - styleClass:
            ///   - title:
            ///   - weight:
            public init(
                href: Swift.String? = nil,
                iconClass: Swift.String? = nil,
                id: Swift.String? = nil,
                label: Swift.String? = nil,
                styleClass: Swift.String? = nil,
                title: Swift.String? = nil,
                weight: Swift.Int32? = nil
            ) {
                self.href = href
                self.iconClass = iconClass
                self.id = id
                self.label = label
                self.styleClass = styleClass
                self.title = title
                self.weight = weight
            }
            public enum CodingKeys: String, CodingKey {
                case href
                case iconClass
                case id
                case label
                case styleClass
                case title
                case weight
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                href = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .href
                )
                iconClass = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .iconClass
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                label = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .label
                )
                styleClass = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .styleClass
                )
                title = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .title
                )
                weight = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .weight
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "href",
                    "iconClass",
                    "id",
                    "label",
                    "styleClass",
                    "title",
                    "weight"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/SimpleListWrapperApplicationRole`.
        public struct SimpleListWrapperApplicationRole: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperApplicationRole/callback`.
            public var callback: Components.Schemas.ListWrapperCallbackApplicationRole?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperApplicationRole/items`.
            public var items: [Components.Schemas.ApplicationRole]?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperApplicationRole/max-results`.
            public var max_hyphen_results: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperApplicationRole/pagingCallback`.
            public var pagingCallback: Components.Schemas.ListWrapperCallbackApplicationRole?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperApplicationRole/size`.
            public var size: Swift.Int32?
            /// Creates a new `SimpleListWrapperApplicationRole`.
            ///
            /// - Parameters:
            ///   - callback:
            ///   - items:
            ///   - max_hyphen_results:
            ///   - pagingCallback:
            ///   - size:
            public init(
                callback: Components.Schemas.ListWrapperCallbackApplicationRole? = nil,
                items: [Components.Schemas.ApplicationRole]? = nil,
                max_hyphen_results: Swift.Int32? = nil,
                pagingCallback: Components.Schemas.ListWrapperCallbackApplicationRole? = nil,
                size: Swift.Int32? = nil
            ) {
                self.callback = callback
                self.items = items
                self.max_hyphen_results = max_hyphen_results
                self.pagingCallback = pagingCallback
                self.size = size
            }
            public enum CodingKeys: String, CodingKey {
                case callback
                case items
                case max_hyphen_results = "max-results"
                case pagingCallback
                case size
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                callback = try container.decodeIfPresent(
                    Components.Schemas.ListWrapperCallbackApplicationRole.self,
                    forKey: .callback
                )
                items = try container.decodeIfPresent(
                    [Components.Schemas.ApplicationRole].self,
                    forKey: .items
                )
                max_hyphen_results = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .max_hyphen_results
                )
                pagingCallback = try container.decodeIfPresent(
                    Components.Schemas.ListWrapperCallbackApplicationRole.self,
                    forKey: .pagingCallback
                )
                size = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .size
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "callback",
                    "items",
                    "max-results",
                    "pagingCallback",
                    "size"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/SimpleListWrapperGroupName`.
        public struct SimpleListWrapperGroupName: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperGroupName/callback`.
            public var callback: Components.Schemas.ListWrapperCallbackGroupName?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperGroupName/items`.
            public var items: [Components.Schemas.GroupName]?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperGroupName/max-results`.
            public var max_hyphen_results: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperGroupName/pagingCallback`.
            public var pagingCallback: Components.Schemas.ListWrapperCallbackGroupName?
            /// - Remark: Generated from `#/components/schemas/SimpleListWrapperGroupName/size`.
            public var size: Swift.Int32?
            /// Creates a new `SimpleListWrapperGroupName`.
            ///
            /// - Parameters:
            ///   - callback:
            ///   - items:
            ///   - max_hyphen_results:
            ///   - pagingCallback:
            ///   - size:
            public init(
                callback: Components.Schemas.ListWrapperCallbackGroupName? = nil,
                items: [Components.Schemas.GroupName]? = nil,
                max_hyphen_results: Swift.Int32? = nil,
                pagingCallback: Components.Schemas.ListWrapperCallbackGroupName? = nil,
                size: Swift.Int32? = nil
            ) {
                self.callback = callback
                self.items = items
                self.max_hyphen_results = max_hyphen_results
                self.pagingCallback = pagingCallback
                self.size = size
            }
            public enum CodingKeys: String, CodingKey {
                case callback
                case items
                case max_hyphen_results = "max-results"
                case pagingCallback
                case size
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                callback = try container.decodeIfPresent(
                    Components.Schemas.ListWrapperCallbackGroupName.self,
                    forKey: .callback
                )
                items = try container.decodeIfPresent(
                    [Components.Schemas.GroupName].self,
                    forKey: .items
                )
                max_hyphen_results = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .max_hyphen_results
                )
                pagingCallback = try container.decodeIfPresent(
                    Components.Schemas.ListWrapperCallbackGroupName.self,
                    forKey: .pagingCallback
                )
                size = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .size
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "callback",
                    "items",
                    "max-results",
                    "pagingCallback",
                    "size"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel`.
        public struct SimplifiedHierarchyLevel: Codable, Hashable, Sendable {
            /// The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/aboveLevelId`.
            public var aboveLevelId: Swift.Int64?
            /// The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/belowLevelId`.
            public var belowLevelId: Swift.Int64?
            /// The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/externalUuid`.
            public var externalUuid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/hierarchyLevelNumber`.
            public var hierarchyLevelNumber: Swift.Int32?
            /// The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/id`.
            public var id: Swift.Int64?
            /// The issue types available in this hierarchy level.
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/issueTypeIds`.
            public var issueTypeIds: [Swift.Int64]?
            /// The level of this item in the hierarchy.
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/level`.
            public var level: Swift.Int32?
            /// The name of this hierarchy level.
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/name`.
            public var name: Swift.String?
            /// The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///
            /// - Remark: Generated from `#/components/schemas/SimplifiedHierarchyLevel/projectConfigurationId`.
            public var projectConfigurationId: Swift.Int64?
            /// Creates a new `SimplifiedHierarchyLevel`.
            ///
            /// - Parameters:
            ///   - aboveLevelId: The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///   - belowLevelId: The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///   - externalUuid: The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///   - hierarchyLevelNumber:
            ///   - id: The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            ///   - issueTypeIds: The issue types available in this hierarchy level.
            ///   - level: The level of this item in the hierarchy.
            ///   - name: The name of this hierarchy level.
            ///   - projectConfigurationId: The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
            public init(
                aboveLevelId: Swift.Int64? = nil,
                belowLevelId: Swift.Int64? = nil,
                externalUuid: Swift.String? = nil,
                hierarchyLevelNumber: Swift.Int32? = nil,
                id: Swift.Int64? = nil,
                issueTypeIds: [Swift.Int64]? = nil,
                level: Swift.Int32? = nil,
                name: Swift.String? = nil,
                projectConfigurationId: Swift.Int64? = nil
            ) {
                self.aboveLevelId = aboveLevelId
                self.belowLevelId = belowLevelId
                self.externalUuid = externalUuid
                self.hierarchyLevelNumber = hierarchyLevelNumber
                self.id = id
                self.issueTypeIds = issueTypeIds
                self.level = level
                self.name = name
                self.projectConfigurationId = projectConfigurationId
            }
            public enum CodingKeys: String, CodingKey {
                case aboveLevelId
                case belowLevelId
                case externalUuid
                case hierarchyLevelNumber
                case id
                case issueTypeIds
                case level
                case name
                case projectConfigurationId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                aboveLevelId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .aboveLevelId
                )
                belowLevelId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .belowLevelId
                )
                externalUuid = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .externalUuid
                )
                hierarchyLevelNumber = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .hierarchyLevelNumber
                )
                id = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .id
                )
                issueTypeIds = try container.decodeIfPresent(
                    [Swift.Int64].self,
                    forKey: .issueTypeIds
                )
                level = try container.decodeIfPresent(
                    Swift.Int32.self,
                    forKey: .level
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                projectConfigurationId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .projectConfigurationId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "aboveLevelId",
                    "belowLevelId",
                    "externalUuid",
                    "hierarchyLevelNumber",
                    "id",
                    "issueTypeIds",
                    "level",
                    "name",
                    "projectConfigurationId"
                ])
            }
        }
        /// A status category.
        ///
        /// - Remark: Generated from `#/components/schemas/StatusCategory`.
        public struct StatusCategory: Codable, Hashable, Sendable {
            /// The name of the color used to represent the status category.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusCategory/colorName`.
            public var colorName: Swift.String?
            /// The ID of the status category.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusCategory/id`.
            public var id: Swift.Int64?
            /// The key of the status category.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusCategory/key`.
            public var key: Swift.String?
            /// The name of the status category.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusCategory/name`.
            public var name: Swift.String?
            /// The URL of the status category.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusCategory/self`.
            public var _self: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `StatusCategory`.
            ///
            /// - Parameters:
            ///   - colorName: The name of the color used to represent the status category.
            ///   - id: The ID of the status category.
            ///   - key: The key of the status category.
            ///   - name: The name of the status category.
            ///   - _self: The URL of the status category.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                colorName: Swift.String? = nil,
                id: Swift.Int64? = nil,
                key: Swift.String? = nil,
                name: Swift.String? = nil,
                _self: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.colorName = colorName
                self.id = id
                self.key = key
                self.name = name
                self._self = _self
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case colorName
                case id
                case key
                case name
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                colorName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .colorName
                )
                id = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .id
                )
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "colorName",
                    "id",
                    "key",
                    "name",
                    "self"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    colorName,
                    forKey: .colorName
                )
                try container.encodeIfPresent(
                    id,
                    forKey: .id
                )
                try container.encodeIfPresent(
                    key,
                    forKey: .key
                )
                try container.encodeIfPresent(
                    name,
                    forKey: .name
                )
                try container.encodeIfPresent(
                    _self,
                    forKey: ._self
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// A status.
        ///
        /// - Remark: Generated from `#/components/schemas/StatusDetails`.
        public struct StatusDetails: Codable, Hashable, Sendable {
            /// The description of the status.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/description`.
            public var description: Swift.String?
            /// The URL of the icon used to represent the status.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/iconUrl`.
            public var iconUrl: Swift.String?
            /// The ID of the status.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/id`.
            public var id: Swift.String?
            /// The name of the status.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/name`.
            public var name: Swift.String?
            /// The scope of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/scope`.
            public struct scopePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StatusDetails/scope/value1`.
                public var value1: Components.Schemas.Scope
                /// Creates a new `scopePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Scope) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The scope of the field.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/scope`.
            public var scope: Components.Schemas.StatusDetails.scopePayload?
            /// The URL of the status.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/self`.
            public var _self: Swift.String?
            /// The category assigned to the status.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/statusCategory`.
            public struct statusCategoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StatusDetails/statusCategory/value1`.
                public var value1: Components.Schemas.StatusCategory
                /// Creates a new `statusCategoryPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.StatusCategory) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The category assigned to the status.
            ///
            /// - Remark: Generated from `#/components/schemas/StatusDetails/statusCategory`.
            public var statusCategory: Components.Schemas.StatusDetails.statusCategoryPayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `StatusDetails`.
            ///
            /// - Parameters:
            ///   - description: The description of the status.
            ///   - iconUrl: The URL of the icon used to represent the status.
            ///   - id: The ID of the status.
            ///   - name: The name of the status.
            ///   - scope: The scope of the field.
            ///   - _self: The URL of the status.
            ///   - statusCategory: The category assigned to the status.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                description: Swift.String? = nil,
                iconUrl: Swift.String? = nil,
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                scope: Components.Schemas.StatusDetails.scopePayload? = nil,
                _self: Swift.String? = nil,
                statusCategory: Components.Schemas.StatusDetails.statusCategoryPayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.description = description
                self.iconUrl = iconUrl
                self.id = id
                self.name = name
                self.scope = scope
                self._self = _self
                self.statusCategory = statusCategory
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case iconUrl
                case id
                case name
                case scope
                case _self = "self"
                case statusCategory
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                iconUrl = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .iconUrl
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                scope = try container.decodeIfPresent(
                    Components.Schemas.StatusDetails.scopePayload.self,
                    forKey: .scope
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                statusCategory = try container.decodeIfPresent(
                    Components.Schemas.StatusDetails.statusCategoryPayload.self,
                    forKey: .statusCategory
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "description",
                    "iconUrl",
                    "id",
                    "name",
                    "scope",
                    "self",
                    "statusCategory"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    description,
                    forKey: .description
                )
                try container.encodeIfPresent(
                    iconUrl,
                    forKey: .iconUrl
                )
                try container.encodeIfPresent(
                    id,
                    forKey: .id
                )
                try container.encodeIfPresent(
                    name,
                    forKey: .name
                )
                try container.encodeIfPresent(
                    scope,
                    forKey: .scope
                )
                try container.encodeIfPresent(
                    _self,
                    forKey: ._self
                )
                try container.encodeIfPresent(
                    statusCategory,
                    forKey: .statusCategory
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubmittedBulkOperation`.
        public struct SubmittedBulkOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubmittedBulkOperation/taskId`.
            public var taskId: Swift.String?
            /// Creates a new `SubmittedBulkOperation`.
            ///
            /// - Parameters:
            ///   - taskId:
            public init(taskId: Swift.String? = nil) {
                self.taskId = taskId
            }
            public enum CodingKeys: String, CodingKey {
                case taskId
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                taskId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .taskId
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "taskId"
                ])
            }
        }
        /// Details about a task.
        ///
        /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode`.
        public struct TaskProgressBeanJsonNode: Codable, Hashable, Sendable {
            /// The description of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/description`.
            public var description: Swift.String?
            /// The execution time of the task, in milliseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/elapsedRuntime`.
            public var elapsedRuntime: Swift.Int64
            /// A timestamp recording when the task was finished.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/finished`.
            public var finished: Swift.Int64?
            /// The ID of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/id`.
            public var id: Swift.String
            /// A timestamp recording when the task progress was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/lastUpdate`.
            public var lastUpdate: Swift.Int64
            /// Information about the progress of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/message`.
            public var message: Swift.String?
            /// The progress of the task, as a percentage complete.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/progress`.
            public var progress: Swift.Int64
            /// The result of the task execution.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/result`.
            public struct resultPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/result/value1`.
                public var value1: Components.Schemas.JsonNode
                /// Creates a new `resultPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.JsonNode) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The result of the task execution.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/result`.
            public var result: Components.Schemas.TaskProgressBeanJsonNode.resultPayload?
            /// The URL of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/self`.
            public var _self: Swift.String
            /// A timestamp recording when the task was started.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/started`.
            public var started: Swift.Int64?
            /// The status of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ENQUEUED = "ENQUEUED"
                case RUNNING = "RUNNING"
                case COMPLETE = "COMPLETE"
                case FAILED = "FAILED"
                case CANCEL_REQUESTED = "CANCEL_REQUESTED"
                case CANCELLED = "CANCELLED"
                case DEAD = "DEAD"
            }
            /// The status of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/status`.
            public var status: Components.Schemas.TaskProgressBeanJsonNode.statusPayload
            /// A timestamp recording when the task was submitted.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/submitted`.
            public var submitted: Swift.Int64
            /// The ID of the user who submitted the task.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskProgressBeanJsonNode/submittedBy`.
            public var submittedBy: Swift.Int64
            /// Creates a new `TaskProgressBeanJsonNode`.
            ///
            /// - Parameters:
            ///   - description: The description of the task.
            ///   - elapsedRuntime: The execution time of the task, in milliseconds.
            ///   - finished: A timestamp recording when the task was finished.
            ///   - id: The ID of the task.
            ///   - lastUpdate: A timestamp recording when the task progress was last updated.
            ///   - message: Information about the progress of the task.
            ///   - progress: The progress of the task, as a percentage complete.
            ///   - result: The result of the task execution.
            ///   - _self: The URL of the task.
            ///   - started: A timestamp recording when the task was started.
            ///   - status: The status of the task.
            ///   - submitted: A timestamp recording when the task was submitted.
            ///   - submittedBy: The ID of the user who submitted the task.
            public init(
                description: Swift.String? = nil,
                elapsedRuntime: Swift.Int64,
                finished: Swift.Int64? = nil,
                id: Swift.String,
                lastUpdate: Swift.Int64,
                message: Swift.String? = nil,
                progress: Swift.Int64,
                result: Components.Schemas.TaskProgressBeanJsonNode.resultPayload? = nil,
                _self: Swift.String,
                started: Swift.Int64? = nil,
                status: Components.Schemas.TaskProgressBeanJsonNode.statusPayload,
                submitted: Swift.Int64,
                submittedBy: Swift.Int64
            ) {
                self.description = description
                self.elapsedRuntime = elapsedRuntime
                self.finished = finished
                self.id = id
                self.lastUpdate = lastUpdate
                self.message = message
                self.progress = progress
                self.result = result
                self._self = _self
                self.started = started
                self.status = status
                self.submitted = submitted
                self.submittedBy = submittedBy
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case elapsedRuntime
                case finished
                case id
                case lastUpdate
                case message
                case progress
                case result
                case _self = "self"
                case started
                case status
                case submitted
                case submittedBy
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                elapsedRuntime = try container.decode(
                    Swift.Int64.self,
                    forKey: .elapsedRuntime
                )
                finished = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .finished
                )
                id = try container.decode(
                    Swift.String.self,
                    forKey: .id
                )
                lastUpdate = try container.decode(
                    Swift.Int64.self,
                    forKey: .lastUpdate
                )
                message = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .message
                )
                progress = try container.decode(
                    Swift.Int64.self,
                    forKey: .progress
                )
                result = try container.decodeIfPresent(
                    Components.Schemas.TaskProgressBeanJsonNode.resultPayload.self,
                    forKey: .result
                )
                _self = try container.decode(
                    Swift.String.self,
                    forKey: ._self
                )
                started = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .started
                )
                status = try container.decode(
                    Components.Schemas.TaskProgressBeanJsonNode.statusPayload.self,
                    forKey: .status
                )
                submitted = try container.decode(
                    Swift.Int64.self,
                    forKey: .submitted
                )
                submittedBy = try container.decode(
                    Swift.Int64.self,
                    forKey: .submittedBy
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "description",
                    "elapsedRuntime",
                    "finished",
                    "id",
                    "lastUpdate",
                    "message",
                    "progress",
                    "result",
                    "self",
                    "started",
                    "status",
                    "submitted",
                    "submittedBy"
                ])
            }
        }
        /// A project category.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdatedProjectCategory`.
        public struct UpdatedProjectCategory: Codable, Hashable, Sendable {
            /// The name of the project category.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatedProjectCategory/description`.
            public var description: Swift.String?
            /// The ID of the project category.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatedProjectCategory/id`.
            public var id: Swift.String?
            /// The description of the project category.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatedProjectCategory/name`.
            public var name: Swift.String?
            /// The URL of the project category.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatedProjectCategory/self`.
            public var _self: Swift.String?
            /// Creates a new `UpdatedProjectCategory`.
            ///
            /// - Parameters:
            ///   - description: The name of the project category.
            ///   - id: The ID of the project category.
            ///   - name: The description of the project category.
            ///   - _self: The URL of the project category.
            public init(
                description: Swift.String? = nil,
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                _self: Swift.String? = nil
            ) {
                self.description = description
                self.id = id
                self.name = name
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case id
                case name
                case _self = "self"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "description",
                    "id",
                    "name",
                    "self"
                ])
            }
        }
        /// A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
        ///
        ///  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
        ///  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
        ///  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
            ///
            /// - Remark: Generated from `#/components/schemas/User/accountId`.
            public var accountId: Swift.String?
            /// The user account type. Can take the following values:
            ///
            ///  *  `atlassian` regular Atlassian user account
            ///  *  `app` system account used for Connect applications and OAuth to represent external systems
            ///  *  `customer` Jira Service Desk account representing an external service desk
            ///
            /// - Remark: Generated from `#/components/schemas/User/accountType`.
            @frozen public enum accountTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case atlassian = "atlassian"
                case app = "app"
                case customer = "customer"
                case unknown = "unknown"
            }
            /// The user account type. Can take the following values:
            ///
            ///  *  `atlassian` regular Atlassian user account
            ///  *  `app` system account used for Connect applications and OAuth to represent external systems
            ///  *  `customer` Jira Service Desk account representing an external service desk
            ///
            /// - Remark: Generated from `#/components/schemas/User/accountType`.
            public var accountType: Components.Schemas.User.accountTypePayload?
            /// Whether the user is active.
            ///
            /// - Remark: Generated from `#/components/schemas/User/active`.
            public var active: Swift.Bool?
            /// The application roles the user is assigned to.
            ///
            /// - Remark: Generated from `#/components/schemas/User/applicationRoles`.
            public struct applicationRolesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/User/applicationRoles/value1`.
                public var value1: Components.Schemas.SimpleListWrapperApplicationRole
                /// Creates a new `applicationRolesPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.SimpleListWrapperApplicationRole) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The application roles the user is assigned to.
            ///
            /// - Remark: Generated from `#/components/schemas/User/applicationRoles`.
            public var applicationRoles: Components.Schemas.User.applicationRolesPayload?
            /// The avatars of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/User/avatarUrls`.
            public struct avatarUrlsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/User/avatarUrls/value1`.
                public var value1: Components.Schemas.AvatarUrlsBean
                /// Creates a new `avatarUrlsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AvatarUrlsBean) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The avatars of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/User/avatarUrls`.
            public var avatarUrls: Components.Schemas.User.avatarUrlsPayload?
            /// The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
            ///
            /// - Remark: Generated from `#/components/schemas/User/displayName`.
            public var displayName: Swift.String?
            /// The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
            ///
            /// - Remark: Generated from `#/components/schemas/User/emailAddress`.
            public var emailAddress: Swift.String?
            /// Expand options that include additional user details in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/User/expand`.
            public var expand: Swift.String?
            /// The groups that the user belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/User/groups`.
            public struct groupsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/User/groups/value1`.
                public var value1: Components.Schemas.SimpleListWrapperGroupName
                /// Creates a new `groupsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.SimpleListWrapperGroupName) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The groups that the user belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/User/groups`.
            public var groups: Components.Schemas.User.groupsPayload?
            /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///
            /// - Remark: Generated from `#/components/schemas/User/key`.
            public var key: Swift.String?
            /// The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
            ///
            /// - Remark: Generated from `#/components/schemas/User/locale`.
            public var locale: Swift.String?
            /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///
            /// - Remark: Generated from `#/components/schemas/User/name`.
            public var name: Swift.String?
            /// The URL of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/User/self`.
            public var _self: Swift.String?
            /// The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
            ///
            /// - Remark: Generated from `#/components/schemas/User/timeZone`.
            public var timeZone: Swift.String?
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
            ///   - accountType: The user account type. Can take the following values:
            ///   - active: Whether the user is active.
            ///   - applicationRoles: The application roles the user is assigned to.
            ///   - avatarUrls: The avatars of the user.
            ///   - displayName: The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
            ///   - emailAddress: The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
            ///   - expand: Expand options that include additional user details in the response.
            ///   - groups: The groups that the user belongs to.
            ///   - key: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///   - locale: The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
            ///   - name: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
            ///   - _self: The URL of the user.
            ///   - timeZone: The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
            public init(
                accountId: Swift.String? = nil,
                accountType: Components.Schemas.User.accountTypePayload? = nil,
                active: Swift.Bool? = nil,
                applicationRoles: Components.Schemas.User.applicationRolesPayload? = nil,
                avatarUrls: Components.Schemas.User.avatarUrlsPayload? = nil,
                displayName: Swift.String? = nil,
                emailAddress: Swift.String? = nil,
                expand: Swift.String? = nil,
                groups: Components.Schemas.User.groupsPayload? = nil,
                key: Swift.String? = nil,
                locale: Swift.String? = nil,
                name: Swift.String? = nil,
                _self: Swift.String? = nil,
                timeZone: Swift.String? = nil
            ) {
                self.accountId = accountId
                self.accountType = accountType
                self.active = active
                self.applicationRoles = applicationRoles
                self.avatarUrls = avatarUrls
                self.displayName = displayName
                self.emailAddress = emailAddress
                self.expand = expand
                self.groups = groups
                self.key = key
                self.locale = locale
                self.name = name
                self._self = _self
                self.timeZone = timeZone
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
                case accountType
                case active
                case applicationRoles
                case avatarUrls
                case displayName
                case emailAddress
                case expand
                case groups
                case key
                case locale
                case name
                case _self = "self"
                case timeZone
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                accountId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .accountId
                )
                accountType = try container.decodeIfPresent(
                    Components.Schemas.User.accountTypePayload.self,
                    forKey: .accountType
                )
                active = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .active
                )
                applicationRoles = try container.decodeIfPresent(
                    Components.Schemas.User.applicationRolesPayload.self,
                    forKey: .applicationRoles
                )
                avatarUrls = try container.decodeIfPresent(
                    Components.Schemas.User.avatarUrlsPayload.self,
                    forKey: .avatarUrls
                )
                displayName = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .displayName
                )
                emailAddress = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .emailAddress
                )
                expand = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .expand
                )
                groups = try container.decodeIfPresent(
                    Components.Schemas.User.groupsPayload.self,
                    forKey: .groups
                )
                key = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .key
                )
                locale = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .locale
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                timeZone = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .timeZone
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "accountId",
                    "accountType",
                    "active",
                    "applicationRoles",
                    "avatarUrls",
                    "displayName",
                    "emailAddress",
                    "expand",
                    "groups",
                    "key",
                    "locale",
                    "name",
                    "self",
                    "timeZone"
                ])
            }
        }
        /// Details about a project version.
        ///
        /// - Remark: Generated from `#/components/schemas/Version`.
        public struct Version: Codable, Hashable, Sendable {
            /// If the expand option `approvers` is used, returns a list containing the approvers for this version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/approvers`.
            public var approvers: [Components.Schemas.VersionApprover]?
            /// Indicates that the version is archived. Optional when creating or updating a version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/archived`.
            public var archived: Swift.Bool?
            /// The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/description`.
            public var description: Swift.String?
            /// If the expand option `driver` is used, returns the Atlassian account ID of the driver.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/driver`.
            public var driver: Swift.String?
            /// Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
            ///
            ///  *  `operations` Returns the list of operations available for this version.
            ///  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
            ///  *  `driver` Returns the Atlassian account ID of the version driver.
            ///  *  `approvers` Returns a list containing approvers for this version.
            ///
            /// Optional for create and update.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/expand`.
            public var expand: Swift.String?
            /// The ID of the version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/id`.
            public var id: Swift.String?
            /// If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/issuesStatusForFixVersion`.
            public struct issuesStatusForFixVersionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Version/issuesStatusForFixVersion/value1`.
                public var value1: Components.Schemas.VersionIssuesStatus
                /// Creates a new `issuesStatusForFixVersionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.VersionIssuesStatus) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/issuesStatusForFixVersion`.
            public var issuesStatusForFixVersion: Components.Schemas.Version.issuesStatusForFixVersionPayload?
            /// The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/moveUnfixedIssuesTo`.
            public var moveUnfixedIssuesTo: Swift.String?
            /// The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/name`.
            public var name: Swift.String?
            /// If the expand option `operations` is used, returns the list of operations available for this version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/operations`.
            public var operations: [Components.Schemas.SimpleLink]?
            /// Indicates that the version is overdue.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/overdue`.
            public var overdue: Swift.Bool?
            /// Deprecated. Use `projectId`.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/project`.
            public var project: Swift.String?
            /// The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/projectId`.
            public var projectId: Swift.Int64?
            /// The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/releaseDate`.
            public var releaseDate: Swift.String?
            /// Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/released`.
            public var released: Swift.Bool?
            /// The URL of the version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/self`.
            public var _self: Swift.String?
            /// The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/startDate`.
            public var startDate: Swift.String?
            /// The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/userReleaseDate`.
            public var userReleaseDate: Swift.String?
            /// The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/userStartDate`.
            public var userStartDate: Swift.String?
            /// Creates a new `Version`.
            ///
            /// - Parameters:
            ///   - approvers: If the expand option `approvers` is used, returns a list containing the approvers for this version.
            ///   - archived: Indicates that the version is archived. Optional when creating or updating a version.
            ///   - description: The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
            ///   - driver: If the expand option `driver` is used, returns the Atlassian account ID of the driver.
            ///   - expand: Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
            ///   - id: The ID of the version.
            ///   - issuesStatusForFixVersion: If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
            ///   - moveUnfixedIssuesTo: The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
            ///   - name: The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
            ///   - operations: If the expand option `operations` is used, returns the list of operations available for this version.
            ///   - overdue: Indicates that the version is overdue.
            ///   - project: Deprecated. Use `projectId`.
            ///   - projectId: The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
            ///   - releaseDate: The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
            ///   - released: Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
            ///   - _self: The URL of the version.
            ///   - startDate: The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
            ///   - userReleaseDate: The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
            ///   - userStartDate: The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
            public init(
                approvers: [Components.Schemas.VersionApprover]? = nil,
                archived: Swift.Bool? = nil,
                description: Swift.String? = nil,
                driver: Swift.String? = nil,
                expand: Swift.String? = nil,
                id: Swift.String? = nil,
                issuesStatusForFixVersion: Components.Schemas.Version.issuesStatusForFixVersionPayload? = nil,
                moveUnfixedIssuesTo: Swift.String? = nil,
                name: Swift.String? = nil,
                operations: [Components.Schemas.SimpleLink]? = nil,
                overdue: Swift.Bool? = nil,
                project: Swift.String? = nil,
                projectId: Swift.Int64? = nil,
                releaseDate: Swift.String? = nil,
                released: Swift.Bool? = nil,
                _self: Swift.String? = nil,
                startDate: Swift.String? = nil,
                userReleaseDate: Swift.String? = nil,
                userStartDate: Swift.String? = nil
            ) {
                self.approvers = approvers
                self.archived = archived
                self.description = description
                self.driver = driver
                self.expand = expand
                self.id = id
                self.issuesStatusForFixVersion = issuesStatusForFixVersion
                self.moveUnfixedIssuesTo = moveUnfixedIssuesTo
                self.name = name
                self.operations = operations
                self.overdue = overdue
                self.project = project
                self.projectId = projectId
                self.releaseDate = releaseDate
                self.released = released
                self._self = _self
                self.startDate = startDate
                self.userReleaseDate = userReleaseDate
                self.userStartDate = userStartDate
            }
            public enum CodingKeys: String, CodingKey {
                case approvers
                case archived
                case description
                case driver
                case expand
                case id
                case issuesStatusForFixVersion
                case moveUnfixedIssuesTo
                case name
                case operations
                case overdue
                case project
                case projectId
                case releaseDate
                case released
                case _self = "self"
                case startDate
                case userReleaseDate
                case userStartDate
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                approvers = try container.decodeIfPresent(
                    [Components.Schemas.VersionApprover].self,
                    forKey: .approvers
                )
                archived = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .archived
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                driver = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .driver
                )
                expand = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .expand
                )
                id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .id
                )
                issuesStatusForFixVersion = try container.decodeIfPresent(
                    Components.Schemas.Version.issuesStatusForFixVersionPayload.self,
                    forKey: .issuesStatusForFixVersion
                )
                moveUnfixedIssuesTo = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .moveUnfixedIssuesTo
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                operations = try container.decodeIfPresent(
                    [Components.Schemas.SimpleLink].self,
                    forKey: .operations
                )
                overdue = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .overdue
                )
                project = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .project
                )
                projectId = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .projectId
                )
                releaseDate = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .releaseDate
                )
                released = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .released
                )
                _self = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: ._self
                )
                startDate = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .startDate
                )
                userReleaseDate = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .userReleaseDate
                )
                userStartDate = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .userStartDate
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "approvers",
                    "archived",
                    "description",
                    "driver",
                    "expand",
                    "id",
                    "issuesStatusForFixVersion",
                    "moveUnfixedIssuesTo",
                    "name",
                    "operations",
                    "overdue",
                    "project",
                    "projectId",
                    "releaseDate",
                    "released",
                    "self",
                    "startDate",
                    "userReleaseDate",
                    "userStartDate"
                ])
            }
        }
        /// Contains details about a version approver.
        ///
        /// - Remark: Generated from `#/components/schemas/VersionApprover`.
        public struct VersionApprover: Codable, Hashable, Sendable {
            /// The Atlassian account ID of the approver.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionApprover/accountId`.
            public var accountId: Swift.String?
            /// A description of why the user is declining the approval.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionApprover/declineReason`.
            public var declineReason: Swift.String?
            /// A description of what the user is approving within the specified version.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionApprover/description`.
            public var description: Swift.String?
            /// The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED*
            ///
            /// - Remark: Generated from `#/components/schemas/VersionApprover/status`.
            public var status: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `VersionApprover`.
            ///
            /// - Parameters:
            ///   - accountId: The Atlassian account ID of the approver.
            ///   - declineReason: A description of why the user is declining the approval.
            ///   - description: A description of what the user is approving within the specified version.
            ///   - status: The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED*
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                accountId: Swift.String? = nil,
                declineReason: Swift.String? = nil,
                description: Swift.String? = nil,
                status: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.accountId = accountId
                self.declineReason = declineReason
                self.description = description
                self.status = status
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
                case declineReason
                case description
                case status
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                accountId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .accountId
                )
                declineReason = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .declineReason
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                status = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .status
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "accountId",
                    "declineReason",
                    "description",
                    "status"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    accountId,
                    forKey: .accountId
                )
                try container.encodeIfPresent(
                    declineReason,
                    forKey: .declineReason
                )
                try container.encodeIfPresent(
                    description,
                    forKey: .description
                )
                try container.encodeIfPresent(
                    status,
                    forKey: .status
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Counts of the number of issues in various statuses.
        ///
        /// - Remark: Generated from `#/components/schemas/VersionIssuesStatus`.
        public struct VersionIssuesStatus: Codable, Hashable, Sendable {
            /// Count of issues with status *done*.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionIssuesStatus/done`.
            public var done: Swift.Int64?
            /// Count of issues with status *in progress*.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionIssuesStatus/inProgress`.
            public var inProgress: Swift.Int64?
            /// Count of issues with status *to do*.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionIssuesStatus/toDo`.
            public var toDo: Swift.Int64?
            /// Count of issues with a status other than *to do*, *in progress*, and *done*.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionIssuesStatus/unmapped`.
            public var unmapped: Swift.Int64?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `VersionIssuesStatus`.
            ///
            /// - Parameters:
            ///   - done: Count of issues with status *done*.
            ///   - inProgress: Count of issues with status *in progress*.
            ///   - toDo: Count of issues with status *to do*.
            ///   - unmapped: Count of issues with a status other than *to do*, *in progress*, and *done*.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                done: Swift.Int64? = nil,
                inProgress: Swift.Int64? = nil,
                toDo: Swift.Int64? = nil,
                unmapped: Swift.Int64? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.done = done
                self.inProgress = inProgress
                self.toDo = toDo
                self.unmapped = unmapped
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case done
                case inProgress
                case toDo
                case unmapped
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                done = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .done
                )
                inProgress = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .inProgress
                )
                toDo = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .toDo
                )
                unmapped = try container.decodeIfPresent(
                    Swift.Int64.self,
                    forKey: .unmapped
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "done",
                    "inProgress",
                    "toDo",
                    "unmapped"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    done,
                    forKey: .done
                )
                try container.encodeIfPresent(
                    inProgress,
                    forKey: .inProgress
                )
                try container.encodeIfPresent(
                    toDo,
                    forKey: .toDo
                )
                try container.encodeIfPresent(
                    unmapped,
                    forKey: .unmapped
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WarningCollection`.
        public struct WarningCollection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WarningCollection/warnings`.
            public var warnings: [Swift.String]?
            /// Creates a new `WarningCollection`.
            ///
            /// - Parameters:
            ///   - warnings:
            public init(warnings: [Swift.String]? = nil) {
                self.warnings = warnings
            }
            public enum CodingKeys: String, CodingKey {
                case warnings
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                warnings = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .warnings
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "warnings"
                ])
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get bulk editable fields
    ///
    /// Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.
    ///
    /// **[Permissions](#permissions) required:**
    ///
    ///  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
    ///  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
    ///  *  Depending on the field, any field-specific permissions required to edit it.
    ///
    /// - Remark: HTTP `GET /rest/api/3/bulk/issues/fields`.
    /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)`.
    public enum getBulkEditableFields {
        public static let id: Swift.String = "getBulkEditableFields"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The IDs or keys of the issues to get editable fields from.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/query/issueIdsOrKeys`.
                public var issueIdsOrKeys: Swift.String
                /// (Optional)The text to search for in the editable fields.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/query/searchText`.
                public var searchText: Swift.String?
                /// (Optional)The end cursor for use in pagination.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/query/endingBefore`.
                public var endingBefore: Swift.String?
                /// (Optional)The start cursor for use in pagination.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/query/startingAfter`.
                public var startingAfter: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - issueIdsOrKeys: The IDs or keys of the issues to get editable fields from.
                ///   - searchText: (Optional)The text to search for in the editable fields.
                ///   - endingBefore: (Optional)The end cursor for use in pagination.
                ///   - startingAfter: (Optional)The start cursor for use in pagination.
                public init(
                    issueIdsOrKeys: Swift.String,
                    searchText: Swift.String? = nil,
                    endingBefore: Swift.String? = nil,
                    startingAfter: Swift.String? = nil
                ) {
                    self.issueIdsOrKeys = issueIdsOrKeys
                    self.searchText = searchText
                    self.endingBefore = endingBefore
                    self.startingAfter = startingAfter
                }
            }
            public var query: Operations.getBulkEditableFields.Input.Query
            /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBulkEditableFields.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBulkEditableFields.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getBulkEditableFields.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getBulkEditableFields.Input.Query,
                headers: Operations.getBulkEditableFields.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BulkEditGetFields)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BulkEditGetFields {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBulkEditableFields.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBulkEditableFields.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBulkEditableFields.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBulkEditableFields.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.BulkOperationErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BulkOperationErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBulkEditableFields.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBulkEditableFields.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is not valid.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.getBulkEditableFields.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.getBulkEditableFields.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.BulkOperationErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BulkOperationErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBulkEditableFields.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBulkEditableFields.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getBulkEditableFields.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getBulkEditableFields.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.BulkOperationErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BulkOperationErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBulkEditableFields.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBulkEditableFields.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Returned if the user does not have the necessary permission.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.getBulkEditableFields.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.getBulkEditableFields.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.BulkOperationErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BulkOperationErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBulkEditableFields.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBulkEditableFields.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Returned if no editable fields are found for the provided issue IDs.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/get(getBulkEditableFields)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getBulkEditableFields.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getBulkEditableFields.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Bulk edit issues
    ///
    /// Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.
    ///
    /// **[Permissions](#permissions) required:**
    ///
    ///  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
    ///  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  Edit [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.
    ///  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
    ///
    /// - Remark: HTTP `POST /rest/api/3/bulk/issues/fields`.
    /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/post(submitBulkEdit)`.
    public enum submitBulkEdit {
        public static let id: Swift.String = "submitBulkEdit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.submitBulkEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.submitBulkEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.submitBulkEdit.Input.Headers
            /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.IssueBulkEditPayload)
            }
            public var body: Operations.submitBulkEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.submitBulkEdit.Input.Headers = .init(),
                body: Operations.submitBulkEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.SubmittedBulkOperation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SubmittedBulkOperation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.submitBulkEdit.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.submitBulkEdit.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/post(submitBulkEdit)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.submitBulkEdit.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.submitBulkEdit.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.BulkOperationErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BulkOperationErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.submitBulkEdit.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.submitBulkEdit.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is invalid.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/post(submitBulkEdit)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.submitBulkEdit.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.submitBulkEdit.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/bulk/issues/fields/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.BulkOperationErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BulkOperationErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.submitBulkEdit.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.submitBulkEdit.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/bulk/issues/fields/post(submitBulkEdit)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.submitBulkEdit.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.submitBulkEdit.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create issue
    ///
    /// Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
    ///
    /// The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
    ///
    /// Creating a subtask differs from creating an issue as follows:
    ///
    ///  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
    ///  *  `parent` must contain the ID or key of the parent issue.
    ///
    /// In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
    ///
    /// **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
    ///
    /// - Remark: HTTP `POST /rest/api/3/issue`.
    /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)`.
    public enum createIssue {
        public static let id: Swift.String = "createIssue"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/query`.
            public struct Query: Sendable, Hashable {
                /// Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/query/updateHistory`.
                public var updateHistory: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - updateHistory: Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.
                public init(updateHistory: Swift.Bool? = nil) {
                    self.updateHistory = updateHistory
                }
            }
            public var query: Operations.createIssue.Input.Query
            /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createIssue.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createIssue.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createIssue.Input.Headers
            /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.IssueUpdateDetails)
            }
            public var body: Operations.createIssue.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.createIssue.Input.Query = .init(),
                headers: Operations.createIssue.Input.Headers = .init(),
                body: Operations.createIssue.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.CreatedIssue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreatedIssue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createIssue.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createIssue.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createIssue.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createIssue.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorCollection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorCollection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createIssue.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createIssue.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Returned if the request:
            ///
            ///  *  is missing required fields.
            ///  *  contains invalid field values.
            ///  *  contains fields that cannot be set for the issue type.
            ///  *  is by a user who does not have the necessary permission.
            ///  *  is to create a subtype in a project different that of the parent issue.
            ///  *  is for a subtask when the option to create subtasks is disabled.
            ///  *  is invalid for any other reason.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createIssue.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createIssue.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorCollection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorCollection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createIssue.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createIssue.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createIssue.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.createIssue.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorCollection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorCollection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createIssue.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createIssue.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Returned if the user does not have the necessary permission.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createIssue.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createIssue.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/issue/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorCollection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorCollection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createIssue.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createIssue.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Returned if a configuration problem prevents the creation of the issue.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/issue/post(createIssue)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.createIssue.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.createIssue.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get field reference data (GET)
    ///
    /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
    ///
    /// To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
    ///
    /// This operation can be accessed anonymously.
    ///
    /// **[Permissions](#permissions) required:** None.
    ///
    /// - Remark: HTTP `GET /rest/api/3/jql/autocompletedata`.
    /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/get(getAutoComplete)`.
    public enum getAutoComplete {
        public static let id: Swift.String = "getAutoComplete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAutoComplete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAutoComplete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAutoComplete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getAutoComplete.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.JQLReferenceData)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JQLReferenceData {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAutoComplete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAutoComplete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/get(getAutoComplete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAutoComplete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAutoComplete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/get(getAutoComplete)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getAutoComplete.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getAutoComplete.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get field reference data (POST)
    ///
    /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
    ///
    /// This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
    ///
    /// It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
    ///
    /// **[Permissions](#permissions) required:** None.
    ///
    /// - Remark: HTTP `POST /rest/api/3/jql/autocompletedata`.
    /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/post(getAutoCompletePost)`.
    public enum getAutoCompletePost {
        public static let id: Swift.String = "getAutoCompletePost"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAutoCompletePost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAutoCompletePost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAutoCompletePost.Input.Headers
            /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SearchAutoCompleteFilter)
            }
            public var body: Operations.getAutoCompletePost.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getAutoCompletePost.Input.Headers = .init(),
                body: Operations.getAutoCompletePost.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/jql/autocompletedata/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JQLReferenceData)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JQLReferenceData {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAutoCompletePost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAutoCompletePost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/post(getAutoCompletePost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAutoCompletePost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAutoCompletePost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Returned if the request is not valid.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/post(getAutoCompletePost)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.getAutoCompletePost.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.getAutoCompletePost.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/jql/autocompletedata/post(getAutoCompletePost)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getAutoCompletePost.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getAutoCompletePost.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get preference
    ///
    /// Returns the value of a preference of the current user.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
    ///  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
    ///
    /// These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.
    ///
    ///  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
    ///  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
    ///  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
    ///  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `GET /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/get(getPreference)`.
    public enum getPreference {
        public static let id: Swift.String = "getPreference"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The key of the preference.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/GET/query/key`.
                public var key: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - key: The key of the preference.
                public init(key: Swift.String) {
                    self.key = key
                }
            }
            public var query: Operations.getPreference.Input.Query
            /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPreference.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPreference.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPreference.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getPreference.Input.Query,
                headers: Operations.getPreference.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/GET/responses/200/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPreference.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPreference.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/get(getPreference)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPreference.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPreference.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/get(getPreference)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getPreference.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getPreference.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Returned if the key is not provided or not found.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/get(getPreference)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getPreference.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getPreference.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set preference
    ///
    /// Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
    ///
    ///  *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
    ///  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
    ///  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
    ///  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
    ///  *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
    ///  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
    ///
    /// These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.
    ///
    ///  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
    ///  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
    ///  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
    ///  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `PUT /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/put(setPreference)`.
    public enum setPreference {
        public static let id: Swift.String = "setPreference"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// The key of the preference. The maximum length is 255 characters.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/query/key`.
                public var key: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - key: The key of the preference. The maximum length is 255 characters.
                public init(key: Swift.String) {
                    self.key = key
                }
            }
            public var query: Operations.setPreference.Input.Query
            /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.setPreference.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.setPreference.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.setPreference.Input.Headers
            /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/requestBody/content/application\/json`.
                case json(Swift.String)
                /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.setPreference.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.setPreference.Input.Query,
                headers: Operations.setPreference.Input.Headers = .init(),
                body: Operations.setPreference.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/PUT/responses/204/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.setPreference.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.setPreference.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/put(setPreference)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.setPreference.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.setPreference.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/put(setPreference)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.setPreference.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.setPreference.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Returned if the key or value is not provided or invalid.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/put(setPreference)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.setPreference.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.setPreference.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete preference
    ///
    /// Deletes a preference of the user, which restores the default value of system defined settings.
    ///
    /// Note that these keys are deprecated:
    ///
    ///  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
    ///  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
    ///
    /// Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `DELETE /rest/api/3/mypreferences`.
    /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/delete(removePreference)`.
    public enum removePreference {
        public static let id: Swift.String = "removePreference"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// The key of the preference.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/mypreferences/DELETE/query/key`.
                public var key: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - key: The key of the preference.
                public init(key: Swift.String) {
                    self.key = key
                }
            }
            public var query: Operations.removePreference.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.removePreference.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/delete(removePreference)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.removePreference.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.removePreference.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/delete(removePreference)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.removePreference.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.removePreference.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Returned if the key is not provided or not found.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/mypreferences/delete(removePreference)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.removePreference.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.removePreference.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get priority schemes
    ///
    /// Returns a [paginated](#pagination) list of priority schemes.
    ///
    /// **[Permissions](#permissions) required:** Permission to access Jira.
    ///
    /// - Remark: HTTP `GET /rest/api/3/priorityscheme`.
    /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/get(getPrioritySchemes)`.
    public enum getPrioritySchemes {
        public static let id: Swift.String = "getPrioritySchemes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The index of the first item to return in a page of results (page offset).
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/startAt`.
                public var startAt: Swift.String?
                /// The maximum number of items to return per page.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/maxResults`.
                public var maxResults: Swift.String?
                /// A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/priorityId`.
                public var priorityId: [Swift.Int64]?
                /// A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/schemeId`.
                public var schemeId: [Swift.Int64]?
                /// The name of scheme to search for.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/schemeName`.
                public var schemeName: Swift.String?
                /// Whether only the default priority is returned.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/onlyDefault`.
                public var onlyDefault: Swift.Bool?
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/orderBy`.
                @frozen public enum orderByPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case name = "name"
                    case _plus_name = "+name"
                    case _hyphen_name = "-name"
                }
                /// The ordering to return the priority schemes by.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/orderBy`.
                public var orderBy: Operations.getPrioritySchemes.Input.Query.orderByPayload?
                /// A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/query/expand`.
                public var expand: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startAt: The index of the first item to return in a page of results (page offset).
                ///   - maxResults: The maximum number of items to return per page.
                ///   - priorityId: A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.
                ///   - schemeId: A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.
                ///   - schemeName: The name of scheme to search for.
                ///   - onlyDefault: Whether only the default priority is returned.
                ///   - orderBy: The ordering to return the priority schemes by.
                ///   - expand: A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`.
                public init(
                    startAt: Swift.String? = nil,
                    maxResults: Swift.String? = nil,
                    priorityId: [Swift.Int64]? = nil,
                    schemeId: [Swift.Int64]? = nil,
                    schemeName: Swift.String? = nil,
                    onlyDefault: Swift.Bool? = nil,
                    orderBy: Operations.getPrioritySchemes.Input.Query.orderByPayload? = nil,
                    expand: Swift.String? = nil
                ) {
                    self.startAt = startAt
                    self.maxResults = maxResults
                    self.priorityId = priorityId
                    self.schemeId = schemeId
                    self.schemeName = schemeName
                    self.onlyDefault = onlyDefault
                    self.orderBy = orderBy
                    self.expand = expand
                }
            }
            public var query: Operations.getPrioritySchemes.Input.Query
            /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPrioritySchemes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPrioritySchemes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPrioritySchemes.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getPrioritySchemes.Input.Query = .init(),
                headers: Operations.getPrioritySchemes.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPrioritySchemes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPrioritySchemes.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/get(getPrioritySchemes)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPrioritySchemes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPrioritySchemes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Returned if the request isn't valid.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/get(getPrioritySchemes)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.getPrioritySchemes.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.getPrioritySchemes.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/get(getPrioritySchemes)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getPrioritySchemes.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getPrioritySchemes.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create priority scheme
    ///
    /// Creates a new priority scheme.
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/priorityscheme`.
    /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)`.
    public enum createPriorityScheme {
        public static let id: Swift.String = "createPriorityScheme"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createPriorityScheme.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createPriorityScheme.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createPriorityScheme.Input.Headers
            /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreatePrioritySchemeDetails)
            }
            public var body: Operations.createPriorityScheme.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createPriorityScheme.Input.Headers = .init(),
                body: Operations.createPriorityScheme.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.PrioritySchemeId)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PrioritySchemeId {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createPriorityScheme.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createPriorityScheme.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is completed.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createPriorityScheme.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createPriorityScheme.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/priorityscheme/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.PrioritySchemeId)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PrioritySchemeId {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createPriorityScheme.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createPriorityScheme.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is accepted.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.createPriorityScheme.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.createPriorityScheme.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Returned if the request isn't valid.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createPriorityScheme.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createPriorityScheme.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createPriorityScheme.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.createPriorityScheme.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Returned if the user doesn't have the necessary permissions.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createPriorityScheme.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createPriorityScheme.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Returned if an action with this priority scheme is still in progress.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/priorityscheme/post(createPriorityScheme)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.createPriorityScheme.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.createPriorityScheme.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all projects
    ///
    /// Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
    ///
    /// This operation can be accessed anonymously.
    ///
    /// **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    ///
    /// - Remark: HTTP `GET /rest/api/3/project`.
    /// - Remark: Generated from `#/paths//rest/api/3/project/get(getAllProjects)`.
    public enum getAllProjects {
        public static let id: Swift.String = "getAllProjects"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/project/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
                ///
                ///  *  `description` Returns the project description.
                ///  *  `issueTypes` Returns all issue types associated with the project.
                ///  *  `lead` Returns information about the project lead.
                ///  *  `projectKeys` Returns all project keys associated with the project.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/project/GET/query/expand`.
                public var expand: Swift.String?
                /// Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/project/GET/query/recent`.
                public var recent: Swift.Int32?
                /// A list of project properties to return for the project. This parameter accepts a comma-separated list.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/project/GET/query/properties`.
                public var properties: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
                ///   - recent: Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.
                ///   - properties: A list of project properties to return for the project. This parameter accepts a comma-separated list.
                public init(
                    expand: Swift.String? = nil,
                    recent: Swift.Int32? = nil,
                    properties: [Swift.String]? = nil
                ) {
                    self.expand = expand
                    self.recent = recent
                    self.properties = properties
                }
            }
            public var query: Operations.getAllProjects.Input.Query
            /// - Remark: Generated from `#/paths/rest/api/3/project/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllProjects.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllProjects.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAllProjects.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAllProjects.Input.Query = .init(),
                headers: Operations.getAllProjects.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/project/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/project/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Project])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Project] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllProjects.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllProjects.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/project/get(getAllProjects)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllProjects.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllProjects.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/project/get(getAllProjects)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getAllProjects.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getAllProjects.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create project
    ///
    /// Creates a project based on a project type template, as shown in the following table:
    ///
    /// | Project Type Key | Project Template Key |  
    /// |--|--|  
    /// | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  
    /// | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  
    /// | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  
    /// The project types are available according to the installed Jira features as follows:
    ///
    ///  *  Jira Core, the default, enables `business` projects.
    ///  *  Jira Service Management enables `service_desk` projects.
    ///  *  Jira Software enables `software` projects.
    ///
    /// To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/project`.
    /// - Remark: Generated from `#/paths//rest/api/3/project/post(createProject)`.
    public enum createProject {
        public static let id: Swift.String = "createProject"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/project/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createProject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createProject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createProject.Input.Headers
            /// - Remark: Generated from `#/paths/rest/api/3/project/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/project/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateProjectDetails)
            }
            public var body: Operations.createProject.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createProject.Input.Headers = .init(),
                body: Operations.createProject.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/project/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/project/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ProjectIdentifiers)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectIdentifiers {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createProject.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createProject.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Returned if the project is created.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/project/post(createProject)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createProject.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createProject.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Returned if the request is not valid and the project could not be created.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/project/post(createProject)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createProject.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createProject.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/project/post(createProject)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createProject.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.createProject.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Returned if the user does not have permission to create projects.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/project/post(createProject)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createProject.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createProject.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get user
    ///
    /// Returns a user.
    ///
    /// Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
    ///
    /// **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `GET /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/get(getUser)`.
    public enum getUser {
        public static let id: Swift.String = "getUser"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/user/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/user/GET/query/accountId`.
                public var accountId: Swift.String?
                /// This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/user/GET/query/username`.
                public var username: Swift.String?
                /// This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/user/GET/query/key`.
                public var key: Swift.String?
                /// Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:
                ///
                ///  *  `groups` includes all groups and nested groups to which the user belongs.
                ///  *  `applicationRoles` includes details of all the applications to which the user has access.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/user/GET/query/expand`.
                public var expand: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
                ///   - username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
                ///   - key: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
                ///   - expand: Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:
                public init(
                    accountId: Swift.String? = nil,
                    username: Swift.String? = nil,
                    key: Swift.String? = nil,
                    expand: Swift.String? = nil
                ) {
                    self.accountId = accountId
                    self.username = username
                    self.key = key
                    self.expand = expand
                }
            }
            public var query: Operations.getUser.Input.Query
            /// - Remark: Generated from `#/paths/rest/api/3/user/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getUser.Input.Query = .init(),
                headers: Operations.getUser.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/user/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/user/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/get(getUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/get(getUser)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getUser.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getUser.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Returned if the calling user does not have the *Browse users and groups* global permission.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/get(getUser)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.getUser.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.getUser.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Returned if the user is not found.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/get(getUser)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getUser.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getUser.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create user
    ///
    /// Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
    ///
    /// If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
    ///
    /// **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    ///
    /// - Remark: HTTP `POST /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/post(createUser)`.
    public enum createUser {
        public static let id: Swift.String = "createUser"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/user/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createUser.Input.Headers
            /// - Remark: Generated from `#/paths/rest/api/3/user/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/user/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.NewUserDetails)
            }
            public var body: Operations.createUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createUser.Input.Headers = .init(),
                body: Operations.createUser.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rest/api/3/user/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rest/api/3/user/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createUser.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createUser.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/post(createUser)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createUser.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createUser.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Returned if the request is invalid or the number of licensed users is exceeded.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/post(createUser)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createUser.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createUser.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/post(createUser)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createUser.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.createUser.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Returned if the user does not have the necessary permission.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/post(createUser)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createUser.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createUser.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete user
    ///
    /// Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
    ///
    /// **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
    ///
    /// - Remark: HTTP `DELETE /rest/api/3/user`.
    /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)`.
    public enum removeUser {
        public static let id: Swift.String = "removeUser"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rest/api/3/user/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/user/DELETE/query/accountId`.
                public var accountId: Swift.String
                /// This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/user/DELETE/query/username`.
                public var username: Swift.String?
                /// This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
                ///
                /// - Remark: Generated from `#/paths/rest/api/3/user/DELETE/query/key`.
                public var key: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
                ///   - username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
                ///   - key: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
                public init(
                    accountId: Swift.String,
                    username: Swift.String? = nil,
                    key: Swift.String? = nil
                ) {
                    self.accountId = accountId
                    self.username = username
                    self.key = key
                }
            }
            public var query: Operations.removeUser.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.removeUser.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Returned if the request is successful.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.removeUser.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.removeUser.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Returned if the user cannot be removed.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.removeUser.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.removeUser.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Returned if the authentication credentials are incorrect or missing.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.removeUser.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.removeUser.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Returned if the user does not have the necessary permission.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.removeUser.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.removeUser.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Returned if the user is not found.
            ///
            /// - Remark: Generated from `#/paths//rest/api/3/user/delete(removeUser)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.removeUser.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.removeUser.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
